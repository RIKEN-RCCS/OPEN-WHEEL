{
  "paths": [
    {
      "type": "file",
      "value": "ATTENTION.md"
    },
    {
      "type": "dir",
      "name": "WHEEL_introduction",
      "children": [
        {
          "type": "dir",
          "name": "how_to_boot",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_introduction/how_to_boot/boot.md"
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "WHEEL_manual",
      "children": [
        {
          "type": "dir",
          "name": "1_home_screen",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_manual/1_home_screen/create_project.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/1_home_screen/edit_project.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "2_remotehost_screen",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_manual/2_remotehost_screen/remotehost.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "3_workflow_screen",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_manual/3_workflow_screen/1_graphview.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/3_workflow_screen/2_listview.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/3_workflow_screen/3_editor.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/3_workflow_screen/3_rapid.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/3_workflow_screen/4_PS_editor.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "4_component",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/10_Stepjob.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/11_BulkjobTask.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/1_Task.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/2_If.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/3_For.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/4_Foreach.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/5_While.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/6_Source.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/7_Viewer.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/8_ParameterStudy.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/99_component_design.md"
            },
            {
              "type": "file",
              "value": "WHEEL_manual/4_component/9_Workflow.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "5_execute_workflow",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_manual/5_execute_workflow/execute_workflow.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "6_jobScript_screen",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_manual/6_jobScript_screen/jobScript.md"
            }
          ]
        }
      ]
    },
    {
      "type": "dir",
      "name": "WHEEL_tutorial",
      "children": [
        {
          "type": "dir",
          "name": "1_OpenFOAM_PS_sample",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_tutorial/1_OpenFOAM_PS_sample/OpenFOAM_PS_sample.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "2_OpenFOAM_KPrepostCloud_sample",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_tutorial/2_OpenFOAM_KPrepostCloud_sample/OpenFOAM_KPrepostCloud_sample.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "3_OpenFOAM_TCS_sample",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_tutorial/3_OpenFOAM_TCS_sample/OpenFOAM_TCS_sample.md"
            }
          ]
        },
        {
          "type": "dir",
          "name": "4_TensorFlow_UGE_sample",
          "children": [
            {
              "type": "file",
              "value": "WHEEL_tutorial/4_TensorFlow_UGE_sample/TensorFlow_UGE_sample.md"
            }
          ]
        }
      ]
    },
    {
      "type": "file",
      "value": "readme.md"
    }
  ],
  "contents": [
    {
      "path": "ATTENTION.md",
      "url": "ATTENTION.html",
      "content": "# 注意事項\n## はじめに\n本ドキュメントは、ワークフローシステムWHEELの仕様上の制限について説明いたします。  \n以下の内容によって構成されています。  \n1. [リモートタスクがシグナルによって終了した場合](#リモートタスクがシグナルによって終了した場合)\n1. [プロジェクトを停止した場合における実行中スクリプトの取り扱い](#プロジェクトを停止した場合における実行中スクリプトの取り扱い)\n1. [巨大なファイルの取り扱いについて](#巨大なファイルの取り扱いについて)\n1. [input/outputコネクタを接続した状態でのコネクタ名称の変更について](#input/outputコネクタを接続した状態でのコネクタ名称の変更について)\n1. [Windows環境での操作](#Windows環境での操作)\n1. [holdingおよびunknown状態について](#holdingおよびunknown状態について)\n\n***\n## リモートタスクがシグナルによって終了した場合\nリモートホストで実行中のプロセスがシグナルによって終了した場合、  \nWHEELの仕様上、リモートのシグナル番号を補足できないため正常終了と判断されます。  \n***\n## プロジェクトを停止した場合における実行中スクリプトの取り扱い\nプロジェクトの停止ボタンによってプロジェクトを停止した場合、nodeが呼び出した子プロセスは停止されますが、\n子プロセスが実行するスクリプトは停止されません。\n***\n## 巨大なファイルの取り扱いについて\nWHEELではプロジェクトで取り扱うデータをgitで管理しているため大サイズのファイルをプロジェクトディレクトリ内に配置すると\nリポジトリ操作のパフォーマンスが低下することによって様々なトラブルが起きます。\nこの問題を回避するためWHEELのグラフビューからアップロードしたファイルについては一定以上のサイズのものは\ngit LFS (https://git-lfs.github.com/) による管理の対象とするように設定します。\nWHEEL以外の手段でプロジェクトのgitリポジトリにファイルを追加した場合は、サイズによっては正常に操作できなくなる可能性があるので注意してください。\n***\n## input/outputコネクタを接続した状態でのコネクタ名称の変更について\n複数のoutputコネクタを1つのinputコネクタに接続してる状態で、  \ninputコネクタの名称変更を行なうと、同時に複数の名称変更処理が行われるため  \nコンポーネントの整合性が取れなくなる場合があります。  \ninput/outputコネクタの編集を行う際は、接続を解除してから実施してください。\n***\n## Windows環境での操作\nWHEELの動作環境がWindowsOSの際、プロジェクトのdeleteを実行するとエラーが表示される場合があります。  \nその場合、deleteしたプロジェクトはプロジェクトリストから削除されますが、実データは削除されません。手動にて削除してください。\n***\n## holdingおよびunknown状態について\nプロジェクトにジョブを投入するタスクが含まれていると、プロジェクトの状態がholdingまたはunknown状態となることがあります。\nholding状態は、ジョブの投入後終了を確認する前に、WHEELのプロセスが終了してしまった時に遷移します。\nこの状態では、プロジェクトの実行は一時停止していますがプロセスが終了する前に投入したジョブの終了確認のみを行なっています。\n全てのジョブが終了した段階で、unknown状態に遷移します。\n\nunknown状態は、プロジェクトの状態が確認できない状態を意味します。\n前述のholding状態から遷移してきた場合は、個々のコンポーネントの状態を確認して全てのタスクが完了しているかどうかを確認してください。\n終了していないタスクが存在する時は、そのままプロジェクトを再実行すると未実行およびfailed状態のコンポーネントのみが再実行されます。\n\nまた、ジョブを投入した後の状態確認処理に失敗した場合(e.g. 一時的な障害などでバッチサーバへの接続が行なえなかった時など)にもunknown状態になります。\nこの場合は、unknown状態となったタスクが正常に終了しているかどうかを直接ジョブ投入先サーバへログインするなどして確認し、\n必要なファイルがあればコピーしてきてください。\n\n",
      "html": "<h1 id=\"%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\">注意事項 <a class=\"heading-anchor-permalink\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\">#</a></h1>\n<h2 id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに <a class=\"heading-anchor-permalink\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">#</a></h2>\n<p>本ドキュメントは、ワークフローシステムWHEELの仕様上の制限について説明いたします。<br>\n以下の内容によって構成されています。</p>\n<ol>\n<li><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E7%B5%82%E4%BA%86%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88\">リモートタスクがシグナルによって終了した場合</a></li>\n<li><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%81%9C%E6%AD%A2%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%AE%9F%E8%A1%8C%E4%B8%AD%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84\">プロジェクトを停止した場合における実行中スクリプトの取り扱い</a></li>\n<li><a href=\"#%E5%B7%A8%E5%A4%A7%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">巨大なファイルの取り扱いについて</a></li>\n<li><a href=\"#input/output%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E3%82%92%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%9F%E7%8A%B6%E6%85%8B%E3%81%A7%E3%81%AE%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E5%90%8D%E7%A7%B0%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">input/outputコネクタを接続した状態でのコネクタ名称の変更について</a></li>\n<li><a href=\"#Windows%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AE%E6%93%8D%E4%BD%9C\">Windows環境での操作</a></li>\n<li><a href=\"#holding%E3%81%8A%E3%82%88%E3%81%B3unknown%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">holdingおよびunknown状態について</a></li>\n</ol>\n<hr>\n<h2 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E7%B5%82%E4%BA%86%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88\">リモートタスクがシグナルによって終了した場合 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6%E7%B5%82%E4%BA%86%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>リモートホストで実行中のプロセスがシグナルによって終了した場合、<br>\nWHEELの仕様上、リモートのシグナル番号を補足できないため正常終了と判断されます。</p>\n<hr>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%81%9C%E6%AD%A2%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%AE%9F%E8%A1%8C%E4%B8%AD%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84\">プロジェクトを停止した場合における実行中スクリプトの取り扱い <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%81%9C%E6%AD%A2%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%AE%9F%E8%A1%8C%E4%B8%AD%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84\">#</a></h2>\n<p>プロジェクトの停止ボタンによってプロジェクトを停止した場合、nodeが呼び出した子プロセスは停止されますが、\n子プロセスが実行するスクリプトは停止されません。</p>\n<hr>\n<h2 id=\"%E5%B7%A8%E5%A4%A7%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">巨大なファイルの取り扱いについて <a class=\"heading-anchor-permalink\" href=\"#%E5%B7%A8%E5%A4%A7%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%96%E3%82%8A%E6%89%B1%E3%81%84%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>WHEELではプロジェクトで取り扱うデータをgitで管理しているため大サイズのファイルをプロジェクトディレクトリ内に配置すると\nリポジトリ操作のパフォーマンスが低下することによって様々なトラブルが起きます。\nこの問題を回避するためWHEELのグラフビューからアップロードしたファイルについては一定以上のサイズのものは\ngit LFS (<a href=\"https://git-lfs.github.com/\">https://git-lfs.github.com/</a>) による管理の対象とするように設定します。\nWHEEL以外の手段でプロジェクトのgitリポジトリにファイルを追加した場合は、サイズによっては正常に操作できなくなる可能性があるので注意してください。</p>\n<hr>\n<h2 id=\"input%2Foutput%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E3%82%92%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%9F%E7%8A%B6%E6%85%8B%E3%81%A7%E3%81%AE%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E5%90%8D%E7%A7%B0%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">input/outputコネクタを接続した状態でのコネクタ名称の変更について <a class=\"heading-anchor-permalink\" href=\"#input%2Foutput%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E3%82%92%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%9F%E7%8A%B6%E6%85%8B%E3%81%A7%E3%81%AE%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF%E5%90%8D%E7%A7%B0%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>複数のoutputコネクタを1つのinputコネクタに接続してる状態で、<br>\ninputコネクタの名称変更を行なうと、同時に複数の名称変更処理が行われるため<br>\nコンポーネントの整合性が取れなくなる場合があります。<br>\ninput/outputコネクタの編集を行う際は、接続を解除してから実施してください。</p>\n<hr>\n<h2 id=\"windows%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AE%E6%93%8D%E4%BD%9C\">Windows環境での操作 <a class=\"heading-anchor-permalink\" href=\"#windows%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AE%E6%93%8D%E4%BD%9C\">#</a></h2>\n<p>WHEELの動作環境がWindowsOSの際、プロジェクトのdeleteを実行するとエラーが表示される場合があります。<br>\nその場合、deleteしたプロジェクトはプロジェクトリストから削除されますが、実データは削除されません。手動にて削除してください。</p>\n<hr>\n<h2 id=\"holding%E3%81%8A%E3%82%88%E3%81%B3unknown%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">holdingおよびunknown状態について <a class=\"heading-anchor-permalink\" href=\"#holding%E3%81%8A%E3%82%88%E3%81%B3unknown%E7%8A%B6%E6%85%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>プロジェクトにジョブを投入するタスクが含まれていると、プロジェクトの状態がholdingまたはunknown状態となることがあります。\nholding状態は、ジョブの投入後終了を確認する前に、WHEELのプロセスが終了してしまった時に遷移します。\nこの状態では、プロジェクトの実行は一時停止していますがプロセスが終了する前に投入したジョブの終了確認のみを行なっています。\n全てのジョブが終了した段階で、unknown状態に遷移します。</p>\n<p>unknown状態は、プロジェクトの状態が確認できない状態を意味します。\n前述のholding状態から遷移してきた場合は、個々のコンポーネントの状態を確認して全てのタスクが完了しているかどうかを確認してください。\n終了していないタスクが存在する時は、そのままプロジェクトを再実行すると未実行およびfailed状態のコンポーネントのみが再実行されます。</p>\n<p>また、ジョブを投入した後の状態確認処理に失敗した場合(e.g. 一時的な障害などでバッチサーバへの接続が行なえなかった時など)にもunknown状態になります。\nこの場合は、unknown状態となったタスクが正常に終了しているかどうかを直接ジョブ投入先サーバへログインするなどして確認し、\n必要なファイルがあればコピーしてきてください。</p>\n",
      "id": 0
    },
    {
      "path": "WHEEL_introduction/how_to_boot/boot.md",
      "url": "WHEEL_introduction/how_to_boot/boot.html",
      "content": "# WHEELの起動方法 \n\n## 事前準備\nWHEELの起動にはdockerを使用します。  \n最新の [docker](https://www.docker.com/) を取得してください。\n\n## 起動方法\n1. 任意の場所にディレクトリを作成します。(以降では、このディレクトリを`CONFIG_DIR`とします。)\n2. `CONFIG_DIR`に以下の2つのファイルをダウンロードします。\n    - [jobScheduler.json](https://raw.githubusercontent.com/RIKEN-RCCS/WHEEL/master/app/config/jobScheduler.json)\n    - [server.json](https://raw.githubusercontent.com/RIKEN-RCCS/WHEEL/master/app/config/server.json)\n3.  HTTP通信用のサーバ証明書および鍵ファイルを作成し、`CONFIG_DIR`に格納します。(HTTP通信用自己証明書の作成方法は、[self-signed certification](../../../self-signed_certification.md)を参考ください。)\n4. ターミナルを起動し、以下のコマンドを入力します。\n\n```\n> docker run -d -v ${HOME}:/root -v CONFIG_DIR:/usr/src/app/config -p 8089:8089 -p 8090:8090 tmkawanabe/wheel:latest\n```\n\nこのとき、`CONFIG_DIR`は、ホストマシンからの絶対パスである必要があります。\n\n上記コマンドでは、\n\n- プロジェクトファイルの作成先を${HOME}で指定できます。\n- WHEEL、jupyter notebookのポート番号を指定できます。(デフォルトでは、WHEEL：8089、jupyter notebook：8090が指定されています。)\n\n詳細設定に関する情報は、 [administrator's guide](../../../AdminGuide.md) をご確認ください。",
      "html": "<h1 id=\"wheel%E3%81%AE%E8%B5%B7%E5%8B%95%E6%96%B9%E6%B3%95\">WHEELの起動方法 <a class=\"heading-anchor-permalink\" href=\"#wheel%E3%81%AE%E8%B5%B7%E5%8B%95%E6%96%B9%E6%B3%95\">#</a></h1>\n<h2 id=\"%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\">事前準備 <a class=\"heading-anchor-permalink\" href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\">#</a></h2>\n<p>WHEELの起動にはdockerを使用します。<br>\n最新の <a href=\"https://www.docker.com/\">docker</a> を取得してください。</p>\n<h2 id=\"%E8%B5%B7%E5%8B%95%E6%96%B9%E6%B3%95\">起動方法 <a class=\"heading-anchor-permalink\" href=\"#%E8%B5%B7%E5%8B%95%E6%96%B9%E6%B3%95\">#</a></h2>\n<ol>\n<li>任意の場所にディレクトリを作成します。(以降では、このディレクトリを<code>CONFIG_DIR</code>とします。)</li>\n<li><code>CONFIG_DIR</code>に以下の2つのファイルをダウンロードします。\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/RIKEN-RCCS/WHEEL/master/app/config/jobScheduler.json\">jobScheduler.json</a></li>\n<li><a href=\"https://raw.githubusercontent.com/RIKEN-RCCS/WHEEL/master/app/config/server.json\">server.json</a></li>\n</ul>\n</li>\n<li>HTTP通信用のサーバ証明書および鍵ファイルを作成し、<code>CONFIG_DIR</code>に格納します。(HTTP通信用自己証明書の作成方法は、<a href=\"../../../self-signed_certification.html\">self-signed certification</a>を参考ください。)</li>\n<li>ターミナルを起動し、以下のコマンドを入力します。</li>\n</ol>\n<pre><code>&gt; docker run -d -v ${HOME}:/root -v CONFIG_DIR:/usr/src/app/config -p 8089:8089 -p 8090:8090 tmkawanabe/wheel:latest\n</code></pre>\n<p>このとき、<code>CONFIG_DIR</code>は、ホストマシンからの絶対パスである必要があります。</p>\n<p>上記コマンドでは、</p>\n<ul>\n<li>プロジェクトファイルの作成先を${HOME}で指定できます。</li>\n<li>WHEEL、jupyter notebookのポート番号を指定できます。(デフォルトでは、WHEEL：8089、jupyter notebook：8090が指定されています。)</li>\n</ul>\n<p>詳細設定に関する情報は、 <a href=\"../../../AdminGuide.html\">administrator’s guide</a> をご確認ください。</p>\n",
      "id": 1
    },
    {
      "path": "WHEEL_manual/1_home_screen/create_project.md",
      "url": "WHEEL_manual/1_home_screen/create_project.html",
      "content": "# プロジェクトの作成と編集\n新規プロジェクトの作成や既存プロジェクトの編集はホーム画面で行います。  \nホーム画面の構成は以下のようになっています。  \n\n![img](./img/home.png \"home\")  \n1. ユーザ名：ログインユーザ名\n1. 画面遷移ドロワー：ホスト登録画面、ログイン画面への遷移用\n1. New ボタン   ：新規プロジェクトの作成\n1. import ボタン：既存プロジェクトの読込\n1. プロジェクト一覧表示エリア　：WHEEL登録済みプロジェクトの表示エリア\n1. プロジェクト名表示エリア　　：プロジェクトの名称表示エリア\n1. プロジェクト説明文エリア　　：プロジェクトに関するコメント表示エリア\n1. プロジェクトパスエリア　　　：プロジェクトパスの表示アリア\n1. プロジェクト作成時間エリア　：プロジェクトの作成時間表示エリア\n1. プロジェクト更新時間エリア　：プロジェクトの更新時間表示エリア\n1. プロジェクトステータスエリア：プロジェクトのステータス表示エリア\n\n## 1. 新規プロジェクトの作成\nプロジェクトの作成方法は、  \n1. 新規プロジェクトの作成\n1. 既存プロジェクトデータの読み込み  \nの2つの方法から行うことができます。  \nそれぞれ、Newボタン、Importボタンから行います。\n\n### 1. [ New ]：新規プロジェクトの作成 \n以下の手順で行います。\n1. [ New ] ボタンをクリックする\n1. プロジェクトデータ作成場所を選択する\n1. プロジェクト名を入力し、[ OK ] ボタンをクリックする  \n\n#### 1. [ New ] ボタンをクリックする  \n\n![img](./img/new_1.png \"new_1\")  \n#### 2. プロジェクトデータ作成場所を選択する\n#### 3. プロジェクト名を入力し、[ OK ] ボタンをクリックする  \n\n![img](./img/new_2.png \"new_2\")  \n\n##### 新規作成後  \n\n![img](./img/new_3.png \"new_3\")  \n\n### 2. [ Import ]：既存プロジェクトデータの読み込み \n以下の手順で行います。\n1. [ Import ] ボタンをクリックする\n1. プロジェクトデータ作成場所を選択し、[ OK ] ボタンをクリックする  \n\n#### 1. [ Import ] ボタンをクリックする  \n\n![img](./img/import_1.png \"import_1\")  \n\n#### 1. プロジェクトデータ作成場所を選択し、[ OK ] ボタンをクリックする  \n\n読み込みたいプロジェクトのディレクトリ内にある「swf.prj.json」を選択します。  \n\n![img](./img/import_2.png \"import_2\")  　\n\n##### 新規作成後  \n\n![img](./img/import_3.png \"import_3\")  \n",
      "html": "<h1 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E7%B7%A8%E9%9B%86\">プロジェクトの作成と編集 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E7%B7%A8%E9%9B%86\">#</a></h1>\n<p>新規プロジェクトの作成や既存プロジェクトの編集はホーム画面で行います。<br>\nホーム画面の構成は以下のようになっています。</p>\n<p><img src=\"./img/home.png\" alt=\"img\" title=\"home\"></p>\n<ol>\n<li>ユーザ名：ログインユーザ名</li>\n<li>画面遷移ドロワー：ホスト登録画面、ログイン画面への遷移用</li>\n<li>New ボタン   ：新規プロジェクトの作成</li>\n<li>import ボタン：既存プロジェクトの読込</li>\n<li>プロジェクト一覧表示エリア　：WHEEL登録済みプロジェクトの表示エリア</li>\n<li>プロジェクト名表示エリア　　：プロジェクトの名称表示エリア</li>\n<li>プロジェクト説明文エリア　　：プロジェクトに関するコメント表示エリア</li>\n<li>プロジェクトパスエリア　　　：プロジェクトパスの表示アリア</li>\n<li>プロジェクト作成時間エリア　：プロジェクトの作成時間表示エリア</li>\n<li>プロジェクト更新時間エリア　：プロジェクトの更新時間表示エリア</li>\n<li>プロジェクトステータスエリア：プロジェクトのステータス表示エリア</li>\n</ol>\n<h2 id=\"1.-%E6%96%B0%E8%A6%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">1. 新規プロジェクトの作成 <a class=\"heading-anchor-permalink\" href=\"#1.-%E6%96%B0%E8%A6%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>プロジェクトの作成方法は、</p>\n<ol>\n<li>新規プロジェクトの作成</li>\n<li>既存プロジェクトデータの読み込み<br>\nの2つの方法から行うことができます。<br>\nそれぞれ、Newボタン、Importボタンから行います。</li>\n</ol>\n<h3 id=\"1.-%5B-new-%5D%EF%BC%9A%E6%96%B0%E8%A6%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">1. [ New ]：新規プロジェクトの作成 <a class=\"heading-anchor-permalink\" href=\"#1.-%5B-new-%5D%EF%BC%9A%E6%96%B0%E8%A6%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>以下の手順で行います。</p>\n<ol>\n<li>[ New ] ボタンをクリックする</li>\n<li>プロジェクトデータ作成場所を選択する</li>\n<li>プロジェクト名を入力し、[ OK ] ボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-%5B-new-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">1. [ New ] ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#1.-%5B-new-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p><img src=\"./img/new_1.png\" alt=\"img\" title=\"new_1\"></p>\n<h4 id=\"2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90%E5%A0%B4%E6%89%80%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B\">2. プロジェクトデータ作成場所を選択する <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90%E5%A0%B4%E6%89%80%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B\">#</a></h4>\n<h4 id=\"3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%97%E3%80%81%5B-ok-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">3. プロジェクト名を入力し、[ OK ] ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%97%E3%80%81%5B-ok-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p><img src=\"./img/new_2.png\" alt=\"img\" title=\"new_2\"></p>\n<h5 id=\"%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90%E5%BE%8C\">新規作成後 <a class=\"heading-anchor-permalink\" href=\"#%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90%E5%BE%8C\">#</a></h5>\n<p><img src=\"./img/new_3.png\" alt=\"img\" title=\"new_3\"></p>\n<h3 id=\"2.-%5B-import-%5D%EF%BC%9A%E6%97%A2%E5%AD%98%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">2. [ Import ]：既存プロジェクトデータの読み込み <a class=\"heading-anchor-permalink\" href=\"#2.-%5B-import-%5D%EF%BC%9A%E6%97%A2%E5%AD%98%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">#</a></h3>\n<p>以下の手順で行います。</p>\n<ol>\n<li>[ Import ] ボタンをクリックする</li>\n<li>プロジェクトデータ作成場所を選択し、[ OK ] ボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-%5B-import-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">1. [ Import ] ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#1.-%5B-import-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p><img src=\"./img/import_1.png\" alt=\"img\" title=\"import_1\"></p>\n<h4 id=\"1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90%E5%A0%B4%E6%89%80%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%80%81%5B-ok-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">1. プロジェクトデータ作成場所を選択し、[ OK ] ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90%E5%A0%B4%E6%89%80%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%80%81%5B-ok-%5D-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>読み込みたいプロジェクトのディレクトリ内にある「swf.prj.json」を選択します。</p>\n<p><img src=\"./img/import_2.png\" alt=\"img\" title=\"import_2\"></p>\n<h5 id=\"%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90%E5%BE%8C-2\">新規作成後 <a class=\"heading-anchor-permalink\" href=\"#%E6%96%B0%E8%A6%8F%E4%BD%9C%E6%88%90%E5%BE%8C-2\">#</a></h5>\n<p><img src=\"./img/import_3.png\" alt=\"img\" title=\"import_3\"></p>\n",
      "id": 2
    },
    {
      "path": "WHEEL_manual/1_home_screen/edit_project.md",
      "url": "WHEEL_manual/1_home_screen/edit_project.html",
      "content": "## 2. 既存プロジェクトの編集\n\n### プロジェクトのオープン\nプロジェクトを開く操作は、\n1. プロジェクトリスト上でダブルクリックする\n1. プロジェクトリスト上で [ 右クリック -> Open ] 操作する  \nの2種類です。後述するプロジェクトの名称変更、削除も[2]の右クリック操作から行うことができます。  \n右クリック操作によるプロジェクトのオープン方法を以下に示します。  \n\n##### プロジェクトのオープン [ 右クリック -> Open ]  \n\n![img](./img/open.png \"right_click_open\")  \n\n### プロジェクトの名称変更\n前述にあるように、プロジェクトの名称変更は右クリック操作により行うことができます。  \n手順は以下です。\n1. プロジェクトリスト上で [ 右クリック -> Rename ] 操作する \n1. 名称変更ダイアログに変更後の名称を入力し、[ OK ]ボタンをクリックする  \n**既にプロジェクトリストに存在するプロジェクト名には変更できません**のでご注意ください。  \n\n##### プロジェクトの名称変更 [ 右クリック -> Rename ]  \n\n![img](./img/rename_1.png \"rename\")  \n\n##### 名称変更ダイアログ  \n\n![img](./img/rename_2.png \"rename_dialog\")  \n\n##### 名称変更後  \n\n![img](./img/rename_3.png \"renamed\")  \n\nプロジェクト名を既存プロジェクト名に変更しようとした場合のエラー例を示します。  \n\n##### プロジェクト名を既存のプロジェクト名（Project2）の変更する  \n\n![img](./img/rename_error_1.png \"rename_error\") \n\n##### エラーメッセージが表示される  \n\n![img](./img/rename_error_2.png \"rename_error\") \n\n### プロジェクトの削除\nプロジェクトの名称変更同様、プロジェクトの削除も右クリック操作により行うことができます。  \n1. プロジェクトリスト上で [ 右クリック -> Delete ] 操作する \n1. 削除確認ダイアログの [ OK ] ボタンをクリックする  \n\n##### プロジェクトの削除 [ 右クリック -> Delete ]  \n\n![img](./img/delete_1.png \"delete\")  \n\n##### 削除確認ダイアログ  \n\n![img](./img/delete_2.png \"delete_dialog\")  \n\n##### 削除後  \n\n![img](./img/delete_3.png \"deleted\")  ",
      "html": "<h2 id=\"2.-%E6%97%A2%E5%AD%98%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%B7%A8%E9%9B%86\">2. 既存プロジェクトの編集 <a class=\"heading-anchor-permalink\" href=\"#2.-%E6%97%A2%E5%AD%98%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%B7%A8%E9%9B%86\">#</a></h2>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3\">プロジェクトのオープン <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3\">#</a></h3>\n<p>プロジェクトを開く操作は、</p>\n<ol>\n<li>プロジェクトリスト上でダブルクリックする</li>\n<li>プロジェクトリスト上で [ 右クリック -&gt; Open ] 操作する<br>\nの2種類です。後述するプロジェクトの名称変更、削除も[2]の右クリック操作から行うことができます。<br>\n右クリック操作によるプロジェクトのオープン方法を以下に示します。</li>\n</ol>\n<h5 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3-%5B-%E5%8F%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF--%3E-open-%5D\">プロジェクトのオープン [ 右クリック -&gt; Open ] <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3-%5B-%E5%8F%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF--%3E-open-%5D\">#</a></h5>\n<p><img src=\"./img/open.png\" alt=\"img\" title=\"right_click_open\"></p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4\">プロジェクトの名称変更 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4\">#</a></h3>\n<p>前述にあるように、プロジェクトの名称変更は右クリック操作により行うことができます。<br>\n手順は以下です。</p>\n<ol>\n<li>プロジェクトリスト上で [ 右クリック -&gt; Rename ] 操作する</li>\n<li>名称変更ダイアログに変更後の名称を入力し、[ OK ]ボタンをクリックする<br>\n<strong>既にプロジェクトリストに存在するプロジェクト名には変更できません</strong>のでご注意ください。</li>\n</ol>\n<h5 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4-%5B-%E5%8F%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF--%3E-rename-%5D\">プロジェクトの名称変更 [ 右クリック -&gt; Rename ] <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4-%5B-%E5%8F%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF--%3E-rename-%5D\">#</a></h5>\n<p><img src=\"./img/rename_1.png\" alt=\"img\" title=\"rename\"></p>\n<h5 id=\"%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4%E3%83%80%E3%82%A4%E3%82%A2%E3%83%AD%E3%82%B0\">名称変更ダイアログ <a class=\"heading-anchor-permalink\" href=\"#%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4%E3%83%80%E3%82%A4%E3%82%A2%E3%83%AD%E3%82%B0\">#</a></h5>\n<p><img src=\"./img/rename_2.png\" alt=\"img\" title=\"rename_dialog\"></p>\n<h5 id=\"%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4%E5%BE%8C\">名称変更後 <a class=\"heading-anchor-permalink\" href=\"#%E5%90%8D%E7%A7%B0%E5%A4%89%E6%9B%B4%E5%BE%8C\">#</a></h5>\n<p><img src=\"./img/rename_3.png\" alt=\"img\" title=\"renamed\"></p>\n<p>プロジェクト名を既存プロジェクト名に変更しようとした場合のエラー例を示します。</p>\n<h5 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%82%92%E6%97%A2%E5%AD%98%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%EF%BC%88project2%EF%BC%89%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">プロジェクト名を既存のプロジェクト名（Project2）の変更する <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%82%92%E6%97%A2%E5%AD%98%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%EF%BC%88project2%EF%BC%89%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">#</a></h5>\n<p><img src=\"./img/rename_error_1.png\" alt=\"img\" title=\"rename_error\"></p>\n<h5 id=\"%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B\">エラーメッセージが表示される <a class=\"heading-anchor-permalink\" href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B\">#</a></h5>\n<p><img src=\"./img/rename_error_2.png\" alt=\"img\" title=\"rename_error\"></p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4\">プロジェクトの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h3>\n<p>プロジェクトの名称変更同様、プロジェクトの削除も右クリック操作により行うことができます。</p>\n<ol>\n<li>プロジェクトリスト上で [ 右クリック -&gt; Delete ] 操作する</li>\n<li>削除確認ダイアログの [ OK ] ボタンをクリックする</li>\n</ol>\n<h5 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4-%5B-%E5%8F%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF--%3E-delete-%5D\">プロジェクトの削除 [ 右クリック -&gt; Delete ] <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4-%5B-%E5%8F%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF--%3E-delete-%5D\">#</a></h5>\n<p><img src=\"./img/delete_1.png\" alt=\"img\" title=\"delete\"></p>\n<h5 id=\"%E5%89%8A%E9%99%A4%E7%A2%BA%E8%AA%8D%E3%83%80%E3%82%A4%E3%82%A2%E3%83%AD%E3%82%B0\">削除確認ダイアログ <a class=\"heading-anchor-permalink\" href=\"#%E5%89%8A%E9%99%A4%E7%A2%BA%E8%AA%8D%E3%83%80%E3%82%A4%E3%82%A2%E3%83%AD%E3%82%B0\">#</a></h5>\n<p><img src=\"./img/delete_2.png\" alt=\"img\" title=\"delete_dialog\"></p>\n<h5 id=\"%E5%89%8A%E9%99%A4%E5%BE%8C\">削除後 <a class=\"heading-anchor-permalink\" href=\"#%E5%89%8A%E9%99%A4%E5%BE%8C\">#</a></h5>\n<p><img src=\"./img/delete_3.png\" alt=\"img\" title=\"deleted\"></p>\n",
      "id": 3
    },
    {
      "path": "WHEEL_manual/2_remotehost_screen/remotehost.md",
      "url": "WHEEL_manual/2_remotehost_screen/remotehost.html",
      "content": "# リモートホストの登録\nワークフロー内でWHEELサーバ外の計算環境（以下、リモートホスト）を用いる場合、対象とするリモートホストにSSH接続し処理を実行します。  \nWHEELでは、ワークフロー画面（Taskコンポーネント）にて使用するリモートホストの情報及びリモートホストに登録されているユーザ情報をリモートホスト登録画面にて設定します。  \n\n## リモートホスト登録画面への移動\nリモートホスト登録画面には、下記の2パターンの方法によって遷移します。\n\n* ホーム画面右上ドロワー内の[ Remotehost Editor ]\n* ワークフロー画面右上ドロワー内の[ Remotehost Editor ]  \n\n1. ホーム画面右上ドロワー  \n![img](./img/home_remotehost.png \"home_remotehost\")  \n\n1. ワークフロー画面右上ドロワー  \n![img](./img/workflow_remotehost.png \"workflow_remotehost\")  \n\n## リモートホスト登録画面\nリモートホスト登録画面の構成は以下のようになっています。  \n![img](./img/remotehost.png \"remotehost\")  \n\n1. タイトル　：ホーム画面遷移ボタン\n1. リモートホスト種別選択ボタン：入力画面の切替（HPC or Cloud）\n1. Host List エリア：登録済みリモートホストリスト\n    1. リモートホストリスト：登録済みリモートホスト情報\n    1. New ボタン：新規リモートホスト登録\n    1. Copyボタン：登録済みリモートホストの複製（登録済みリモートホスト情報の引用用）\n    1. Deleteボタン：登録済みリモートホストの削除\n1. Host Registration エリア：リモートホスト登録用情報入力エリア\n    1. リモートホスト情報入力エリア：新規リモートホスト情報、登録済みリモートホスト情報の編集エリア\n    1. Cancel ボタン：入力情報のリフレッシュ\n    1. Confirm ボタン：入力情報の登録\n\nまた、Host Registrationエリアの各プロパティは以下です。  \n\n### HPC\n\n![img](./img/hpc_remotehost.png \"hpc_remotehost\")  \n\n| プロパティ名 | プロパティ | 備考 |\n|----|----|----|\n| Label | リモートホスト識別ラベル | 重複不可 * |\n| Connection Check | リモートホスト接続確認ボタン | ー |\n| Host Name | リモートホストIPアドレス、または、リモートホスト名 | * ex .京プリポストクラウド:134.160.188.185/ds1.r-ccs.riken.jp|\n| Port | リモートホストポート番号 | SSH接続用（デフォルト値 22） |\n| User ID | リモートホスト登録済みユーザ名 | * |\n| Host Work Dir | リモートホストマシンでの作業ディレクトリ | * |\n| Auth Type | リモートホストマシンの認証手段 | ラジオボタンより選択 |\n| Auth Path | Auth Type -> Private Key 選択時のKeyFile保存先パス | ー |\n| JobScheduler | ジョブスケジューラ名 | app/config/jobSceduler.jsonに定義されているジョブスケジューラ名を設定する|\n| Max Job | ジョブ投入制限数 | 接続先リモートホストから同時に投入できる最大ジョブ数（デフォルト値 5）|\n| Queue | キュー名 | 接続先ホストからジョブを投入する時に使えるキュー、カンマ区切りで複数入力可（ex. A, B, C）|\n| connection renewal interval(min.) | ssh接続を再接続する間隔[分] |最初にSSH接続した時間から設定時間以上経過後にSSH接続を行う場合、一度切断し再接続する <br> （デフォルト値 0、再接続しない） |\n| connection renewal delay(sec.) | 切断後、再接続時までの待ち時間[秒] |（デフォルト値 0）|\n| status check interval(sec.) | ジョブ投入後のステータス確認を行う間隔[秒]|（デフォルト値 10）|\n| max status check error | ステータス確認に失敗した時に、ジョブ自体をfailedとするしきい値 |（デフォルト値 10）|\n\n*必須パラメータ\n\n### Cloud　　詳細は[Cloud(AWS)インスタンス利用方法](../../../doc/Cloud.md)を参考ください\n\n![img](./img/cloud_remotehost.png \"hpc_remotehost\")  \n\n| プロパティ名 | プロパティ | 備考 |\n|----|----|----|\n| Label | リモートホスト識別ラベル | 重複不可 * |\n| Cloud service provider | クラウドサービスプロバイダー名 | 現バージョン(ver1.2.3)では、「aws」のみ対応 * |\n| OS | OS名 | 現バージョン(ver1.2.3)では、「ubuntu16」のみ対応 * |\n| region | インスタンスを起動するリージョン | *  ex. ap-northeast-1 |\n| numNodes | 起動するノード数 | * |\n| InstanceType | 起動するインスタンスタイプ | * ex. t2.micro |\n| rootVolume | rootのEBSボリューム | 起動するインスタンスにアタッチされるrootのEBSボリュームのサイズ（デフォルト値 8 [GB]） |\n| shareStorage | 共有ストレージの利用設定 |（デフォルト値 利用する）|\n| mpi | MPI | ー |\n| compiler | コンパイラ | ー |\n| playbook | 起動時に実行されるplaybook | ー |\n| additionalParams | aws-sdkのEC2.runInstancesに渡すことのできる設定値 | access keyおよび secret access key等を設定可能 |\n| additionalParamsForHead | additionalParamsのうちヘッドノードのみに適用する値 | ー |\n| JobScheduler | WHEELに登録されているジョブスケジューラ名 | app/config/jobSceduler.jsonに定義されているジョブスケジューラ名を設定する <br> ただし、インスタンスにジョブスケジューラがインストールされている必要がある。<br> ジョブスケジューラ「PBSPro」を設定した場合、WHEELが起動するクラスタにPBSProをインストールする|\n| Max Job | ジョブ投入制限数 | 接続先リモートホストから同時に投入できる最大ジョブ数（デフォルト値 5）|\n| Queue | Queue名 | 接続先ホストからジョブを投入する時に使えるキュー、カンマ区切りで複数入力可（ex. A, B, C）|\n| connection renewal interval(min.) | ssh接続を再接続する間隔[分] |最初にSSH接続した時間から設定時間以上経過後にSSH接続を行う場合、一度切断し再接続する（デフォルト値 0、再接続しない） |\n| connection renewal delay(sec.) | 切断後、再接続時までの待ち時間[秒] |（デフォルト値 0）|\n| status check interval(sec.) | ジョブ投入後のステータス確認を行う間隔[秒]|（デフォルト値 10）|\n| max status check error | ステータス確認に失敗した時に、ジョブ自体をfailedとするしきい値 |（デフォルト値 10）|\n\n*必須パラメータ\n\n### JobSchedulerへの設定方法\n\nワークフローをリモートホスト上で処理する場合、Taskコンポーネントにリモートホストの設定を行います。（Taskコンポーネントに関する詳細は後述）  \nTaskコンポーネントは、child_process又はsshを用いて指定されたスクリプトを直接実行する以外に、ジョブスケジューラにジョブとして投入することが可能です。  \n本機能に関する設定は次の5つがあります。  \n1. Taskコンポーネントの[ useJobScheduler ]プロパティを有効にしている場合、Taskはジョブスケジューラ経由で実行されます。  \n1. Taskコンポーネントの[ queue ]プロパティには、投入先のキュー名を指定することができます。  \nnull(デフォルト値)が指定されていた場合は、ジョブスケジューラ側で指定されているデフォルトキューに対してジョブが投入されます。\n1. ホスト登録画面[ JobScheduler ]には、当該ホストから投入可能なジョブスケジューラの名称を設定します。 \n1. ホスト登録画面[ Max Job ]には、本プロパティに設定された値以下の投入本数を上限として、WHEELからのジョブ投入を抑制します。\n1. ホスト登録画面[ Queue ]で登録したQueue情報は、Taskコンポーネントの[ queue ]プロパティでセレクトボックスとして表示されます。  \n\nジョブスケジューラの定義は\"app/config/jobSceduler.json\"にて行います。 スケジューラの名称をkeyとし、以下の各keyを持つテーブルを値として各ジョブスケジューラを設定します。\n\n| key | value |\n|----|----|\n| submit | ジョブ投入に用いるコマンド名 |\n| queueOpt | 投入先キューを指定するためのsubmitコマンドのオプション |\n| stat | ジョブの状態表示に用いるコマンド名 |\n| del | ジョブの削除に用いるコマンド名 |\n| reJobID | submitコマンドの出力からジョブIDを抽出するための正規表現 |\n| reFinishdState | statコマンドの出力を正常終了と判定するための正規表現 |\n| reFailedState | statコマンドの出力を異常終了と判定するための正規表現 |\n\nreJobIDは1つ以上のキャプチャを含む正規表現でなければなりません。また、1つ目のキャプチャ文字列がjobIDを示す文字列として扱われます。  \nreFinishedStateとreFailedStateは、前者が先に評価され前者がマッチした場合は後者の判定は行なわずに正常終了と判定します。また、両者にマッチしない場合はジョブは実行待ちもしくは実行中と判定します。  \n※いずれの正規表現もプログラム内でコンパイルして利用するため、正規表現リテラル(//)は使うことができません。  \n\n> 富士通 ParallelNaviでの設定は次のようになります。  \n```\n{  \n　\"ParallelNavi\": {  \n    \"submit\": \"pjsub -X\",\n    \"queueOpt\": \"-L rscgrp=\",\n    \"stat\": \"pjstat -v -H day=3 --choose st,ec\",\n    \"del\": \"pjdel\",\n    \"reJobID\": \"pjsub Job (\\\\d+) submitted.\",\n    \"reFinishedState\": \"^ST *EC *\\\\ nEXT *0\",\n    \"reReturnCode\": \"^ST *EC *\\\\nEXT *(\\\\d+)\",\n    \"reFailedState\": \"^ST *EC *\\\\n(CCL|ERR|EXT|RJT)\",\n    \"reJobStatus\": \"^ST *EC *\\\\n(\\\\S+)\"\n　}  \n}  \n```\n\n## ホストの登録\n\nホストの登録方法は、2パターンあります。\n\n1. 新規に登録する\n1. 既存のホスト情報を引用し、登録する  \n\nまずは、「1. 新規に登録する」方法を説明します。  \n\n### 1. 新規に登録する  \n\n手順は以下になります。\n\n1. Host List エリア「New」ボタンをクリックする\n1. Host Registration エリアの必要項目を入力する\n1. Host Registration エリア「Confirm」ボタンをクリックする  \n\n#### 1. Host List エリア「New」ボタンをクリックする\n\nHost Registrationがクリアされます。ただし、Port, Max Job, connection renewal interval(min.), connection renewal delay(sec.), status check interval(sec.), max status check errorにはデフォルト値が入ります。\n\n![img](./img/remotehost_new.png \"remotehost_new\")  \n\n#### 2. Host Registration エリアの必要項目を入力する  \n\n必要項目を入力します。Label（重複不可）, Host Name, User Name, User ID, Host Work Dirは、入力必須項目です。 \n\n![img](./img/remotehost_info.png \"remotehost_info\")  \n\n#### 3. Host Registration エリア「Confirm」ボタンをクリックする  \n\n入力内容をホスト情報として登録します。Host List エリアにホスト情報が追加されます。  \n\n![img](./img/remotehost_confirm.png \"remotehost_confirm\")  \n\n\n### 2. 既存のホスト情報を引用し、登録する  \n\n続いて、「2. 既存のホスト情報を引用し、登録する」方法を説明します。  \n\n手順は以下になります。\n\n1. Host List エリアに表示されている登録済みホストをクリックする\n1. Host List エリア「Copy」ボタンをクリックする\n1. 複製したホストを選択し、Host Registration エリアのLabel（必須）及びその他項目を編集する\n1. Host Registration エリア「Confirm」ボタンをクリックする\n\n#### 1. Host List エリアに表示されている登録済みホストをクリックする\n\n登録済みホストを選択します。選択したホスト情報は、Host Registration エリアに反映されます。  \n\n![img](./img/remotehost_select.png \"remotehost_select\")  \n\n#### 2. Host List エリア「Copy」ボタンをクリックする\n\nCopyボタンをクリックします。Host Listに選択したホスト情報が複製されます。  \nLabelも複製されるため、Label重複の警告メッセージが表示されます。\n\n![img](./img/remotehost_copy.png \"remotehost_copy\")  \n\n#### 3. 複製したホストを選択し、Host Registration エリアのLabel（必須）及びその他項目を編集する\n\nLabel及びその他項目を編集し、Label重複警告メッセージが解除されたことを確認します。  \n\n![img](./img/remotehost_copy_edit.png \"remotehost_copy_edit\")  \n\n#### 4. Host Registration エリア「Confirm」ボタンをクリックする  \n\n「Confirm」ボタンをクリックします。  \n\n![img](./img/remotehost_copy_confirm.png \"remotehost_copy_confirm\")  \n\n## ホストの編集\n\nホストの編集の手順は以下になります。\n\n1. Host List エリアに表示されている編集したいホストをクリックする\n1. Host Registration エリアにてホスト情報を編集する\n1. Host Registration エリア「Confirm」ボタンをクリックする  \n\n#### 1. Host List エリアに表示されている編集したいホストをクリックする\n\nHost Registration エリアに選択したホストの登録情報が表示されます。\n\n![img](./img/remotehost_edit.png \"host_edit\")  \n\n#### 2. Host Registration エリアにてホスト情報を編集する\n\n項目を編集します。\n\n![img](./img/remotehost_edit_info.png \"host_edit_info\")  \n\n#### 3. Host Registration エリア「Confirm」ボタンをクリックする  \n\nホスト情報を更新します。\n\n![img](./img/remotehost_edit_confirm.png \"host_edit_confirm\")  \n\n\n## ホストの削除\n\nホストの削除は、以下の手順で行います。\n\n1. Host List エリアに表示されている削除したいホストをクリックする\n1. Host List エリア「Delete」ボタンをクリックする\n1. 表示される「削除確認メッセージダイアログボックス」の「OK」ボタンをクリックする。  \n\n![img](./img/remotehost_delete.png \"remotehost_delete\")  \n\n削除されていることを確認します。  \n\n![img](./img/remotehost_delete_result.png \"remotehost_delete_result\")  \n\n\n## ホストの接続確認\n\n登録したホストが有効であるが確認するためにホストの接続確認（Connection Check）を行います。  \nConnection Checkは、「Test」ボタンをクリックすることで行います。  \n\nConnection Checkの手順は以下になります。\n\n1. Connection Checkしたいホストを選択する\n1. Connection Check「Test」ボタンをクリックする\n1. 表示される「パスワード入力ダイアログボックス」にパスワードを入力し、「OK」を押下する\n1. 「Test」ボタンの表示がOKまたはNGになることを確認する\n\n#### 1. Connection Check\n\n![img](./img/remotehost_connectioncheck.png \"remotehost_connectioncheck\")  \n\n#### 4. 「Test」ボタンの表示が OK または NG になることを確認する\n\nHost Name, User ID, Port, AuthPath 及び入力したパスワードが適切な場合は「OK」、不適切な場合は「NG」となります。  \n\n・適切な場合  \n「Test」ボタンがOKとなります。\n\n![img](./img/remotehost_connectioncheck_OK.png \"remotehost_connectioncheck_OK\")  \n\n・不適切な場合  \n「Test」ボタンがNGとなり、エラーメッセージが表示されます。  \n\n![img](./img/remotehost_connectioncheck_NG.png \"remotehost_connectioncheck_NG\")  \n",
      "html": "<h1 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">リモートホストの登録 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">#</a></h1>\n<p>ワークフロー内でWHEELサーバ外の計算環境（以下、リモートホスト）を用いる場合、対象とするリモートホストにSSH接続し処理を実行します。<br>\nWHEELでは、ワークフロー画面（Taskコンポーネント）にて使用するリモートホストの情報及びリモートホストに登録されているユーザ情報をリモートホスト登録画面にて設定します。</p>\n<h2 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2%E3%81%B8%E3%81%AE%E7%A7%BB%E5%8B%95\">リモートホスト登録画面への移動 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2%E3%81%B8%E3%81%AE%E7%A7%BB%E5%8B%95\">#</a></h2>\n<p>リモートホスト登録画面には、下記の2パターンの方法によって遷移します。</p>\n<ul>\n<li>ホーム画面右上ドロワー内の[ Remotehost Editor ]</li>\n<li>ワークフロー画面右上ドロワー内の[ Remotehost Editor ]</li>\n</ul>\n<ol>\n<li>\n<p>ホーム画面右上ドロワー<br>\n<img src=\"./img/home_remotehost.png\" alt=\"img\" title=\"home_remotehost\"></p>\n</li>\n<li>\n<p>ワークフロー画面右上ドロワー<br>\n<img src=\"./img/workflow_remotehost.png\" alt=\"img\" title=\"workflow_remotehost\"></p>\n</li>\n</ol>\n<h2 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2\">リモートホスト登録画面 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2\">#</a></h2>\n<p>リモートホスト登録画面の構成は以下のようになっています。<br>\n<img src=\"./img/remotehost.png\" alt=\"img\" title=\"remotehost\"></p>\n<ol>\n<li>タイトル　：ホーム画面遷移ボタン</li>\n<li>リモートホスト種別選択ボタン：入力画面の切替（HPC or Cloud）</li>\n<li>Host List エリア：登録済みリモートホストリスト\n<ol>\n<li>リモートホストリスト：登録済みリモートホスト情報</li>\n<li>New ボタン：新規リモートホスト登録</li>\n<li>Copyボタン：登録済みリモートホストの複製（登録済みリモートホスト情報の引用用）</li>\n<li>Deleteボタン：登録済みリモートホストの削除</li>\n</ol>\n</li>\n<li>Host Registration エリア：リモートホスト登録用情報入力エリア\n<ol>\n<li>リモートホスト情報入力エリア：新規リモートホスト情報、登録済みリモートホスト情報の編集エリア</li>\n<li>Cancel ボタン：入力情報のリフレッシュ</li>\n<li>Confirm ボタン：入力情報の登録</li>\n</ol>\n</li>\n</ol>\n<p>また、Host Registrationエリアの各プロパティは以下です。</p>\n<h3 id=\"hpc\">HPC <a class=\"heading-anchor-permalink\" href=\"#hpc\">#</a></h3>\n<p><img src=\"./img/hpc_remotehost.png\" alt=\"img\" title=\"hpc_remotehost\"></p>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>プロパティ</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Label</td>\n<td>リモートホスト識別ラベル</td>\n<td>重複不可 *</td>\n</tr>\n<tr>\n<td>Connection Check</td>\n<td>リモートホスト接続確認ボタン</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>Host Name</td>\n<td>リモートホストIPアドレス、または、リモートホスト名</td>\n<td>* ex .京プリポストクラウド:134.160.188.185/ds1.r-ccs.riken.jp</td>\n</tr>\n<tr>\n<td>Port</td>\n<td>リモートホストポート番号</td>\n<td>SSH接続用（デフォルト値 22）</td>\n</tr>\n<tr>\n<td>User ID</td>\n<td>リモートホスト登録済みユーザ名</td>\n<td>*</td>\n</tr>\n<tr>\n<td>Host Work Dir</td>\n<td>リモートホストマシンでの作業ディレクトリ</td>\n<td>*</td>\n</tr>\n<tr>\n<td>Auth Type</td>\n<td>リモートホストマシンの認証手段</td>\n<td>ラジオボタンより選択</td>\n</tr>\n<tr>\n<td>Auth Path</td>\n<td>Auth Type -&gt; Private Key 選択時のKeyFile保存先パス</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>JobScheduler</td>\n<td>ジョブスケジューラ名</td>\n<td>app/config/jobSceduler.jsonに定義されているジョブスケジューラ名を設定する</td>\n</tr>\n<tr>\n<td>Max Job</td>\n<td>ジョブ投入制限数</td>\n<td>接続先リモートホストから同時に投入できる最大ジョブ数（デフォルト値 5）</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>キュー名</td>\n<td>接続先ホストからジョブを投入する時に使えるキュー、カンマ区切りで複数入力可（ex. A, B, C）</td>\n</tr>\n<tr>\n<td>connection renewal interval(min.)</td>\n<td>ssh接続を再接続する間隔[分]</td>\n<td>最初にSSH接続した時間から設定時間以上経過後にSSH接続を行う場合、一度切断し再接続する <br> （デフォルト値 0、再接続しない）</td>\n</tr>\n<tr>\n<td>connection renewal delay(sec.)</td>\n<td>切断後、再接続時までの待ち時間[秒]</td>\n<td>（デフォルト値 0）</td>\n</tr>\n<tr>\n<td>status check interval(sec.)</td>\n<td>ジョブ投入後のステータス確認を行う間隔[秒]</td>\n<td>（デフォルト値 10）</td>\n</tr>\n<tr>\n<td>max status check error</td>\n<td>ステータス確認に失敗した時に、ジョブ自体をfailedとするしきい値</td>\n<td>（デフォルト値 10）</td>\n</tr>\n</tbody>\n</table>\n<p>*必須パラメータ</p>\n<h3 id=\"cloud-%E8%A9%B3%E7%B4%B0%E3%81%AFcloud(aws)%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E3%82%92%E5%8F%82%E8%80%83%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84\">Cloud　　詳細は<a href=\"../../../doc/Cloud.html\">Cloud(AWS)インスタンス利用方法</a>を参考ください <a class=\"heading-anchor-permalink\" href=\"#cloud-%E8%A9%B3%E7%B4%B0%E3%81%AFcloud(aws)%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95%E3%82%92%E5%8F%82%E8%80%83%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84\">#</a></h3>\n<p><img src=\"./img/cloud_remotehost.png\" alt=\"img\" title=\"hpc_remotehost\"></p>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>プロパティ</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Label</td>\n<td>リモートホスト識別ラベル</td>\n<td>重複不可 *</td>\n</tr>\n<tr>\n<td>Cloud service provider</td>\n<td>クラウドサービスプロバイダー名</td>\n<td>現バージョン(ver1.2.3)では、「aws」のみ対応 *</td>\n</tr>\n<tr>\n<td>OS</td>\n<td>OS名</td>\n<td>現バージョン(ver1.2.3)では、「ubuntu16」のみ対応 *</td>\n</tr>\n<tr>\n<td>region</td>\n<td>インスタンスを起動するリージョン</td>\n<td>*  ex. ap-northeast-1</td>\n</tr>\n<tr>\n<td>numNodes</td>\n<td>起動するノード数</td>\n<td>*</td>\n</tr>\n<tr>\n<td>InstanceType</td>\n<td>起動するインスタンスタイプ</td>\n<td>* ex. t2.micro</td>\n</tr>\n<tr>\n<td>rootVolume</td>\n<td>rootのEBSボリューム</td>\n<td>起動するインスタンスにアタッチされるrootのEBSボリュームのサイズ（デフォルト値 8 [GB]）</td>\n</tr>\n<tr>\n<td>shareStorage</td>\n<td>共有ストレージの利用設定</td>\n<td>（デフォルト値 利用する）</td>\n</tr>\n<tr>\n<td>mpi</td>\n<td>MPI</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>compiler</td>\n<td>コンパイラ</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>playbook</td>\n<td>起動時に実行されるplaybook</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>additionalParams</td>\n<td>aws-sdkのEC2.runInstancesに渡すことのできる設定値</td>\n<td>access keyおよび secret access key等を設定可能</td>\n</tr>\n<tr>\n<td>additionalParamsForHead</td>\n<td>additionalParamsのうちヘッドノードのみに適用する値</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>JobScheduler</td>\n<td>WHEELに登録されているジョブスケジューラ名</td>\n<td>app/config/jobSceduler.jsonに定義されているジョブスケジューラ名を設定する <br> ただし、インスタンスにジョブスケジューラがインストールされている必要がある。<br> ジョブスケジューラ「PBSPro」を設定した場合、WHEELが起動するクラスタにPBSProをインストールする</td>\n</tr>\n<tr>\n<td>Max Job</td>\n<td>ジョブ投入制限数</td>\n<td>接続先リモートホストから同時に投入できる最大ジョブ数（デフォルト値 5）</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>Queue名</td>\n<td>接続先ホストからジョブを投入する時に使えるキュー、カンマ区切りで複数入力可（ex. A, B, C）</td>\n</tr>\n<tr>\n<td>connection renewal interval(min.)</td>\n<td>ssh接続を再接続する間隔[分]</td>\n<td>最初にSSH接続した時間から設定時間以上経過後にSSH接続を行う場合、一度切断し再接続する（デフォルト値 0、再接続しない）</td>\n</tr>\n<tr>\n<td>connection renewal delay(sec.)</td>\n<td>切断後、再接続時までの待ち時間[秒]</td>\n<td>（デフォルト値 0）</td>\n</tr>\n<tr>\n<td>status check interval(sec.)</td>\n<td>ジョブ投入後のステータス確認を行う間隔[秒]</td>\n<td>（デフォルト値 10）</td>\n</tr>\n<tr>\n<td>max status check error</td>\n<td>ステータス確認に失敗した時に、ジョブ自体をfailedとするしきい値</td>\n<td>（デフォルト値 10）</td>\n</tr>\n</tbody>\n</table>\n<p>*必須パラメータ</p>\n<h3 id=\"jobscheduler%E3%81%B8%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95\">JobSchedulerへの設定方法 <a class=\"heading-anchor-permalink\" href=\"#jobscheduler%E3%81%B8%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95\">#</a></h3>\n<p>ワークフローをリモートホスト上で処理する場合、Taskコンポーネントにリモートホストの設定を行います。（Taskコンポーネントに関する詳細は後述）<br>\nTaskコンポーネントは、child_process又はsshを用いて指定されたスクリプトを直接実行する以外に、ジョブスケジューラにジョブとして投入することが可能です。<br>\n本機能に関する設定は次の5つがあります。</p>\n<ol>\n<li>Taskコンポーネントの[ useJobScheduler ]プロパティを有効にしている場合、Taskはジョブスケジューラ経由で実行されます。</li>\n<li>Taskコンポーネントの[ queue ]プロパティには、投入先のキュー名を指定することができます。<br>\nnull(デフォルト値)が指定されていた場合は、ジョブスケジューラ側で指定されているデフォルトキューに対してジョブが投入されます。</li>\n<li>ホスト登録画面[ JobScheduler ]には、当該ホストから投入可能なジョブスケジューラの名称を設定します。</li>\n<li>ホスト登録画面[ Max Job ]には、本プロパティに設定された値以下の投入本数を上限として、WHEELからのジョブ投入を抑制します。</li>\n<li>ホスト登録画面[ Queue ]で登録したQueue情報は、Taskコンポーネントの[ queue ]プロパティでセレクトボックスとして表示されます。</li>\n</ol>\n<p>ジョブスケジューラの定義は&quot;app/config/jobSceduler.json&quot;にて行います。 スケジューラの名称をkeyとし、以下の各keyを持つテーブルを値として各ジョブスケジューラを設定します。</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>submit</td>\n<td>ジョブ投入に用いるコマンド名</td>\n</tr>\n<tr>\n<td>queueOpt</td>\n<td>投入先キューを指定するためのsubmitコマンドのオプション</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>ジョブの状態表示に用いるコマンド名</td>\n</tr>\n<tr>\n<td>del</td>\n<td>ジョブの削除に用いるコマンド名</td>\n</tr>\n<tr>\n<td>reJobID</td>\n<td>submitコマンドの出力からジョブIDを抽出するための正規表現</td>\n</tr>\n<tr>\n<td>reFinishdState</td>\n<td>statコマンドの出力を正常終了と判定するための正規表現</td>\n</tr>\n<tr>\n<td>reFailedState</td>\n<td>statコマンドの出力を異常終了と判定するための正規表現</td>\n</tr>\n</tbody>\n</table>\n<p>reJobIDは1つ以上のキャプチャを含む正規表現でなければなりません。また、1つ目のキャプチャ文字列がjobIDを示す文字列として扱われます。<br>\nreFinishedStateとreFailedStateは、前者が先に評価され前者がマッチした場合は後者の判定は行なわずに正常終了と判定します。また、両者にマッチしない場合はジョブは実行待ちもしくは実行中と判定します。<br>\n※いずれの正規表現もプログラム内でコンパイルして利用するため、正規表現リテラル(//)は使うことができません。</p>\n<blockquote>\n<p>富士通 ParallelNaviでの設定は次のようになります。</p>\n</blockquote>\n<pre><code>{  \n　&quot;ParallelNavi&quot;: {  \n    &quot;submit&quot;: &quot;pjsub -X&quot;,\n    &quot;queueOpt&quot;: &quot;-L rscgrp=&quot;,\n    &quot;stat&quot;: &quot;pjstat -v -H day=3 --choose st,ec&quot;,\n    &quot;del&quot;: &quot;pjdel&quot;,\n    &quot;reJobID&quot;: &quot;pjsub Job (\\\\d+) submitted.&quot;,\n    &quot;reFinishedState&quot;: &quot;^ST *EC *\\\\ nEXT *0&quot;,\n    &quot;reReturnCode&quot;: &quot;^ST *EC *\\\\nEXT *(\\\\d+)&quot;,\n    &quot;reFailedState&quot;: &quot;^ST *EC *\\\\n(CCL|ERR|EXT|RJT)&quot;,\n    &quot;reJobStatus&quot;: &quot;^ST *EC *\\\\n(\\\\S+)&quot;\n　}  \n}  \n</code></pre>\n<h2 id=\"%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">ホストの登録 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">#</a></h2>\n<p>ホストの登録方法は、2パターンあります。</p>\n<ol>\n<li>新規に登録する</li>\n<li>既存のホスト情報を引用し、登録する</li>\n</ol>\n<p>まずは、「1. 新規に登録する」方法を説明します。</p>\n<h3 id=\"1.-%E6%96%B0%E8%A6%8F%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">1. 新規に登録する <a class=\"heading-anchor-permalink\" href=\"#1.-%E6%96%B0%E8%A6%8F%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h3>\n<p>手順は以下になります。</p>\n<ol>\n<li>Host List エリア「New」ボタンをクリックする</li>\n<li>Host Registration エリアの必要項目を入力する</li>\n<li>Host Registration エリア「Confirm」ボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cnew%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">1. Host List エリア「New」ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#1.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cnew%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>Host Registrationがクリアされます。ただし、Port, Max Job, connection renewal interval(min.), connection renewal delay(sec.), status check interval(sec.), max status check errorにはデフォルト値が入ります。</p>\n<p><img src=\"./img/remotehost_new.png\" alt=\"img\" title=\"remotehost_new\"></p>\n<h4 id=\"2.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AE%E5%BF%85%E8%A6%81%E9%A0%85%E7%9B%AE%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B\">2. Host Registration エリアの必要項目を入力する <a class=\"heading-anchor-permalink\" href=\"#2.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AE%E5%BF%85%E8%A6%81%E9%A0%85%E7%9B%AE%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B\">#</a></h4>\n<p>必要項目を入力します。Label（重複不可）, Host Name, User Name, User ID, Host Work Dirは、入力必須項目です。</p>\n<p><img src=\"./img/remotehost_info.png\" alt=\"img\" title=\"remotehost_info\"></p>\n<h4 id=\"3.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cconfirm%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">3. Host Registration エリア「Confirm」ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#3.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cconfirm%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>入力内容をホスト情報として登録します。Host List エリアにホスト情報が追加されます。</p>\n<p><img src=\"./img/remotehost_confirm.png\" alt=\"img\" title=\"remotehost_confirm\"></p>\n<h3 id=\"2.-%E6%97%A2%E5%AD%98%E3%81%AE%E3%83%9B%E3%82%B9%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92%E5%BC%95%E7%94%A8%E3%81%97%E3%80%81%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">2. 既存のホスト情報を引用し、登録する <a class=\"heading-anchor-permalink\" href=\"#2.-%E6%97%A2%E5%AD%98%E3%81%AE%E3%83%9B%E3%82%B9%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92%E5%BC%95%E7%94%A8%E3%81%97%E3%80%81%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h3>\n<p>続いて、「2. 既存のホスト情報を引用し、登録する」方法を説明します。</p>\n<p>手順は以下になります。</p>\n<ol>\n<li>Host List エリアに表示されている登録済みホストをクリックする</li>\n<li>Host List エリア「Copy」ボタンをクリックする</li>\n<li>複製したホストを選択し、Host Registration エリアのLabel（必須）及びその他項目を編集する</li>\n<li>Host Registration エリア「Confirm」ボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E7%99%BB%E9%8C%B2%E6%B8%88%E3%81%BF%E3%83%9B%E3%82%B9%E3%83%88%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">1. Host List エリアに表示されている登録済みホストをクリックする <a class=\"heading-anchor-permalink\" href=\"#1.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E7%99%BB%E9%8C%B2%E6%B8%88%E3%81%BF%E3%83%9B%E3%82%B9%E3%83%88%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>登録済みホストを選択します。選択したホスト情報は、Host Registration エリアに反映されます。</p>\n<p><img src=\"./img/remotehost_select.png\" alt=\"img\" title=\"remotehost_select\"></p>\n<h4 id=\"2.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Ccopy%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">2. Host List エリア「Copy」ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#2.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Ccopy%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>Copyボタンをクリックします。Host Listに選択したホスト情報が複製されます。<br>\nLabelも複製されるため、Label重複の警告メッセージが表示されます。</p>\n<p><img src=\"./img/remotehost_copy.png\" alt=\"img\" title=\"remotehost_copy\"></p>\n<h4 id=\"3.-%E8%A4%87%E8%A3%BD%E3%81%97%E3%81%9F%E3%83%9B%E3%82%B9%E3%83%88%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%80%81host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AElabel%EF%BC%88%E5%BF%85%E9%A0%88%EF%BC%89%E5%8F%8A%E3%81%B3%E3%81%9D%E3%81%AE%E4%BB%96%E9%A0%85%E7%9B%AE%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B\">3. 複製したホストを選択し、Host Registration エリアのLabel（必須）及びその他項目を編集する <a class=\"heading-anchor-permalink\" href=\"#3.-%E8%A4%87%E8%A3%BD%E3%81%97%E3%81%9F%E3%83%9B%E3%82%B9%E3%83%88%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%80%81host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AElabel%EF%BC%88%E5%BF%85%E9%A0%88%EF%BC%89%E5%8F%8A%E3%81%B3%E3%81%9D%E3%81%AE%E4%BB%96%E9%A0%85%E7%9B%AE%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B\">#</a></h4>\n<p>Label及びその他項目を編集し、Label重複警告メッセージが解除されたことを確認します。</p>\n<p><img src=\"./img/remotehost_copy_edit.png\" alt=\"img\" title=\"remotehost_copy_edit\"></p>\n<h4 id=\"4.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cconfirm%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">4. Host Registration エリア「Confirm」ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#4.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cconfirm%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>「Confirm」ボタンをクリックします。</p>\n<p><img src=\"./img/remotehost_copy_confirm.png\" alt=\"img\" title=\"remotehost_copy_confirm\"></p>\n<h2 id=\"%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E7%B7%A8%E9%9B%86\">ホストの編集 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E7%B7%A8%E9%9B%86\">#</a></h2>\n<p>ホストの編集の手順は以下になります。</p>\n<ol>\n<li>Host List エリアに表示されている編集したいホストをクリックする</li>\n<li>Host Registration エリアにてホスト情報を編集する</li>\n<li>Host Registration エリア「Confirm」ボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E7%B7%A8%E9%9B%86%E3%81%97%E3%81%9F%E3%81%84%E3%83%9B%E3%82%B9%E3%83%88%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">1. Host List エリアに表示されている編集したいホストをクリックする <a class=\"heading-anchor-permalink\" href=\"#1.-host-list-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AB%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E7%B7%A8%E9%9B%86%E3%81%97%E3%81%9F%E3%81%84%E3%83%9B%E3%82%B9%E3%83%88%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>Host Registration エリアに選択したホストの登録情報が表示されます。</p>\n<p><img src=\"./img/remotehost_edit.png\" alt=\"img\" title=\"host_edit\"></p>\n<h4 id=\"2.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AB%E3%81%A6%E3%83%9B%E3%82%B9%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B\">2. Host Registration エリアにてホスト情報を編集する <a class=\"heading-anchor-permalink\" href=\"#2.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%81%AB%E3%81%A6%E3%83%9B%E3%82%B9%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B\">#</a></h4>\n<p>項目を編集します。</p>\n<p><img src=\"./img/remotehost_edit_info.png\" alt=\"img\" title=\"host_edit_info\"></p>\n<h4 id=\"3.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cconfirm%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B-2\">3. Host Registration エリア「Confirm」ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#3.-host-registration-%E3%82%A8%E3%83%AA%E3%82%A2%E3%80%8Cconfirm%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B-2\">#</a></h4>\n<p>ホスト情報を更新します。</p>\n<p><img src=\"./img/remotehost_edit_confirm.png\" alt=\"img\" title=\"host_edit_confirm\"></p>\n<h2 id=\"%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4\">ホストの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p>ホストの削除は、以下の手順で行います。</p>\n<ol>\n<li>Host List エリアに表示されている削除したいホストをクリックする</li>\n<li>Host List エリア「Delete」ボタンをクリックする</li>\n<li>表示される「削除確認メッセージダイアログボックス」の「OK」ボタンをクリックする。</li>\n</ol>\n<p><img src=\"./img/remotehost_delete.png\" alt=\"img\" title=\"remotehost_delete\"></p>\n<p>削除されていることを確認します。</p>\n<p><img src=\"./img/remotehost_delete_result.png\" alt=\"img\" title=\"remotehost_delete_result\"></p>\n<h2 id=\"%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E6%8E%A5%E7%B6%9A%E7%A2%BA%E8%AA%8D\">ホストの接続確認 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E6%8E%A5%E7%B6%9A%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>登録したホストが有効であるが確認するためにホストの接続確認（Connection Check）を行います。<br>\nConnection Checkは、「Test」ボタンをクリックすることで行います。</p>\n<p>Connection Checkの手順は以下になります。</p>\n<ol>\n<li>Connection Checkしたいホストを選択する</li>\n<li>Connection Check「Test」ボタンをクリックする</li>\n<li>表示される「パスワード入力ダイアログボックス」にパスワードを入力し、「OK」を押下する</li>\n<li>「Test」ボタンの表示がOKまたはNGになることを確認する</li>\n</ol>\n<h4 id=\"1.-connection-check\">1. Connection Check <a class=\"heading-anchor-permalink\" href=\"#1.-connection-check\">#</a></h4>\n<p><img src=\"./img/remotehost_connectioncheck.png\" alt=\"img\" title=\"remotehost_connectioncheck\"></p>\n<h4 id=\"4.-%E3%80%8Ctest%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%8C-ok-%E3%81%BE%E3%81%9F%E3%81%AF-ng-%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">4. 「Test」ボタンの表示が OK または NG になることを確認する <a class=\"heading-anchor-permalink\" href=\"#4.-%E3%80%8Ctest%E3%80%8D%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%8C-ok-%E3%81%BE%E3%81%9F%E3%81%AF-ng-%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">#</a></h4>\n<p>Host Name, User ID, Port, AuthPath 及び入力したパスワードが適切な場合は「OK」、不適切な場合は「NG」となります。</p>\n<p>・適切な場合<br>\n「Test」ボタンがOKとなります。</p>\n<p><img src=\"./img/remotehost_connectioncheck_OK.png\" alt=\"img\" title=\"remotehost_connectioncheck_OK\"></p>\n<p>・不適切な場合<br>\n「Test」ボタンがNGとなり、エラーメッセージが表示されます。</p>\n<p><img src=\"./img/remotehost_connectioncheck_NG.png\" alt=\"img\" title=\"remotehost_connectioncheck_NG\"></p>\n",
      "id": 4
    },
    {
      "path": "WHEEL_manual/3_workflow_screen/1_graphview.md",
      "url": "WHEEL_manual/3_workflow_screen/1_graphview.html",
      "content": "# 1. ワークフロー編集画面（グラフビュー）の機能説明\n本章では、WHEELのメイン画面であるワークフロー編集画面（グラフビュー）の機能について説明します。  \nワークフローの作成・実行等の例題については、後述の「ワークフローの作成」において説明します。\n\n## 1. 画面仕様説明\nワークフロー編集画面（グラフビュー）は以下のように構成されています。  \n\n![img](./img/graphview/workflow_graghview.png \"workflow_graghview\")  \n\n1. タイトル　　　　　　　　　　　　　：ホーム画面遷移ボタン\n1. ユーザー名　　　　　　　　　　　　：ログインユーザ名\n1. 画面遷移ドロワー　　　　　　　　　：ホスト登録画面、ログアウト用\n1. プロジェクト名　　　　　　　　　　：ワークフロー編集中のプロジェクト名\n1. プロジェクトの状態表示エリア　　　：プロジェクトのstate（実行状態）表示\n1. プロジェクトの操作ボタンエリア　　：プロジェクトの実行、一時停止、停止、クリーンボタン\n1. プロジェクトの編集日時表示エリア　：プロジェクトの作成、更新日時\n1. プロジェクトの保存ボタンエリア　　：プロジェクトの保存、リバートボタン\n1. ワークフロー画面切替ボタン　　　　：グラフビュー、リストビューの切替ボタン\n1. プロジェクトの階層表示・遷移ボタン：現在表示中のプロジェクトディレクトリの階層表示、また、階層間の遷移ボタン\n1. コンポーネントライブラリ表示ボタン：ワークフロー作成用のライブラリ表示用ボタン\n1. ワークフロー作成用エリア　　　　　：ワークフロー作成のためコンポーネント操作用エリア\n1. ログ表示ボタン　　　　　　　　　　：ワークフローの作成、実行に関するログ表示用ボタン\n\n次に各エリア、ボタンの詳細について説明します。  \n\n### プロジェクトの状態表示エリア\nプロジェクトの状態表示エリアは、プロジェクト全体の進行状態によって以下の状態を示します。  \n\n1. not-started：プロジェクト実行前\n\n![img](./img/graphview/not-started.png \"not_started\") \n\n2. running    ：プロジェクト実行中\n\n![img](./img/graphview/running.png \"running\") \n\n3. finished   ：プロジェクト実行終了\n\n![img](./img/graphview/finished.png \"finished\") \n\n4. failed     ：プロジェクトの失敗\n\n![img](./img/graphview/failed.png \"failed\") \n\n5. holding     : 投入済ジョブ確認中\n\n![img](./img/graphview/holding.png \"holding\")\n\n6. unknonw     : プロジェクトの状態不明\n\n![img](./img/graphview/holding.png \"holding\")\n\n### プロジェクトの操作ボタンエリア\nプロジェクト実行、停止などを操作するボタンとその詳細は以下です。  \n\n![img](./img/graphview/run_button_area.png \"run_button_area\") \n\n1. run ボタン：プロジェクトの実行開始\n1. pause ボタン：プロジェクト実行の一時停止\n1. stop ボタン：プロジェクトの実行停止と実行前の状態に戻す\n1. clean：プロジェクトに追加されたファイルを削除し、プロジェクトを直前の保存状態に戻す\n\nまた、WHEELでは、gitを用いたファイル管理を行っております。  \ngit操作の詳細については開発者向けドキュメント[詳細設計書](../../../doc/design/design.md)をご確認ください。\n\n### プロジェクトの保存ボタンエリア\nプロジェクトの保存、リバートを操作するボタンとその詳細は以下です。  \n\n![img](./img/graphview/save_button_area.png \"save_button_area\") \n\n1. save ボタン：プロジェクトを保存する\n1. revert ボタン：プロジェクトを直前の保存状態に戻す\n\n### ワークフロー画面切替ボタン\nワークフロー画面には、ワークフローの作成を行うグラフビュー画面とワークフローの進行状態を確認するリストビュー画面があります。  \n下記のボタンによって画面の切替を行います。\n\n##### グラフビュー画面  \n\n![img](./img/graphview/graghview.png \"graghview\") \n\n##### リストビュー画面  \n\n![img](./img/graphview/listview.png \"listview\")   \n\n### プロジェクトの階層表示・遷移ボタン\n***\nワークフローの作成時には、コンポーネント内にコンポーネントを作成するケースがあります。\nその場合の現在のコンポーネントディレクトリの階層、およびコンポーネント名の確認、および階層間の移動用として\n本ボタンは利用します。  \n\n##### root階層の場合  \n\n![img](./img/graphview/root_workflow.png \"root_workflow\")   \n\n##### 子階層 (root階層の1階層下) の場合  \n\n![img](./img/graphview/root_createworkflow.png \"root_createworkflow\")   \n\n作成したworkflowコンポーネント内へ遷移する（rootの子階層に相当）\n\n![img](./img/graphview/child_workflow.png \"child_workflow\")   \n\n### コンポーネントライブラリ表示ボタン\nワークフローの作成に用いるコンポーネントライブラリを表示します。  \nコンポーネントライブラリの詳細については次章にて説明します。  \n\n##### 非表示/表示  \n\n![img](./img/graphview/component_library.png \"component_library\")   \n\n### ワークフロー作成用エリア\nワークフローの作成用領域です。  \nワークフローを作成する場合、この領域にコンポーネントをドラッグ&ドロップすることよって配置し、ワークフローを作成します。  \n\n##### ワークフロー作成用エリア  \n\n![img](./img/graphview/workflow_area.png \"workflow_area\")\n\n### ログ表示ボタン\nワークフローの作成時や実行時等に出力されるログを表示します。  \n\n##### ログ非表示  \n\n![img](./img/graphview/log_close.png \"log_close\")\n\n##### ログ表示  \n\n![img](./img/graphview/log_open.png \"log_open\")  \n\nログ表示エリア内の各ボタンは以下のようになっております。  \nログは、サーバサイドの処理中に発生した出力内容を分類し表示しています。\n\n1. Debug：デバッグメッセージ\n1. Info：メッセージ、ワーニングメッセージ、エラーメッセージ\n1. Stdout：ローカルホストで実行されたtaskの標準出力\n1. Stderr：ローカルホストで実行されたtaskの標準エラー出力\n1. Stdout(SSH)：リモートホストで実行されたtaskの標準出力\n1. Stderr(SSH)：リモートホストで実行されたtaskの標準エラー出力\n1. All log clear：ログを全て消去する\n",
      "html": "<h1 id=\"1.-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2%EF%BC%88%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%EF%BC%89%E3%81%AE%E6%A9%9F%E8%83%BD%E8%AA%AC%E6%98%8E\">1. ワークフロー編集画面（グラフビュー）の機能説明 <a class=\"heading-anchor-permalink\" href=\"#1.-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2%EF%BC%88%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%EF%BC%89%E3%81%AE%E6%A9%9F%E8%83%BD%E8%AA%AC%E6%98%8E\">#</a></h1>\n<p>本章では、WHEELのメイン画面であるワークフロー編集画面（グラフビュー）の機能について説明します。<br>\nワークフローの作成・実行等の例題については、後述の「ワークフローの作成」において説明します。</p>\n<h2 id=\"1.-%E7%94%BB%E9%9D%A2%E4%BB%95%E6%A7%98%E8%AA%AC%E6%98%8E\">1. 画面仕様説明 <a class=\"heading-anchor-permalink\" href=\"#1.-%E7%94%BB%E9%9D%A2%E4%BB%95%E6%A7%98%E8%AA%AC%E6%98%8E\">#</a></h2>\n<p>ワークフロー編集画面（グラフビュー）は以下のように構成されています。</p>\n<p><img src=\"./img/graphview/workflow_graghview.png\" alt=\"img\" title=\"workflow_graghview\"></p>\n<ol>\n<li>タイトル　　　　　　　　　　　　　：ホーム画面遷移ボタン</li>\n<li>ユーザー名　　　　　　　　　　　　：ログインユーザ名</li>\n<li>画面遷移ドロワー　　　　　　　　　：ホスト登録画面、ログアウト用</li>\n<li>プロジェクト名　　　　　　　　　　：ワークフロー編集中のプロジェクト名</li>\n<li>プロジェクトの状態表示エリア　　　：プロジェクトのstate（実行状態）表示</li>\n<li>プロジェクトの操作ボタンエリア　　：プロジェクトの実行、一時停止、停止、クリーンボタン</li>\n<li>プロジェクトの編集日時表示エリア　：プロジェクトの作成、更新日時</li>\n<li>プロジェクトの保存ボタンエリア　　：プロジェクトの保存、リバートボタン</li>\n<li>ワークフロー画面切替ボタン　　　　：グラフビュー、リストビューの切替ボタン</li>\n<li>プロジェクトの階層表示・遷移ボタン：現在表示中のプロジェクトディレクトリの階層表示、また、階層間の遷移ボタン</li>\n<li>コンポーネントライブラリ表示ボタン：ワークフロー作成用のライブラリ表示用ボタン</li>\n<li>ワークフロー作成用エリア　　　　　：ワークフロー作成のためコンポーネント操作用エリア</li>\n<li>ログ表示ボタン　　　　　　　　　　：ワークフローの作成、実行に関するログ表示用ボタン</li>\n</ol>\n<p>次に各エリア、ボタンの詳細について説明します。</p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%8A%B6%E6%85%8B%E8%A1%A8%E7%A4%BA%E3%82%A8%E3%83%AA%E3%82%A2\">プロジェクトの状態表示エリア <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E7%8A%B6%E6%85%8B%E8%A1%A8%E7%A4%BA%E3%82%A8%E3%83%AA%E3%82%A2\">#</a></h3>\n<p>プロジェクトの状態表示エリアは、プロジェクト全体の進行状態によって以下の状態を示します。</p>\n<ol>\n<li>not-started：プロジェクト実行前</li>\n</ol>\n<p><img src=\"./img/graphview/not-started.png\" alt=\"img\" title=\"not_started\"></p>\n<ol start=\"2\">\n<li>running    ：プロジェクト実行中</li>\n</ol>\n<p><img src=\"./img/graphview/running.png\" alt=\"img\" title=\"running\"></p>\n<ol start=\"3\">\n<li>finished   ：プロジェクト実行終了</li>\n</ol>\n<p><img src=\"./img/graphview/finished.png\" alt=\"img\" title=\"finished\"></p>\n<ol start=\"4\">\n<li>failed     ：プロジェクトの失敗</li>\n</ol>\n<p><img src=\"./img/graphview/failed.png\" alt=\"img\" title=\"failed\"></p>\n<ol start=\"5\">\n<li>holding     : 投入済ジョブ確認中</li>\n</ol>\n<p><img src=\"./img/graphview/holding.png\" alt=\"img\" title=\"holding\"></p>\n<ol start=\"6\">\n<li>unknonw     : プロジェクトの状態不明</li>\n</ol>\n<p><img src=\"./img/graphview/holding.png\" alt=\"img\" title=\"holding\"></p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%93%8D%E4%BD%9C%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%A8%E3%83%AA%E3%82%A2\">プロジェクトの操作ボタンエリア <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%93%8D%E4%BD%9C%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%A8%E3%83%AA%E3%82%A2\">#</a></h3>\n<p>プロジェクト実行、停止などを操作するボタンとその詳細は以下です。</p>\n<p><img src=\"./img/graphview/run_button_area.png\" alt=\"img\" title=\"run_button_area\"></p>\n<ol>\n<li>run ボタン：プロジェクトの実行開始</li>\n<li>pause ボタン：プロジェクト実行の一時停止</li>\n<li>stop ボタン：プロジェクトの実行停止と実行前の状態に戻す</li>\n<li>clean：プロジェクトに追加されたファイルを削除し、プロジェクトを直前の保存状態に戻す</li>\n</ol>\n<p>また、WHEELでは、gitを用いたファイル管理を行っております。<br>\ngit操作の詳細については開発者向けドキュメント<a href=\"../../../doc/design/design.html\">詳細設計書</a>をご確認ください。</p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BF%9D%E5%AD%98%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%A8%E3%83%AA%E3%82%A2\">プロジェクトの保存ボタンエリア <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BF%9D%E5%AD%98%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%A8%E3%83%AA%E3%82%A2\">#</a></h3>\n<p>プロジェクトの保存、リバートを操作するボタンとその詳細は以下です。</p>\n<p><img src=\"./img/graphview/save_button_area.png\" alt=\"img\" title=\"save_button_area\"></p>\n<ol>\n<li>save ボタン：プロジェクトを保存する</li>\n<li>revert ボタン：プロジェクトを直前の保存状態に戻す</li>\n</ol>\n<h3 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E7%94%BB%E9%9D%A2%E5%88%87%E6%9B%BF%E3%83%9C%E3%82%BF%E3%83%B3\">ワークフロー画面切替ボタン <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E7%94%BB%E9%9D%A2%E5%88%87%E6%9B%BF%E3%83%9C%E3%82%BF%E3%83%B3\">#</a></h3>\n<p>ワークフロー画面には、ワークフローの作成を行うグラフビュー画面とワークフローの進行状態を確認するリストビュー画面があります。<br>\n下記のボタンによって画面の切替を行います。</p>\n<h5 id=\"%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">グラフビュー画面 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">#</a></h5>\n<p><img src=\"./img/graphview/graghview.png\" alt=\"img\" title=\"graghview\"></p>\n<h5 id=\"%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">リストビュー画面 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">#</a></h5>\n<p><img src=\"./img/graphview/listview.png\" alt=\"img\" title=\"listview\"></p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9A%8E%E5%B1%A4%E8%A1%A8%E7%A4%BA%E3%83%BB%E9%81%B7%E7%A7%BB%E3%83%9C%E3%82%BF%E3%83%B3\">プロジェクトの階層表示・遷移ボタン <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9A%8E%E5%B1%A4%E8%A1%A8%E7%A4%BA%E3%83%BB%E9%81%B7%E7%A7%BB%E3%83%9C%E3%82%BF%E3%83%B3\">#</a></h3>\n<hr>\n<p>ワークフローの作成時には、コンポーネント内にコンポーネントを作成するケースがあります。\nその場合の現在のコンポーネントディレクトリの階層、およびコンポーネント名の確認、および階層間の移動用として\n本ボタンは利用します。</p>\n<h5 id=\"root%E9%9A%8E%E5%B1%A4%E3%81%AE%E5%A0%B4%E5%90%88\">root階層の場合 <a class=\"heading-anchor-permalink\" href=\"#root%E9%9A%8E%E5%B1%A4%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h5>\n<p><img src=\"./img/graphview/root_workflow.png\" alt=\"img\" title=\"root_workflow\"></p>\n<h5 id=\"%E5%AD%90%E9%9A%8E%E5%B1%A4-(root%E9%9A%8E%E5%B1%A4%E3%81%AE1%E9%9A%8E%E5%B1%A4%E4%B8%8B)-%E3%81%AE%E5%A0%B4%E5%90%88\">子階層 (root階層の1階層下) の場合 <a class=\"heading-anchor-permalink\" href=\"#%E5%AD%90%E9%9A%8E%E5%B1%A4-(root%E9%9A%8E%E5%B1%A4%E3%81%AE1%E9%9A%8E%E5%B1%A4%E4%B8%8B)-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h5>\n<p><img src=\"./img/graphview/root_createworkflow.png\" alt=\"img\" title=\"root_createworkflow\"></p>\n<p>作成したworkflowコンポーネント内へ遷移する（rootの子階層に相当）</p>\n<p><img src=\"./img/graphview/child_workflow.png\" alt=\"img\" title=\"child_workflow\"></p>\n<h3 id=\"%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E8%A1%A8%E7%A4%BA%E3%83%9C%E3%82%BF%E3%83%B3\">コンポーネントライブラリ表示ボタン <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E8%A1%A8%E7%A4%BA%E3%83%9C%E3%82%BF%E3%83%B3\">#</a></h3>\n<p>ワークフローの作成に用いるコンポーネントライブラリを表示します。<br>\nコンポーネントライブラリの詳細については次章にて説明します。</p>\n<h5 id=\"%E9%9D%9E%E8%A1%A8%E7%A4%BA%2F%E8%A1%A8%E7%A4%BA\">非表示/表示 <a class=\"heading-anchor-permalink\" href=\"#%E9%9D%9E%E8%A1%A8%E7%A4%BA%2F%E8%A1%A8%E7%A4%BA\">#</a></h5>\n<p><img src=\"./img/graphview/component_library.png\" alt=\"img\" title=\"component_library\"></p>\n<h3 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E4%BD%9C%E6%88%90%E7%94%A8%E3%82%A8%E3%83%AA%E3%82%A2\">ワークフロー作成用エリア <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E4%BD%9C%E6%88%90%E7%94%A8%E3%82%A8%E3%83%AA%E3%82%A2\">#</a></h3>\n<p>ワークフローの作成用領域です。<br>\nワークフローを作成する場合、この領域にコンポーネントをドラッグ&amp;ドロップすることよって配置し、ワークフローを作成します。</p>\n<h5 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E4%BD%9C%E6%88%90%E7%94%A8%E3%82%A8%E3%83%AA%E3%82%A2-2\">ワークフロー作成用エリア <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E4%BD%9C%E6%88%90%E7%94%A8%E3%82%A8%E3%83%AA%E3%82%A2-2\">#</a></h5>\n<p><img src=\"./img/graphview/workflow_area.png\" alt=\"img\" title=\"workflow_area\"></p>\n<h3 id=\"%E3%83%AD%E3%82%B0%E8%A1%A8%E7%A4%BA%E3%83%9C%E3%82%BF%E3%83%B3\">ログ表示ボタン <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AD%E3%82%B0%E8%A1%A8%E7%A4%BA%E3%83%9C%E3%82%BF%E3%83%B3\">#</a></h3>\n<p>ワークフローの作成時や実行時等に出力されるログを表示します。</p>\n<h5 id=\"%E3%83%AD%E3%82%B0%E9%9D%9E%E8%A1%A8%E7%A4%BA\">ログ非表示 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AD%E3%82%B0%E9%9D%9E%E8%A1%A8%E7%A4%BA\">#</a></h5>\n<p><img src=\"./img/graphview/log_close.png\" alt=\"img\" title=\"log_close\"></p>\n<h5 id=\"%E3%83%AD%E3%82%B0%E8%A1%A8%E7%A4%BA\">ログ表示 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AD%E3%82%B0%E8%A1%A8%E7%A4%BA\">#</a></h5>\n<p><img src=\"./img/graphview/log_open.png\" alt=\"img\" title=\"log_open\"></p>\n<p>ログ表示エリア内の各ボタンは以下のようになっております。<br>\nログは、サーバサイドの処理中に発生した出力内容を分類し表示しています。</p>\n<ol>\n<li>Debug：デバッグメッセージ</li>\n<li>Info：メッセージ、ワーニングメッセージ、エラーメッセージ</li>\n<li>Stdout：ローカルホストで実行されたtaskの標準出力</li>\n<li>Stderr：ローカルホストで実行されたtaskの標準エラー出力</li>\n<li>Stdout(SSH)：リモートホストで実行されたtaskの標準出力</li>\n<li>Stderr(SSH)：リモートホストで実行されたtaskの標準エラー出力</li>\n<li>All log clear：ログを全て消去する</li>\n</ol>\n",
      "id": 5
    },
    {
      "path": "WHEEL_manual/3_workflow_screen/2_listview.md",
      "url": "WHEEL_manual/3_workflow_screen/2_listview.html",
      "content": "# ワークフロー実行状況確認画面（リストビュー）の機能説明\n本章では、ワークフロー実行状況確認画面（以下、リストビュー画面）の仕様について説明します。  \n\n## 画面仕様説明\nリストビュー画面は、ワークフロー画面切替ボタンにより表示することができます。  \nリストビュー画面は、プロジェクトの進行状況（Taskコンポーネントの進行状況）をリスト形式で表示する画面です。  \n表示内容は以下のように構成されています。  \n\n![img](./img/listview/workflow_listview.png \"workflow_listview\")  \n\n1. Name：コンポーネント名\n1. State：コンポーネント処理進行状況\n1. Started：コンポーネント処理実行時刻\n1. Prepared：ファイルの転送完了時刻（デフォルト非表示、データの無い場合有）\n1. Job Submitted：ジョブ投入時刻（デフォルト非表示、データの無い場合有）\n1. Job Ran：ジョブ実行開始時刻（デフォルト非表示、データの無い場合有）\n1. Job Finished：ジョブ実行完了時刻（デフォルト非表示、データの無い場合有）\n1. Finished：コンポーネント処理完了時間\n1. Description：コンポーネントの説明文（設定方法は後述）\n\nStateは、以下のように分類され、表示されます。\n\n| State名 | State説明 |\n|----|----|\n| not-started | 初期状態 |\n| stage-in | リモートサーバへ必要なファイルを転送している状態 |\n| waiting | Taskコンポーネントの同時実行本数の制限による待ち状態 |\n| running | 処理が実行されている状態 |\n| queued | ジョブをジョブスケジューラに投入し実行開始を待っている状態 |\n| stage-out | リモートサーバでの処理が終了し必要なファイルを転送している状態 |\n| finished | 処理が完了した状態 |\n| unknown | ジョブスケジューラ経由で投入したTaskの処理がステータスチェックに失敗するなど<br>正常終了か異常終了か判定できなかった状態 |\n| failed | 処理が異常終了した状態 |\n\nまた、上記例のようにForコンポーネントなどの子コンポーネントを持つことができるコンポーネント（サブコンポーネント）は  \nネストした形で表示されます。\n",
      "html": "<h1 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%8A%B6%E6%B3%81%E7%A2%BA%E8%AA%8D%E7%94%BB%E9%9D%A2%EF%BC%88%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%EF%BC%89%E3%81%AE%E6%A9%9F%E8%83%BD%E8%AA%AC%E6%98%8E\">ワークフロー実行状況確認画面（リストビュー）の機能説明 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%8A%B6%E6%B3%81%E7%A2%BA%E8%AA%8D%E7%94%BB%E9%9D%A2%EF%BC%88%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%EF%BC%89%E3%81%AE%E6%A9%9F%E8%83%BD%E8%AA%AC%E6%98%8E\">#</a></h1>\n<p>本章では、ワークフロー実行状況確認画面（以下、リストビュー画面）の仕様について説明します。</p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E4%BB%95%E6%A7%98%E8%AA%AC%E6%98%8E\">画面仕様説明 <a class=\"heading-anchor-permalink\" href=\"#%E7%94%BB%E9%9D%A2%E4%BB%95%E6%A7%98%E8%AA%AC%E6%98%8E\">#</a></h2>\n<p>リストビュー画面は、ワークフロー画面切替ボタンにより表示することができます。<br>\nリストビュー画面は、プロジェクトの進行状況（Taskコンポーネントの進行状況）をリスト形式で表示する画面です。<br>\n表示内容は以下のように構成されています。</p>\n<p><img src=\"./img/listview/workflow_listview.png\" alt=\"img\" title=\"workflow_listview\"></p>\n<ol>\n<li>Name：コンポーネント名</li>\n<li>State：コンポーネント処理進行状況</li>\n<li>Started：コンポーネント処理実行時刻</li>\n<li>Prepared：ファイルの転送完了時刻（デフォルト非表示、データの無い場合有）</li>\n<li>Job Submitted：ジョブ投入時刻（デフォルト非表示、データの無い場合有）</li>\n<li>Job Ran：ジョブ実行開始時刻（デフォルト非表示、データの無い場合有）</li>\n<li>Job Finished：ジョブ実行完了時刻（デフォルト非表示、データの無い場合有）</li>\n<li>Finished：コンポーネント処理完了時間</li>\n<li>Description：コンポーネントの説明文（設定方法は後述）</li>\n</ol>\n<p>Stateは、以下のように分類され、表示されます。</p>\n<table>\n<thead>\n<tr>\n<th>State名</th>\n<th>State説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not-started</td>\n<td>初期状態</td>\n</tr>\n<tr>\n<td>stage-in</td>\n<td>リモートサーバへ必要なファイルを転送している状態</td>\n</tr>\n<tr>\n<td>waiting</td>\n<td>Taskコンポーネントの同時実行本数の制限による待ち状態</td>\n</tr>\n<tr>\n<td>running</td>\n<td>処理が実行されている状態</td>\n</tr>\n<tr>\n<td>queued</td>\n<td>ジョブをジョブスケジューラに投入し実行開始を待っている状態</td>\n</tr>\n<tr>\n<td>stage-out</td>\n<td>リモートサーバでの処理が終了し必要なファイルを転送している状態</td>\n</tr>\n<tr>\n<td>finished</td>\n<td>処理が完了した状態</td>\n</tr>\n<tr>\n<td>unknown</td>\n<td>ジョブスケジューラ経由で投入したTaskの処理がステータスチェックに失敗するなど<br>正常終了か異常終了か判定できなかった状態</td>\n</tr>\n<tr>\n<td>failed</td>\n<td>処理が異常終了した状態</td>\n</tr>\n</tbody>\n</table>\n<p>また、上記例のようにForコンポーネントなどの子コンポーネントを持つことができるコンポーネント（サブコンポーネント）は<br>\nネストした形で表示されます。</p>\n",
      "id": 6
    },
    {
      "path": "WHEEL_manual/3_workflow_screen/3_editor.md",
      "url": "WHEEL_manual/3_workflow_screen/3_editor.html",
      "content": "",
      "html": "",
      "id": 7
    },
    {
      "path": "WHEEL_manual/3_workflow_screen/3_rapid.md",
      "url": "WHEEL_manual/3_workflow_screen/3_rapid.html",
      "content": "## テキストエディタ画面起動方法\nテキストエディタ画面は、各コンポーネントのプロパティサブ画面の最下部の\nファイルリスト表示領域内で、ファイルを選択した状態で鉛筆アイコンをクリックすると表示されます。\n\n![img](./img/rapid/rapid_icon.png \"起動ボタン\") \n\n\n## メイン画面\nテキストエディタを起動すると次のような画面が表示されます。\n\n![img](./img/rapid/rapid_main.png \"テキストエディタメイン画面\") \n\n1. タブリスト\n2. テキスト表示部\n3. 領域分割バー\n4. 保存ボタン\n5. パラメータ設定部\n6. グラフビュー遷移ボタン\n\n\n### 1. タブリスト\n現在開いているファイルの一覧をタブとして表示します。\n各ファイルの右隣に表示される X アイコンをクリックすると開いているタブを閉じることができます。\n閉じる時に、ファイルに変更が加えられていた時は次のようなダイアログが表示されて、\nファイルを保存するか、変更を破棄するか、タブを閉じるのをやめるかを選ぶことができます。\nもし、ファイルに変更がされていなかった場合はこのダイアログは表示されずにタブが閉じられます。\n\n![img](./img/rapid/file_save_dialog.png \"ファイル保存ダイアログ\") \n\nタブリストの末尾に表示されている ＋ アイコンをクリックすると新規ファイルを作成または開くことができます。\nクリック後に表示される次のダイアログでファイル名を入力してください。\n\n![img](./img/rapid/file_open_dialog.png \"ファイルopenダイアログ\") \n\n入力されたファイルが既に存在する時は、その内容が新規タブに読み込まれ、存在しない場合は空のファイルとして作成された上で\n新規タブに空ファイルが表示されます。\nこのタブを編集せずに閉じても、作成された空ファイルは残りますので不要であればグラフビューで削除してください。\n\n\n### 2. テキスト表示部\n本エリアには、タブリストで現在選択されているファイル(青のアンダーラインが表示されているファイル)の内容が表示されます。\n通常のテキストエリアと同様にこの領域でファイルの内容を編集することができます。\n\n###  3. 領域分割バー\nテキストエディタ部分と、後述のパラメータ設定部分の領域を分けるバーです。ドラッグすることで両領域の表示サイズを変更することができます。\n\n### 4. 保存ボタン\n全てのファイルおよびパラメータ設定ファイルの内容を保存します。\nただし本操作で保存したファイルはグラフビューでcleanまたはrevert操作を行なうと失われるので、\n変更内容を保存するためにはグラフビューで再度save操作を行う必要があります。\n\n### 5. パラメータ設定部\n本エリアでは、パラメータスタディコンポーネントで使用するパラメータ設定ファイルを編集することができます。\n\n### 6. グラフビュー遷移ボタン\n本ボタンをクリックすると、元のグラフビュー画面に遷移します。\n保存していないファイルなどは全て破棄されます。\n\n\n## パラメータ設定部\nテキストエディタ起動時に選択していたファイルが、パラメータスタディコンポーネントで使用するパラメータ設定ファイルの\n要件を見たすJSONファイルだった時には、起動時にそのファイルの設定がパラメータ設定部に表示されています。\nそれ以外の場合は何も設定されていない状態で起動し、値を設定した後で保存することで、\"parameterSettings.json\"という名前で保存されます。\n\nパラメータ設定部ではパラメータ設定ファイルに記述する4つのプロパティに対応して4つの部分に分かれています。\n\n![img](./img/rapid/parameter_setting.png \"パラメータ設定部\") \n\n1. ターゲットファイル設定部\n2. パラメータ設定部\n3. scatter設定部\n4. gather設定部\n\n### 1. ターゲットファイル設定部\nパラメータスタディ実行時にパラメータの書き換えを行なう対象ファイルをターゲットファイルと称します。\nターゲットファイル設定部では、どのファイルをターゲットファイルとして扱うかを指定することができます。\n\n![img](./img/rapid/targetFiles.png \"ターゲットファイル設定部\") \n\n1. ターゲットファイルのファイル名\n2. ターゲットファイルが配置されるコンポーネント、非表示の場合はパラメータ設定ファイルが存在するコンポーネントを意味します。\n3. その行のターゲットファイルの設定を変更(鉛筆アイコン)または削除(ゴミ箱アイコン)します。\n4. 新しくターゲットファイルの設定を追加します。\n\n各行の鉛筆アイコンまたは\"Add New Target File\"ボタンをクリックすると次のダイアログが立ち上がります。\n\n![img](./img/rapid/newTargetFile.png \"ターゲットファイル追加ダイアログ\") \n\n1のエリアにファイル名を入力し、OKボタンをクリックすると新規ターゲットファイルが追加されます。\nパラメータスタディのコンポーネントより下位の別のコンポーネントにあるファイルをターゲットファイルとする場合は\n2のファイルツリーで対象ファイルを配置するコンポーネントを選択してください。\n\n### 2. パラメータ設定部\nパラメータスタディ実行時にターゲットファイルとして指定されたファイルを書き換えるためのパラメータ空間の定義と\n各パラメータで置き換えられるプレースホルダを設定します。\n\n![img](./img/rapid/parameters.png \"パラメータ設定部\") \n\n1. そのパラメータ設定を適用するプレースホルダを識別するための文字列です\n2. テキストエディタ画面で選択している文字列が表示されます。何か選択した状態で3のAdd New Parameterボタンをクリックすると選択中の文字列をkeywordとして新しいパラメータを設定します。\n3. 新規パラメータ設定を作成します。\n4. その行のパラメータ設定を変更(鉛筆アイコン)または削除(ゴミ箱アイコン)します。\n5. 既存のパラメータ設定に対してフィルターを追加します。\n\nAdd New Parameterボタンまたは鉛筆アイコンをクリックすると次のパラメータ作成ダイアログが表示されます。\n\n![img](./img/rapid/newParameter.png \"min-max-step型新規パラメータ作成ダイアログ\") \n\n1. パラメータタイプ選択リスト\n2. パラメータ定義部\n\nこの画面ではmin-max-stepの3つの数値で定義できる等間隔な数列をパラメータ空間として定義できます。\n\n1のパラメータタイプをlistまたはfileに設定すると次のような画面に変更されます\n\n![img](./img/rapid/newParameter2.png \"リスト型新規パラメータ作成ダイアログ\") \n\nこちらの画面では、任意の値を陽に指定したパラメータ空間を定義できます。\n1のAdd Newをクリックするとパラメータの行が1行追加されます。\n値は2のvalue列をクリックすると入力欄が表示されるので、そこで編集します。\n不要な行は3のゴミ箱アイコンをクリックすると削除されます。\n\n![img](./img/rapid/filterEditor.png \"フィルタ追加設定部\") \n\n### 3. scatter設定部および4.gather設定部\nパラメータスタディ開始時に特定のパラメータ実行ディレクトリのみにファイルをコピーしたり、終了時に特定のディレクトリから回収する設定をそれぞれScatterおよびGatherパラメータで指定することができます。\n(scatterパラメータに指定されていないファイルは全てコピーされ、gatherパラメータに指定されていないファイルは一切回収されません)\nこれらの設定画面はほぼ共通しているので、まとめて解説します。\n\n![img](./img/rapid/scatter_gather.png \"Scatter/Gather設定部\") \n\n1. srcName/dstName scatterでは配布するファイル名、gatherでは回収するファイル名が表示されます\n2. dstName/srcName scatterでは配布先でのファイル名、gatherでは回収後のファイル名が表示されます\n3. dstNode/srcNode 下位コンポーネントへの配布または下位コンポーネントからの回収を行なう時にはそのコンポーネント名が表示されます\n4. Add Newボタン 新規設定を追加します。\n\n4のAdd Newボタンをクリックすると次のような設定ダイアログが表示されます。この画面ではscatterの設定を行なっていますがgatherでも同様な画面です。\n\n![img](./img/rapid/newScatter.png \"新規Scatter設定作成ダイアログ\") \n\n1. srcName/dstName コピー元およびコピー先でのファイル名を記述します。この欄にはファイル名のみではなくglobパターンや、パラメータのplaceholderも書くことができます。\n2. 転送先またはファイル取得元コンポーネントを選択します。何も選択しなかった場合はパラスタコンポーネント直下のファイルを配布または回収します。\n\n",
      "html": "<h2 id=\"%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E7%94%BB%E9%9D%A2%E8%B5%B7%E5%8B%95%E6%96%B9%E6%B3%95\">テキストエディタ画面起動方法 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E7%94%BB%E9%9D%A2%E8%B5%B7%E5%8B%95%E6%96%B9%E6%B3%95\">#</a></h2>\n<p>テキストエディタ画面は、各コンポーネントのプロパティサブ画面の最下部の\nファイルリスト表示領域内で、ファイルを選択した状態で鉛筆アイコンをクリックすると表示されます。</p>\n<p><img src=\"./img/rapid/rapid_icon.png\" alt=\"img\" title=\"起動ボタン\"></p>\n<h2 id=\"%E3%83%A1%E3%82%A4%E3%83%B3%E7%94%BB%E9%9D%A2\">メイン画面 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%A1%E3%82%A4%E3%83%B3%E7%94%BB%E9%9D%A2\">#</a></h2>\n<p>テキストエディタを起動すると次のような画面が表示されます。</p>\n<p><img src=\"./img/rapid/rapid_main.png\" alt=\"img\" title=\"テキストエディタメイン画面\"></p>\n<ol>\n<li>タブリスト</li>\n<li>テキスト表示部</li>\n<li>領域分割バー</li>\n<li>保存ボタン</li>\n<li>パラメータ設定部</li>\n<li>グラフビュー遷移ボタン</li>\n</ol>\n<h3 id=\"1.-%E3%82%BF%E3%83%96%E3%83%AA%E3%82%B9%E3%83%88\">1. タブリスト <a class=\"heading-anchor-permalink\" href=\"#1.-%E3%82%BF%E3%83%96%E3%83%AA%E3%82%B9%E3%83%88\">#</a></h3>\n<p>現在開いているファイルの一覧をタブとして表示します。\n各ファイルの右隣に表示される X アイコンをクリックすると開いているタブを閉じることができます。\n閉じる時に、ファイルに変更が加えられていた時は次のようなダイアログが表示されて、\nファイルを保存するか、変更を破棄するか、タブを閉じるのをやめるかを選ぶことができます。\nもし、ファイルに変更がされていなかった場合はこのダイアログは表示されずにタブが閉じられます。</p>\n<p><img src=\"./img/rapid/file_save_dialog.png\" alt=\"img\" title=\"ファイル保存ダイアログ\"></p>\n<p>タブリストの末尾に表示されている ＋ アイコンをクリックすると新規ファイルを作成または開くことができます。\nクリック後に表示される次のダイアログでファイル名を入力してください。</p>\n<p><img src=\"./img/rapid/file_open_dialog.png\" alt=\"img\" title=\"ファイルopenダイアログ\"></p>\n<p>入力されたファイルが既に存在する時は、その内容が新規タブに読み込まれ、存在しない場合は空のファイルとして作成された上で\n新規タブに空ファイルが表示されます。\nこのタブを編集せずに閉じても、作成された空ファイルは残りますので不要であればグラフビューで削除してください。</p>\n<h3 id=\"2.-%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E8%A1%A8%E7%A4%BA%E9%83%A8\">2. テキスト表示部 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E8%A1%A8%E7%A4%BA%E9%83%A8\">#</a></h3>\n<p>本エリアには、タブリストで現在選択されているファイル(青のアンダーラインが表示されているファイル)の内容が表示されます。\n通常のテキストエリアと同様にこの領域でファイルの内容を編集することができます。</p>\n<h3 id=\"3.-%E9%A0%98%E5%9F%9F%E5%88%86%E5%89%B2%E3%83%90%E3%83%BC\">3. 領域分割バー <a class=\"heading-anchor-permalink\" href=\"#3.-%E9%A0%98%E5%9F%9F%E5%88%86%E5%89%B2%E3%83%90%E3%83%BC\">#</a></h3>\n<p>テキストエディタ部分と、後述のパラメータ設定部分の領域を分けるバーです。ドラッグすることで両領域の表示サイズを変更することができます。</p>\n<h3 id=\"4.-%E4%BF%9D%E5%AD%98%E3%83%9C%E3%82%BF%E3%83%B3\">4. 保存ボタン <a class=\"heading-anchor-permalink\" href=\"#4.-%E4%BF%9D%E5%AD%98%E3%83%9C%E3%82%BF%E3%83%B3\">#</a></h3>\n<p>全てのファイルおよびパラメータ設定ファイルの内容を保存します。\nただし本操作で保存したファイルはグラフビューでcleanまたはrevert操作を行なうと失われるので、\n変更内容を保存するためにはグラフビューで再度save操作を行う必要があります。</p>\n<h3 id=\"5.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E8%A8%AD%E5%AE%9A%E9%83%A8\">5. パラメータ設定部 <a class=\"heading-anchor-permalink\" href=\"#5.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E8%A8%AD%E5%AE%9A%E9%83%A8\">#</a></h3>\n<p>本エリアでは、パラメータスタディコンポーネントで使用するパラメータ設定ファイルを編集することができます。</p>\n<h3 id=\"6.-%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E9%81%B7%E7%A7%BB%E3%83%9C%E3%82%BF%E3%83%B3\">6. グラフビュー遷移ボタン <a class=\"heading-anchor-permalink\" href=\"#6.-%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E9%81%B7%E7%A7%BB%E3%83%9C%E3%82%BF%E3%83%B3\">#</a></h3>\n<p>本ボタンをクリックすると、元のグラフビュー画面に遷移します。\n保存していないファイルなどは全て破棄されます。</p>\n<h2 id=\"%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E8%A8%AD%E5%AE%9A%E9%83%A8\">パラメータ設定部 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E8%A8%AD%E5%AE%9A%E9%83%A8\">#</a></h2>\n<p>テキストエディタ起動時に選択していたファイルが、パラメータスタディコンポーネントで使用するパラメータ設定ファイルの\n要件を見たすJSONファイルだった時には、起動時にそのファイルの設定がパラメータ設定部に表示されています。\nそれ以外の場合は何も設定されていない状態で起動し、値を設定した後で保存することで、&quot;parameterSettings.json&quot;という名前で保存されます。</p>\n<p>パラメータ設定部ではパラメータ設定ファイルに記述する4つのプロパティに対応して4つの部分に分かれています。</p>\n<p><img src=\"./img/rapid/parameter_setting.png\" alt=\"img\" title=\"パラメータ設定部\"></p>\n<ol>\n<li>ターゲットファイル設定部</li>\n<li>パラメータ設定部</li>\n<li>scatter設定部</li>\n<li>gather設定部</li>\n</ol>\n<h3 id=\"1.-%E3%82%BF%E3%83%BC%E3%82%B2%E3%83%83%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A%E9%83%A8\">1. ターゲットファイル設定部 <a class=\"heading-anchor-permalink\" href=\"#1.-%E3%82%BF%E3%83%BC%E3%82%B2%E3%83%83%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A%E9%83%A8\">#</a></h3>\n<p>パラメータスタディ実行時にパラメータの書き換えを行なう対象ファイルをターゲットファイルと称します。\nターゲットファイル設定部では、どのファイルをターゲットファイルとして扱うかを指定することができます。</p>\n<p><img src=\"./img/rapid/targetFiles.png\" alt=\"img\" title=\"ターゲットファイル設定部\"></p>\n<ol>\n<li>ターゲットファイルのファイル名</li>\n<li>ターゲットファイルが配置されるコンポーネント、非表示の場合はパラメータ設定ファイルが存在するコンポーネントを意味します。</li>\n<li>その行のターゲットファイルの設定を変更(鉛筆アイコン)または削除(ゴミ箱アイコン)します。</li>\n<li>新しくターゲットファイルの設定を追加します。</li>\n</ol>\n<p>各行の鉛筆アイコンまたは&quot;Add New Target File&quot;ボタンをクリックすると次のダイアログが立ち上がります。</p>\n<p><img src=\"./img/rapid/newTargetFile.png\" alt=\"img\" title=\"ターゲットファイル追加ダイアログ\"></p>\n<p>1のエリアにファイル名を入力し、OKボタンをクリックすると新規ターゲットファイルが追加されます。\nパラメータスタディのコンポーネントより下位の別のコンポーネントにあるファイルをターゲットファイルとする場合は\n2のファイルツリーで対象ファイルを配置するコンポーネントを選択してください。</p>\n<h3 id=\"2.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E8%A8%AD%E5%AE%9A%E9%83%A8\">2. パラメータ設定部 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E8%A8%AD%E5%AE%9A%E9%83%A8\">#</a></h3>\n<p>パラメータスタディ実行時にターゲットファイルとして指定されたファイルを書き換えるためのパラメータ空間の定義と\n各パラメータで置き換えられるプレースホルダを設定します。</p>\n<p><img src=\"./img/rapid/parameters.png\" alt=\"img\" title=\"パラメータ設定部\"></p>\n<ol>\n<li>そのパラメータ設定を適用するプレースホルダを識別するための文字列です</li>\n<li>テキストエディタ画面で選択している文字列が表示されます。何か選択した状態で3のAdd New Parameterボタンをクリックすると選択中の文字列をkeywordとして新しいパラメータを設定します。</li>\n<li>新規パラメータ設定を作成します。</li>\n<li>その行のパラメータ設定を変更(鉛筆アイコン)または削除(ゴミ箱アイコン)します。</li>\n<li>既存のパラメータ設定に対してフィルターを追加します。</li>\n</ol>\n<p>Add New Parameterボタンまたは鉛筆アイコンをクリックすると次のパラメータ作成ダイアログが表示されます。</p>\n<p><img src=\"./img/rapid/newParameter.png\" alt=\"img\" title=\"min-max-step型新規パラメータ作成ダイアログ\"></p>\n<ol>\n<li>パラメータタイプ選択リスト</li>\n<li>パラメータ定義部</li>\n</ol>\n<p>この画面ではmin-max-stepの3つの数値で定義できる等間隔な数列をパラメータ空間として定義できます。</p>\n<p>1のパラメータタイプをlistまたはfileに設定すると次のような画面に変更されます</p>\n<p><img src=\"./img/rapid/newParameter2.png\" alt=\"img\" title=\"リスト型新規パラメータ作成ダイアログ\"></p>\n<p>こちらの画面では、任意の値を陽に指定したパラメータ空間を定義できます。\n1のAdd Newをクリックするとパラメータの行が1行追加されます。\n値は2のvalue列をクリックすると入力欄が表示されるので、そこで編集します。\n不要な行は3のゴミ箱アイコンをクリックすると削除されます。</p>\n<p><img src=\"./img/rapid/filterEditor.png\" alt=\"img\" title=\"フィルタ追加設定部\"></p>\n<h3 id=\"3.-scatter%E8%A8%AD%E5%AE%9A%E9%83%A8%E3%81%8A%E3%82%88%E3%81%B34.gather%E8%A8%AD%E5%AE%9A%E9%83%A8\">3. scatter設定部および4.gather設定部 <a class=\"heading-anchor-permalink\" href=\"#3.-scatter%E8%A8%AD%E5%AE%9A%E9%83%A8%E3%81%8A%E3%82%88%E3%81%B34.gather%E8%A8%AD%E5%AE%9A%E9%83%A8\">#</a></h3>\n<p>パラメータスタディ開始時に特定のパラメータ実行ディレクトリのみにファイルをコピーしたり、終了時に特定のディレクトリから回収する設定をそれぞれScatterおよびGatherパラメータで指定することができます。\n(scatterパラメータに指定されていないファイルは全てコピーされ、gatherパラメータに指定されていないファイルは一切回収されません)\nこれらの設定画面はほぼ共通しているので、まとめて解説します。</p>\n<p><img src=\"./img/rapid/scatter_gather.png\" alt=\"img\" title=\"Scatter/Gather設定部\"></p>\n<ol>\n<li>srcName/dstName scatterでは配布するファイル名、gatherでは回収するファイル名が表示されます</li>\n<li>dstName/srcName scatterでは配布先でのファイル名、gatherでは回収後のファイル名が表示されます</li>\n<li>dstNode/srcNode 下位コンポーネントへの配布または下位コンポーネントからの回収を行なう時にはそのコンポーネント名が表示されます</li>\n<li>Add Newボタン 新規設定を追加します。</li>\n</ol>\n<p>4のAdd Newボタンをクリックすると次のような設定ダイアログが表示されます。この画面ではscatterの設定を行なっていますがgatherでも同様な画面です。</p>\n<p><img src=\"./img/rapid/newScatter.png\" alt=\"img\" title=\"新規Scatter設定作成ダイアログ\"></p>\n<ol>\n<li>srcName/dstName コピー元およびコピー先でのファイル名を記述します。この欄にはファイル名のみではなくglobパターンや、パラメータのplaceholderも書くことができます。</li>\n<li>転送先またはファイル取得元コンポーネントを選択します。何も選択しなかった場合はパラスタコンポーネント直下のファイルを配布または回収します。</li>\n</ol>\n",
      "id": 8
    },
    {
      "path": "WHEEL_manual/3_workflow_screen/4_PS_editor.md",
      "url": "WHEEL_manual/3_workflow_screen/4_PS_editor.html",
      "content": "",
      "html": "",
      "id": 9
    },
    {
      "path": "WHEEL_manual/4_component/10_Stepjob.md",
      "url": "WHEEL_manual/4_component/10_Stepjob.html",
      "content": "# Stepjob\n\n![img](./img/stepjob/stepjob.png)  \n\nstepjob/stepjobTaskコンポーネントは、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のステップジョブ機能に基づいた機能です。  \nユーザがステップジョブを使用できるリモートマシンのアカウントを持つ場合にのみ使用できます。  \n本機能は、stepjobコンポーネントとstepjobコンポーネント内でのみ使用できるstepjobTaskコンポーネントを組み合わせて使用します。  \nTCSのステップジョブ機能に基づきstepjobTaskコンポーネントに設定されたステップナンバー、及び、依存関係式に従い、ジョブ投入されます。  \nステップジョブを使用することでジョブの投入時に設定した依存関係式によって実行条件や順序を指定することができ特定のジョブの実行結果に応じて自動的に処理させることができます。  \nステップジョブ機能の詳細に関しては、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のドキュメントをご確認ください。  \n\nStepjob/StepjobTaskコンポーネントのプロパティは以下です。\n\n#### ■ stepjob\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| host | 文字列 | Taskを実行するhost、localhostまたは登録済のremotehostのlabelを指定する *1|\n| useJobscheduler | チェックボックス | true、readonly |\n| queue | 文字列 | ジョブの投入先キューを指定する(useJobSchedulerを使用しない場合は設定不可) *2|\n| clean up flag | ラジオボタン | リモート環境に作成した一時ファイルの取り扱い指定フラグ |\n|  | clean up | 削除する |\n|  | keep files | 削除しない |\n|  | follow parent setting | 親コンポーネントと同じ挙動をする |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *3 |\n\n*1 stepjobコンポーネントで使用するホストはステップジョブ機能を使用できるリモートホストを設定する必要があります。  \n*2 設定したキューがstepjobコンポーネント内部のstepjobTaskコンポーネントのジョブ投入時に使用されます。  \n*3 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n#### ■ stepjobTask\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| script | ファイル | Task内の処理を記述したスクリプトのファイルを指定 *1<br>scriptにはFilesエリアに登録されているファイルが選択可能 | \n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル *2|\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル *2|\n| useDependency | チェックボックス | 依存関係式を使用する |\n| stepNumber | 入力不可 | ステップジョブの実行順を定める番号、結線によって自動採番する *3 |\n| form | 文字列 | 依存関係式入力ボックス *4 |\n| clean up flag | ラジオボタン | リモート環境に作成した一時ファイルの取り扱い指定フラグ |\n|  | clean up | 削除する |\n|  | keep files | 削除しない |\n|  | follow parent setting | 親コンポーネントと同じ挙動をする |\n| include | ファイル | リモート環境から回収してくるファイル *5 |\n| exclude | ファイル | リモート環境から回収しないファイル *5 |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *6 |\n\n*1 scriptに指定されたスクリプトの終了コードが0の場合は真、  \n　それ以外の場合は、偽と判定し(プロジェクトの判定はfailedとなります)後続のノードへ遷移します。  \n*2 stepjobTaskコンポーネントでは、親コンポーネント(stepjobコンポーネント)からのファイルの受け渡しは可能ですが、  \n　ステップジョブ機能の性質上、stepjobTaskコンポーネント間のファイルの受け渡しを設定することができません。  \n　実行するステップジョブ間でファイルの受け渡しが必要な場合は、ジョブスクリプトに処理を記述する必要があります。  \n*3 ステップナンバーが小さい数から順に実行されます。  \n*4 include, excludeともにglobパターンを指定することができます。  \n　includeにマッチしなおかつexcludeにマッチしないファイルを回収してくることができます。  \n　ただし、outputFilesに指定されたファイルは、include/excludeの指定に関わらず全て回収されます。  \n*5 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n## 依存関係式（form プロパティ）\n\nstepjobTaskコンポーネントにおいて、実行済みstepjobTaskコンポーネントのジョブスクリプトの終了ステータス（ec, もしくはジョブの終了コードpc）によって、  \nその後のstepjobTaskコンポーネントの実行可否を決定する場合、依存関係式をformプロパティに設定します。  \n\n依存関係式の記述方法は以下になります。\n\n```\nsd=form[:[deletetype][:stepno[:stepno[...]]]]\n```\n\n| 式要素 | 説明 |\n| ---- | ---- |\n| sd= | 接頭辞、必須 |\n| form | 投入するサブジョブを実行するかどうかを判断する条件を示す式 |\n| deletetype | サブジョブを実行しない場合の詳細動作の指定 |\n| stepno | どのサブジョブの実行結果に対して適用するかを示すステップナンバー |\n\n#### form\n\nformは、param(ec:依存するサブジョブのジョブスクリプトの終了コード, pc:依存するサブジョブのジョブ終了コード)と  \n値「==, !=, <, > , <=, >=」で指定します。\n```\nex.\nec==0\n```\n条件==や!=を指定する場合、値はコンマ(,)で区切ることで複数指定できます。\n\n#### deletetype\ndeletetypeは、以下の3種類指定できます。\n\n| deletetype | 説明 |\n| ---- | ---- |\n| one | このサブジョブのみ削除する。このサブジョブの結果に依存する後続のサブジョブは削除されない |\n| after | このサブジョブ、及びそれに依存する後続のサブジョブのみ削除する|\n| all | このサブジョブ、及び後続のサブジョブを全て削除する |\n\n以下にformプロパティに設定する依存関係式の例を示します。\n```\nex.ステップナンバー0のサブジョブのジョブスクリプトの終了コードが0以外の場合、このサブジョブ以降は実行しない\n\nsd=ec!=0:all:0\n```\n\n# リモートホスト/ジョブスケジューラの設定\n## リモートホストの設定\n前述にもあるように、stepjob/stepjobTaskコンポーネントを使用する場合、  \nユーザがリモートホストのステップジョブ機能を使用する権限を有している必要があります。  \n権限を有している場合、リモートホスト設定画面においてstepjob/stepjobTaskコンポーネントで使用するリモートホストのstepjobプロパティを  \n有効にすることで使用可能になります。(加えてjobScheduler.jsonファイルにも設定が必要です。詳細後述。)\n\n> リモートホスト画面  \n![img](./img/stepjob/stepjob_remotehost.png \"remotehost\")\n\n## ジョブスケジューラの設定\nstepjob/stepjobTaskコンポーネントを使用する場合、リモートホストの設定に加えて使用するジョブスケジューラの設定も必要です。    \nWHEELモジュール内のapp/config/jobscheduler.jsonファイルにステップジョブ機能を有効にする以下の記述を追記してください。  \n\n> app/config/jobscheduler.jsonへの追記例  \n![img](./img/stepjob/stepjob_jobscheduler.png \"remotehost\")\n\n# stepjob/stepjobTaskコンポーネントの使用例\n\nサンプルでは、3つのstepjobTaskコンポーネントを使用します。  \n1つ目のstepjobTaskコンポーネントは、ジョブスクリプトの終了コード1となるジョブスクリプトを設定し、  \n2つ目のstepjobTaskコンポーネントに依存関係式「sd=ec!=0:all:0」によって  \n2つめ,3つ目のstepjobTaskコンポーネントが実行されないことを確認します。*\n\n*3つ目のstepjobTaskコンポーネントで投入したサブジョブは実行されませんが、  \nコンポーネント自体の処理は実行されるためコンポーネントのステータスはfinished(✔)となります。\n\n## ワークフロー構成図\n\n![img](./img/stepjob/stepjob_workflow.png \"stepjob_workflow\")\n\nstepjobTaskコンポーネントに依存関係式が使用されている(useDependency=true)場合、  \n先行するコンポーネントの処理結果によって当該コンポーネント(また、それ以降のコンポーネント)  \nが実行される保証がないため先行コンポーネントからの結線を点線で表示します。\n\n## 各コンポーネントのプロパティ\n\n> stepjobTask0（stepjobTaskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | stepjobTask0 |\n| Script | failed.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| useDependency | - |\n| stepNumber | 0(自動採番) |  \n| form | - |  \n\n#### ・failed.sh\n\n```\n#!/bin/bash\n#PJM -L \"node=1\"\n#PJM -L \"rscgrp=eap-small\"\n#PJM -L \"elapse=1:00:00\"\n#PJM -j -X -S\n\necho stepjobTask0\nexit 1\n```\n(注)上記スクリプトのリソース指定は富岳の記述形式です。他のホストで使用する場合は、使用するホストの記述方式を使用して下さい。  \n> stepjobTask1（stepjobTaskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | stepjobTask0 |\n| Script | failed.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| useDependency | true |\n| stepNumber | 1(自動採番) |  \n| form | sd=ec!=0:all:0 |  \n\n#### ・script1.sh\n\n```\n#!/bin/bash\n#PJM -L \"node=1\"\n#PJM -L \"rscgrp=eap-small\"\n#PJM -L \"elapse=1:00:00\"\n#PJM -j -X -S\n\necho stepjobTask1\nexit 0\n```\n\n> stepjobTask2（stepjobTaskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | stepjobTask0 |\n| Script | failed.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| useDependency | - |\n| stepNumber | 2(自動採番) |  \n| form | - |  \n\n#### ・script2.sh\n\n```\n#!/bin/bash\n#PJM -L \"node=1\"\n#PJM -L \"rscgrp=eap-small\"\n#PJM -L \"elapse=1:00:00\"\n#PJM -j -X -S\n\necho stepjobTask2\nexit 0\n```\n\n## 実行結果\n\n![img](./img/stepjob/stepjob_workflow_result.png \"stepjob_workflow_result\")  \n",
      "html": "<h1 id=\"stepjob\">Stepjob <a class=\"heading-anchor-permalink\" href=\"#stepjob\">#</a></h1>\n<p><img src=\"./img/stepjob/stepjob.png\" alt=\"img\"></p>\n<p>stepjob/stepjobTaskコンポーネントは、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のステップジョブ機能に基づいた機能です。<br>\nユーザがステップジョブを使用できるリモートマシンのアカウントを持つ場合にのみ使用できます。<br>\n本機能は、stepjobコンポーネントとstepjobコンポーネント内でのみ使用できるstepjobTaskコンポーネントを組み合わせて使用します。<br>\nTCSのステップジョブ機能に基づきstepjobTaskコンポーネントに設定されたステップナンバー、及び、依存関係式に従い、ジョブ投入されます。<br>\nステップジョブを使用することでジョブの投入時に設定した依存関係式によって実行条件や順序を指定することができ特定のジョブの実行結果に応じて自動的に処理させることができます。<br>\nステップジョブ機能の詳細に関しては、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のドキュメントをご確認ください。</p>\n<p>Stepjob/StepjobTaskコンポーネントのプロパティは以下です。</p>\n<h4 id=\"%E2%96%A0-stepjob\">■ stepjob <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0-stepjob\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>host</td>\n<td>文字列</td>\n<td>Taskを実行するhost、localhostまたは登録済のremotehostのlabelを指定する *1</td>\n</tr>\n<tr>\n<td>useJobscheduler</td>\n<td>チェックボックス</td>\n<td>true、readonly</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>文字列</td>\n<td>ジョブの投入先キューを指定する(useJobSchedulerを使用しない場合は設定不可) *2</td>\n</tr>\n<tr>\n<td>clean up flag</td>\n<td>ラジオボタン</td>\n<td>リモート環境に作成した一時ファイルの取り扱い指定フラグ</td>\n</tr>\n<tr>\n<td></td>\n<td>clean up</td>\n<td>削除する</td>\n</tr>\n<tr>\n<td></td>\n<td>keep files</td>\n<td>削除しない</td>\n</tr>\n<tr>\n<td></td>\n<td>follow parent setting</td>\n<td>親コンポーネントと同じ挙動をする</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *3</td>\n</tr>\n</tbody>\n</table>\n<p>*1 stepjobコンポーネントで使用するホストはステップジョブ機能を使用できるリモートホストを設定する必要があります。<br>\n*2 設定したキューがstepjobコンポーネント内部のstepjobTaskコンポーネントのジョブ投入時に使用されます。<br>\n*3 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h4 id=\"%E2%96%A0-stepjobtask\">■ stepjobTask <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0-stepjobtask\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>script</td>\n<td>ファイル</td>\n<td>Task内の処理を記述したスクリプトのファイルを指定 *1<br>scriptにはFilesエリアに登録されているファイルが選択可能</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル *2</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル *2</td>\n</tr>\n<tr>\n<td>useDependency</td>\n<td>チェックボックス</td>\n<td>依存関係式を使用する</td>\n</tr>\n<tr>\n<td>stepNumber</td>\n<td>入力不可</td>\n<td>ステップジョブの実行順を定める番号、結線によって自動採番する *3</td>\n</tr>\n<tr>\n<td>form</td>\n<td>文字列</td>\n<td>依存関係式入力ボックス *4</td>\n</tr>\n<tr>\n<td>clean up flag</td>\n<td>ラジオボタン</td>\n<td>リモート環境に作成した一時ファイルの取り扱い指定フラグ</td>\n</tr>\n<tr>\n<td></td>\n<td>clean up</td>\n<td>削除する</td>\n</tr>\n<tr>\n<td></td>\n<td>keep files</td>\n<td>削除しない</td>\n</tr>\n<tr>\n<td></td>\n<td>follow parent setting</td>\n<td>親コンポーネントと同じ挙動をする</td>\n</tr>\n<tr>\n<td>include</td>\n<td>ファイル</td>\n<td>リモート環境から回収してくるファイル *5</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>ファイル</td>\n<td>リモート環境から回収しないファイル *5</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *6</td>\n</tr>\n</tbody>\n</table>\n<p>*1 scriptに指定されたスクリプトの終了コードが0の場合は真、<br>\n　それ以外の場合は、偽と判定し(プロジェクトの判定はfailedとなります)後続のノードへ遷移します。<br>\n*2 stepjobTaskコンポーネントでは、親コンポーネント(stepjobコンポーネント)からのファイルの受け渡しは可能ですが、<br>\n　ステップジョブ機能の性質上、stepjobTaskコンポーネント間のファイルの受け渡しを設定することができません。<br>\n　実行するステップジョブ間でファイルの受け渡しが必要な場合は、ジョブスクリプトに処理を記述する必要があります。<br>\n*3 ステップナンバーが小さい数から順に実行されます。<br>\n*4 include, excludeともにglobパターンを指定することができます。<br>\n　includeにマッチしなおかつexcludeにマッチしないファイルを回収してくることができます。<br>\n　ただし、outputFilesに指定されたファイルは、include/excludeの指定に関わらず全て回収されます。<br>\n*5 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h2 id=\"%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E5%BC%8F%EF%BC%88form-%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%EF%BC%89\">依存関係式（form プロパティ） <a class=\"heading-anchor-permalink\" href=\"#%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E5%BC%8F%EF%BC%88form-%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%EF%BC%89\">#</a></h2>\n<p>stepjobTaskコンポーネントにおいて、実行済みstepjobTaskコンポーネントのジョブスクリプトの終了ステータス（ec, もしくはジョブの終了コードpc）によって、<br>\nその後のstepjobTaskコンポーネントの実行可否を決定する場合、依存関係式をformプロパティに設定します。</p>\n<p>依存関係式の記述方法は以下になります。</p>\n<pre><code>sd=form[:[deletetype][:stepno[:stepno[...]]]]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>式要素</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sd=</td>\n<td>接頭辞、必須</td>\n</tr>\n<tr>\n<td>form</td>\n<td>投入するサブジョブを実行するかどうかを判断する条件を示す式</td>\n</tr>\n<tr>\n<td>deletetype</td>\n<td>サブジョブを実行しない場合の詳細動作の指定</td>\n</tr>\n<tr>\n<td>stepno</td>\n<td>どのサブジョブの実行結果に対して適用するかを示すステップナンバー</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"form\">form <a class=\"heading-anchor-permalink\" href=\"#form\">#</a></h4>\n<p>formは、param(ec:依存するサブジョブのジョブスクリプトの終了コード, pc:依存するサブジョブのジョブ終了コード)と<br>\n値「==, !=, &lt;, &gt; , &lt;=, &gt;=」で指定します。</p>\n<pre><code>ex.\nec==0\n</code></pre>\n<p>条件==や!=を指定する場合、値はコンマ(,)で区切ることで複数指定できます。</p>\n<h4 id=\"deletetype\">deletetype <a class=\"heading-anchor-permalink\" href=\"#deletetype\">#</a></h4>\n<p>deletetypeは、以下の3種類指定できます。</p>\n<table>\n<thead>\n<tr>\n<th>deletetype</th>\n<th>説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>one</td>\n<td>このサブジョブのみ削除する。このサブジョブの結果に依存する後続のサブジョブは削除されない</td>\n</tr>\n<tr>\n<td>after</td>\n<td>このサブジョブ、及びそれに依存する後続のサブジョブのみ削除する</td>\n</tr>\n<tr>\n<td>all</td>\n<td>このサブジョブ、及び後続のサブジョブを全て削除する</td>\n</tr>\n</tbody>\n</table>\n<p>以下にformプロパティに設定する依存関係式の例を示します。</p>\n<pre><code>ex.ステップナンバー0のサブジョブのジョブスクリプトの終了コードが0以外の場合、このサブジョブ以降は実行しない\n\nsd=ec!=0:all:0\n</code></pre>\n<h1 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%2F%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">リモートホスト/ジョブスケジューラの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%2F%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h1>\n<h2 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">リモートホストの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>前述にもあるように、stepjob/stepjobTaskコンポーネントを使用する場合、<br>\nユーザがリモートホストのステップジョブ機能を使用する権限を有している必要があります。<br>\n権限を有している場合、リモートホスト設定画面においてstepjob/stepjobTaskコンポーネントで使用するリモートホストのstepjobプロパティを<br>\n有効にすることで使用可能になります。(加えてjobScheduler.jsonファイルにも設定が必要です。詳細後述。)</p>\n<blockquote>\n<p>リモートホスト画面<br>\n<img src=\"./img/stepjob/stepjob_remotehost.png\" alt=\"img\" title=\"remotehost\"></p>\n</blockquote>\n<h2 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">ジョブスケジューラの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>stepjob/stepjobTaskコンポーネントを使用する場合、リモートホストの設定に加えて使用するジョブスケジューラの設定も必要です。<br>\nWHEELモジュール内のapp/config/jobscheduler.jsonファイルにステップジョブ機能を有効にする以下の記述を追記してください。</p>\n<blockquote>\n<p>app/config/jobscheduler.jsonへの追記例<br>\n<img src=\"./img/stepjob/stepjob_jobscheduler.png\" alt=\"img\" title=\"remotehost\"></p>\n</blockquote>\n<h1 id=\"stepjob%2Fstepjobtask%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">stepjob/stepjobTaskコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#stepjob%2Fstepjobtask%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>サンプルでは、3つのstepjobTaskコンポーネントを使用します。<br>\n1つ目のstepjobTaskコンポーネントは、ジョブスクリプトの終了コード1となるジョブスクリプトを設定し、<br>\n2つ目のstepjobTaskコンポーネントに依存関係式「sd=ec!=0:all:0」によって<br>\n2つめ,3つ目のstepjobTaskコンポーネントが実行されないことを確認します。*</p>\n<p>*3つ目のstepjobTaskコンポーネントで投入したサブジョブは実行されませんが、<br>\nコンポーネント自体の処理は実行されるためコンポーネントのステータスはfinished(✔)となります。</p>\n<h2 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">ワークフロー構成図 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/stepjob/stepjob_workflow.png\" alt=\"img\" title=\"stepjob_workflow\"></p>\n<p>stepjobTaskコンポーネントに依存関係式が使用されている(useDependency=true)場合、<br>\n先行するコンポーネントの処理結果によって当該コンポーネント(また、それ以降のコンポーネント)<br>\nが実行される保証がないため先行コンポーネントからの結線を点線で表示します。</p>\n<h2 id=\"%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">各コンポーネントのプロパティ <a class=\"heading-anchor-permalink\" href=\"#%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h2>\n<blockquote>\n<p>stepjobTask0（stepjobTaskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>stepjobTask0</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://failed.sh\">failed.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>useDependency</td>\n<td>-</td>\n</tr>\n<tr>\n<td>stepNumber</td>\n<td>0(自動採番)</td>\n</tr>\n<tr>\n<td>form</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBfailed.sh\">・<a href=\"http://failed.sh\">failed.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBfailed.sh\">#</a></h4>\n<pre><code>#!/bin/bash\n#PJM -L &quot;node=1&quot;\n#PJM -L &quot;rscgrp=eap-small&quot;\n#PJM -L &quot;elapse=1:00:00&quot;\n#PJM -j -X -S\n\necho stepjobTask0\nexit 1\n</code></pre>\n<p>(注)上記スクリプトのリソース指定は富岳の記述形式です。他のホストで使用する場合は、使用するホストの記述方式を使用して下さい。</p>\n<blockquote>\n<p>stepjobTask1（stepjobTaskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>stepjobTask0</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://failed.sh\">failed.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>useDependency</td>\n<td>true</td>\n</tr>\n<tr>\n<td>stepNumber</td>\n<td>1(自動採番)</td>\n</tr>\n<tr>\n<td>form</td>\n<td>sd=ec!=0:all:0</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBscript1.sh\">・<a href=\"http://script1.sh\">script1.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBscript1.sh\">#</a></h4>\n<pre><code>#!/bin/bash\n#PJM -L &quot;node=1&quot;\n#PJM -L &quot;rscgrp=eap-small&quot;\n#PJM -L &quot;elapse=1:00:00&quot;\n#PJM -j -X -S\n\necho stepjobTask1\nexit 0\n</code></pre>\n<blockquote>\n<p>stepjobTask2（stepjobTaskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>stepjobTask0</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://failed.sh\">failed.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>useDependency</td>\n<td>-</td>\n</tr>\n<tr>\n<td>stepNumber</td>\n<td>2(自動採番)</td>\n</tr>\n<tr>\n<td>form</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBscript2.sh\">・<a href=\"http://script2.sh\">script2.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBscript2.sh\">#</a></h4>\n<pre><code>#!/bin/bash\n#PJM -L &quot;node=1&quot;\n#PJM -L &quot;rscgrp=eap-small&quot;\n#PJM -L &quot;elapse=1:00:00&quot;\n#PJM -j -X -S\n\necho stepjobTask2\nexit 0\n</code></pre>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/stepjob/stepjob_workflow_result.png\" alt=\"img\" title=\"stepjob_workflow_result\"></p>\n",
      "id": 10
    },
    {
      "path": "WHEEL_manual/4_component/11_BulkjobTask.md",
      "url": "WHEEL_manual/4_component/11_BulkjobTask.html",
      "content": "# BulkjobTask\n\n![img](./img/bulkjobTask/bulkjobTask.png)  \n\nbulkjobTaskコンポーネントは、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のバルクジョブ機能に基づいた機能です。  \nユーザがバルクジョブを使用できるリモートマシンのアカウントを持つ場合にのみ使用できます。  \n本機能は、bulkjobTaskコンポーネントを使用します。  \nTCSのバルクジョブ機能に基づきbulkjobTaskコンポーネントに設定されたバルク番号、インプットファイルを用いてジョブ投入されます。  \nバルクジョブは、一度のジョブの投入時で複数のサブジョブを投入することができるため、ジョブの充填率を挙げることが可能です。\nバルクジョブ機能の詳細に関しては、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のドキュメントをご確認ください。  \n\nbulkjobTaskコンポーネントのプロパティは以下です。\n\n#### ■ bulkjobTask\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| script | ファイル | Task内の処理を記述したスクリプトのファイルを指定 *1<br>scriptにはFilesエリアに登録されているファイルが選択可能 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| useJobscheduler | チェックボックス | 依存関係式を使用する |\n| manual/usePSSettingFile | ラジオボタン | バルク番号を手動入力するかパラメータセッティングファイルを使用するか |\n| start | 数値 | 開始バルク番号、manualのときのみ設定可能 |\n| end | 数値 | 終了バルク番号、manualのときのみ設定可能 |\n| parameterfile | ファイル | パラメータセッティングファイル、usePSSettingFileのときのみ設定可能 |\n| manualFinishCondition | チェックボックス | コンポーネントの終了状態判定にスクリプト(または、javascriptの式)を使用するか *2 |\n| condition | ファイル名,またはJavascriptの式 | 条件判定を行うスクリプトのファイル名、またはJavascriptの式 *3 |\n| clean up flag | ラジオボタン | リモート環境に作成した一時ファイルの取り扱い指定フラグ |\n|  | clean up | 削除する |\n|  | keep files | 削除しない |\n|  | follow parent setting | 親コンポーネントと同じ挙動をする |\n| include | ファイル | リモート環境から回収してくるファイル *4 |\n| exclude | ファイル | リモート環境から回収しないファイル *4 |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *5 |\n\n*1 scriptに指定されたスクリプトの終了コードが0の場合は真、  \n　それ以外の場合は、偽と判定し(プロジェクトの判定はfailedとなります)後続のノードへ遷移します。  \n*2 有効にしない場合、全サブジョブのジョブスクリプト終了コードが0以外の場合、偽、それ以外の場合、真と判定します。\n*3 conditionに指定されたスクリプトの終了コードが0の場合は真、それ以外の場合は、偽と判定してコンポーネントの終了状態を決定します。  \n　ただし、conditionに指定された文字列と一致するファイルが存在しなかった場合は、Javascriptの式とみなしてそのコードを実行します。  \n　この場合、実行結果がtruthyな値の場合を真、falseyな値の場合を偽とします。  \n　真のとき、コンポーネントの実行結果をfinish、偽のときfailedと判定します。  \n*4 include, excludeともにglobパターンを指定することができます。  \n　includeにマッチしなおかつexcludeにマッチしないファイルを回収してくることができます。  \n　ただし、outputFilesに指定されたファイルは、include/excludeの指定に関わらず全て回収されます。  \n*5 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n# リモートホスト/ジョブスケジューラの設定\n## リモートホストの設定\n前述にもあるように、bulkjobTaskコンポーネントを使用する場合、  \nユーザがリモートホストのバルクジョブ機能を使用する権限を有している必要があります。  \n権限を有している場合、リモートホスト設定画面においてbulkjobTaskコンポーネントで使用するリモートホストのbulkjobプロパティを  \n有効にすることで使用可能になります。(加えてjobScheduler.jsonファイルにも設定が必要です。詳細後述。)\n\n> リモートホスト画面  \n![img](./img/bulkjobTask/bulkjobTask_remotehost.png \"remotehost\")\n\n## ジョブスケジューラの設定\nbulkjobTaskコンポーネントを使用する場合、リモートホストの設定に加えて使用するジョブスケジューラの設定も必要です。    \nWHEELモジュール内のapp/config/jobscheduler.jsonファイルにステップジョブ機能を有効にする以下の記述を追記してください。  \n\n> app/config/jobscheduler.jsonへの追記例  \n![img](./img/bulkjobTask/bulkjobTask_jobscheduler.png \"remotehost\")\n\n# bulkjobTaskコンポーネントの実行終了判定\nbulkjobTaskコンポーネントでは、manualFinishConditionプロパティ有効時、コンポーネントの終了判定(成功/失敗)にスクリプトファイル(または、Javascriptの式)を使用することができます。  \nmanualFinishConditionプロパティが無効の場合は、  \n・bulkjobTaskコンポーネントで投入したサブジョブが一つ以上正常終了*している場合、finished  \n・bulkjobTaskコンポーネントで投入したサブジョブが全て異常終了している場合、failed\nと判定します。\n*ジョブスクリプトの終了ステータスで判定します。\n\nまた、bulkjobTaskコンポーネントのサブジョブの終了状態は、bulkjobTaskコンポーネントのフォルダ内に生成される  \n**subjob_status.wheel.txt**から確認できます。\n> subjob_status.wheel.txt例\n```\nRT_0=0　　　　 #ジョブスクリプトの終了ステータス(EC)\nJOBSTATUS_0=0 #ジョブの終了ステータス(PC)  \nRT_1=0  \nJOBSTATUS_1=0  \nRT_2=1  \nJOBSTATUS_2=0  \n```\n\n# bulkjobTaskコンポーネントの使用例\n\nサンプルでは、3つの使用例を記します。  \n1つ目の例では、bulkjobTaskコンポーネントで使用するインプットファイルをユーザが用意(ファイルのアップロード等により)し実行します。  \n2つ目の例では、インプットファイルをWHEELのパラメータスタディ機能を用いて用意し実行します。\n3つ目の例では、bulkjobTaskコンポーネントの実行方法は例1と同じですが、コンポーネントの終了判定にスクリプトを用います。\n\n## 使用例-1\n\n例1では、bulkjobTaskコンポーネントプロパティに以下を設定します。  \n(デフォルト値から変更しているもののみ記載)  \n> bulkjobbTask\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | bulkjobTask |\n| Script | job.sh |\n| Remotehost | fugaku |\n| Queue | eap-small |\n| BulkNumber | manual |  \n| start | 0 |\n| end | 2 |\n| Files | job.sh, 0.input, 1.input, 2.input |  \n\n#### Remotehost  \nリモートホスト設定画面で登録しているバルクジョブの実行権限をもつホスト名を指定します。  \n#### Queue  \nRemotehostで設定したホストで使用できるQueue名を選択します。  \n#### BulkNumber (ラジオボタン)\nバルク番号を手動で設定するため**manual**を選択します。  \n#### start, end\n開始バルク番号(start)と終了バルク番号(end)を設定します。この値はバルクジョブ投入コマンドに使用されます。  \n下記コマンドは、開始バルク番号(0)、終了バルク番号(2)が設定されている例です。  \n```\n$pjsub --bulk --sparam \"0-2\" ./job.sh  \n```\n#### Files job.sh\n標準出力した.inputファイルの中身を.outputファイルとして保存するスクリプトです。  \n(本来このような処理はジョブとして投入しません。あくまでもbulkjobTaskコンポーネントの使用例です。)\n```\n#!/bin/bash\n#PJM -L \"node=1\"               # ノード数\n#PJM -L \"rscgrp=eap-small\"     # リソースグループの指定\n#PJM -L \"elapse=60:00\"         # ジョブの経過時間制限値\n#PJM -S                        # 統計情報ファイル出力の指示\n\ncat ${PJM_BULKNUM}.input > ${PJM_BULKNUM}.output\nexit 0\n```\nバルクジョブでは、環境変数**PJM_BULKNUM**によりバルク番号をジョブスクリプト内で利用することができます。  \n本例では、バルク番号0,1,2を持った3つのサブジョブが投入されます。  \nバルクジョブの詳細に関しては、ジョブスケジューラのドキュメントを確認してください。\n\n## 使用例-2\n\n例2では、bulkjobTaskコンポーネントプロパティに以下を設定します。  \n例1からの変更点は、BulkNumberのみです。  \n> bulkjobbTask\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | bulkjobTask |\n| Script | job.sh |\n| Remotehost | fugaku |\n| Queue | eap-small |\n| BulkNumber | use ParameterSettingFile |  \n|  | parameterSetting.json |\n| Files | job.sh, input, parameterSetting.json |  \n\n#### BulkNumber (ラジオボタン)\nバルク番号の設定にパラメトリックスタディ機能を使用するため**use PatameterSettingFile**を選択します。  \nまた、use ParameterSettingFile有効時に設定できるセレクトボックスにWHEELに搭載されているエディタから作成した\n**parameterSetting.json**を選択します。  \nparameterSetting.jsonの作成方法は、ドキュメント [テキストエディタ画面](../3_workflow_screen/3_rapid.md) を参考にしてください。\n\n### パラメトリックスタディ機能を使用したbukjobTaskの実行\nWHEELのテキストエディタによって、10ケース実行用のparaterSetting.jsonを作成した場合、WHEELが実行するバルクジョブは以下のように投入されます。  \n```\n$pjsub --bulk --sparam \"0-9\" ./job.sh  \n```\nまた、実行時には、パラメータセットとバルク番号の関係を記した**parameterSet.whee.txt**ファイルがbulkjobTaskコンポーネント直下に生成されます。  \n#### parameterSet.wheel.txt\nWHEELテキストエディタにおいて、inputファイルのhogeをプレースホルダに設定し、min:0, max:2, step:1を設定した場合\n```\nBULKNUM_0_TARGETNUM_0_FILE=\"./input\"\nBULKNUM_0_TARGETNUM_0_KEY=\"hoge\"\nBULKNUM_0_TARGETNUM_0_VALUE=\"0\"\nBULKNUM_1_TARGETNUM_0_FILE=\"./input\"\nBULKNUM_1_TARGETNUM_0_KEY=\"hoge\"\nBULKNUM_1_TARGETNUM_0_VALUE=\"1\"\nBULKNUM_2_TARGETNUM_0_FILE=\"./input\"\nBULKNUM_2_TARGETNUM_0_KEY=\"hoge\"\nBULKNUM_2_TARGETNUM_0_VALUE=\"2\"\n```\n\n## 使用例-3\n\n例3では、例1の設定に加えてスクリプトでコンポーネントの正常/異常終了条件を設定するために**manualFinishCondition**を有効にします。  \n> bulkjobbTask\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | bulkjobTask |\n| Script | job.sh |\n| Remotehost | fugaku |\n| Queue | eap-small |\n| BulkNumber | manual |  \n| start | 0 |\n| end | 2 |\n| manualFinishCondition | true |\n| condition | condition.sh |\n| Files | job.sh, condition.sh, 0.input, 1.input, 2.input |  \n\n### conditionの設定\nmanualFinishConditionを有効にしconditionを設定することにより、ユーザは自身が用意したスクリプトの結果によって\nbulkjobTaskコンポーネントの終了ステータスを決定することができます。\nconditionには、前述しているバルクジョブのサブジョブの終了状態を記した**subjob_status.wheel.txt**を使用したスクリプトを設定することも可能です。  \n下記の例では、サブジョブのジョブスクリプトの終了ステータスが一つでも正常終了でない場合(EC=1)、コンポーネントの終了ステータスをfailedとします。  \n#### condition.sh\n```\n#!/bin/bash\nsource ./subjob?status.wheel.txt\ni=0\nwhile [ $i -lt 3 ]\ndo\n  RT=\"RT_${i}\"\n  if [ ${!RT} -eq 1 ]; then\n    echo bulknum:${i} jobscript status 1\n    exit 1\n  fi\n  i=`expr $i + 1`\ndone\nexit 0\n```\n\n## 実行結果\n\n![img](./img/bulkjobTask/bulkjobTask_result.png \"bulkjob_result\")\n",
      "html": "<h1 id=\"bulkjobtask\">BulkjobTask <a class=\"heading-anchor-permalink\" href=\"#bulkjobtask\">#</a></h1>\n<p><img src=\"./img/bulkjobTask/bulkjobTask.png\" alt=\"img\"></p>\n<p>bulkjobTaskコンポーネントは、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のバルクジョブ機能に基づいた機能です。<br>\nユーザがバルクジョブを使用できるリモートマシンのアカウントを持つ場合にのみ使用できます。<br>\n本機能は、bulkjobTaskコンポーネントを使用します。<br>\nTCSのバルクジョブ機能に基づきbulkjobTaskコンポーネントに設定されたバルク番号、インプットファイルを用いてジョブ投入されます。<br>\nバルクジョブは、一度のジョブの投入時で複数のサブジョブを投入することができるため、ジョブの充填率を挙げることが可能です。\nバルクジョブ機能の詳細に関しては、ジョブスケジューラ「FUJITSU Software Technical Computing Suite（TCS）」のドキュメントをご確認ください。</p>\n<p>bulkjobTaskコンポーネントのプロパティは以下です。</p>\n<h4 id=\"%E2%96%A0-bulkjobtask\">■ bulkjobTask <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0-bulkjobtask\">#</a></h4>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>script</td>\n<td>ファイル</td>\n<td>Task内の処理を記述したスクリプトのファイルを指定 *1<br>scriptにはFilesエリアに登録されているファイルが選択可能</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>useJobscheduler</td>\n<td>チェックボックス</td>\n<td>依存関係式を使用する</td>\n</tr>\n<tr>\n<td>manual/usePSSettingFile</td>\n<td>ラジオボタン</td>\n<td>バルク番号を手動入力するかパラメータセッティングファイルを使用するか</td>\n</tr>\n<tr>\n<td>start</td>\n<td>数値</td>\n<td>開始バルク番号、manualのときのみ設定可能</td>\n</tr>\n<tr>\n<td>end</td>\n<td>数値</td>\n<td>終了バルク番号、manualのときのみ設定可能</td>\n</tr>\n<tr>\n<td>parameterfile</td>\n<td>ファイル</td>\n<td>パラメータセッティングファイル、usePSSettingFileのときのみ設定可能</td>\n</tr>\n<tr>\n<td>manualFinishCondition</td>\n<td>チェックボックス</td>\n<td>コンポーネントの終了状態判定にスクリプト(または、javascriptの式)を使用するか *2</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>ファイル名,またはJavascriptの式</td>\n<td>条件判定を行うスクリプトのファイル名、またはJavascriptの式 *3</td>\n</tr>\n<tr>\n<td>clean up flag</td>\n<td>ラジオボタン</td>\n<td>リモート環境に作成した一時ファイルの取り扱い指定フラグ</td>\n</tr>\n<tr>\n<td></td>\n<td>clean up</td>\n<td>削除する</td>\n</tr>\n<tr>\n<td></td>\n<td>keep files</td>\n<td>削除しない</td>\n</tr>\n<tr>\n<td></td>\n<td>follow parent setting</td>\n<td>親コンポーネントと同じ挙動をする</td>\n</tr>\n<tr>\n<td>include</td>\n<td>ファイル</td>\n<td>リモート環境から回収してくるファイル *4</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>ファイル</td>\n<td>リモート環境から回収しないファイル *4</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *5</td>\n</tr>\n</tbody>\n</table>\n<p>*1 scriptに指定されたスクリプトの終了コードが0の場合は真、<br>\n　それ以外の場合は、偽と判定し(プロジェクトの判定はfailedとなります)後続のノードへ遷移します。<br>\n*2 有効にしない場合、全サブジョブのジョブスクリプト終了コードが0以外の場合、偽、それ以外の場合、真と判定します。\n*3 conditionに指定されたスクリプトの終了コードが0の場合は真、それ以外の場合は、偽と判定してコンポーネントの終了状態を決定します。<br>\n　ただし、conditionに指定された文字列と一致するファイルが存在しなかった場合は、Javascriptの式とみなしてそのコードを実行します。<br>\n　この場合、実行結果がtruthyな値の場合を真、falseyな値の場合を偽とします。<br>\n　真のとき、コンポーネントの実行結果をfinish、偽のときfailedと判定します。<br>\n*4 include, excludeともにglobパターンを指定することができます。<br>\n　includeにマッチしなおかつexcludeにマッチしないファイルを回収してくることができます。<br>\n　ただし、outputFilesに指定されたファイルは、include/excludeの指定に関わらず全て回収されます。<br>\n*5 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h1 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%2F%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">リモートホスト/ジョブスケジューラの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%2F%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h1>\n<h2 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">リモートホストの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>前述にもあるように、bulkjobTaskコンポーネントを使用する場合、<br>\nユーザがリモートホストのバルクジョブ機能を使用する権限を有している必要があります。<br>\n権限を有している場合、リモートホスト設定画面においてbulkjobTaskコンポーネントで使用するリモートホストのbulkjobプロパティを<br>\n有効にすることで使用可能になります。(加えてjobScheduler.jsonファイルにも設定が必要です。詳細後述。)</p>\n<blockquote>\n<p>リモートホスト画面<br>\n<img src=\"./img/bulkjobTask/bulkjobTask_remotehost.png\" alt=\"img\" title=\"remotehost\"></p>\n</blockquote>\n<h2 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">ジョブスケジューラの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>bulkjobTaskコンポーネントを使用する場合、リモートホストの設定に加えて使用するジョブスケジューラの設定も必要です。<br>\nWHEELモジュール内のapp/config/jobscheduler.jsonファイルにステップジョブ機能を有効にする以下の記述を追記してください。</p>\n<blockquote>\n<p>app/config/jobscheduler.jsonへの追記例<br>\n<img src=\"./img/bulkjobTask/bulkjobTask_jobscheduler.png\" alt=\"img\" title=\"remotehost\"></p>\n</blockquote>\n<h1 id=\"bulkjobtask%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%82%E4%BA%86%E5%88%A4%E5%AE%9A\">bulkjobTaskコンポーネントの実行終了判定 <a class=\"heading-anchor-permalink\" href=\"#bulkjobtask%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%B5%82%E4%BA%86%E5%88%A4%E5%AE%9A\">#</a></h1>\n<p>bulkjobTaskコンポーネントでは、manualFinishConditionプロパティ有効時、コンポーネントの終了判定(成功/失敗)にスクリプトファイル(または、Javascriptの式)を使用することができます。<br>\nmanualFinishConditionプロパティが無効の場合は、<br>\n・bulkjobTaskコンポーネントで投入したサブジョブが一つ以上正常終了*している場合、finished<br>\n・bulkjobTaskコンポーネントで投入したサブジョブが全て異常終了している場合、failed\nと判定します。\n*ジョブスクリプトの終了ステータスで判定します。</p>\n<p>また、bulkjobTaskコンポーネントのサブジョブの終了状態は、bulkjobTaskコンポーネントのフォルダ内に生成される<br>\n<strong>subjob_status.wheel.txt</strong>から確認できます。</p>\n<blockquote>\n<p>subjob_status.wheel.txt例</p>\n</blockquote>\n<pre><code>RT_0=0　　　　 #ジョブスクリプトの終了ステータス(EC)\nJOBSTATUS_0=0 #ジョブの終了ステータス(PC)  \nRT_1=0  \nJOBSTATUS_1=0  \nRT_2=1  \nJOBSTATUS_2=0  \n</code></pre>\n<h1 id=\"bulkjobtask%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">bulkjobTaskコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#bulkjobtask%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>サンプルでは、3つの使用例を記します。<br>\n1つ目の例では、bulkjobTaskコンポーネントで使用するインプットファイルをユーザが用意(ファイルのアップロード等により)し実行します。<br>\n2つ目の例では、インプットファイルをWHEELのパラメータスタディ機能を用いて用意し実行します。\n3つ目の例では、bulkjobTaskコンポーネントの実行方法は例1と同じですが、コンポーネントの終了判定にスクリプトを用います。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E4%BE%8B-1\">使用例-1 <a class=\"heading-anchor-permalink\" href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-1\">#</a></h2>\n<p>例1では、bulkjobTaskコンポーネントプロパティに以下を設定します。<br>\n(デフォルト値から変更しているもののみ記載)</p>\n<blockquote>\n<p>bulkjobbTask</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>bulkjobTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://job.sh\">job.sh</a></td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>fugaku</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>eap-small</td>\n</tr>\n<tr>\n<td>BulkNumber</td>\n<td>manual</td>\n</tr>\n<tr>\n<td>start</td>\n<td>0</td>\n</tr>\n<tr>\n<td>end</td>\n<td>2</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://job.sh\">job.sh</a>, 0.input, 1.input, 2.input</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"remotehost\">Remotehost <a class=\"heading-anchor-permalink\" href=\"#remotehost\">#</a></h4>\n<p>リモートホスト設定画面で登録しているバルクジョブの実行権限をもつホスト名を指定します。</p>\n<h4 id=\"queue\">Queue <a class=\"heading-anchor-permalink\" href=\"#queue\">#</a></h4>\n<p>Remotehostで設定したホストで使用できるQueue名を選択します。</p>\n<h4 id=\"bulknumber-(%E3%83%A9%E3%82%B8%E3%82%AA%E3%83%9C%E3%82%BF%E3%83%B3)\">BulkNumber (ラジオボタン) <a class=\"heading-anchor-permalink\" href=\"#bulknumber-(%E3%83%A9%E3%82%B8%E3%82%AA%E3%83%9C%E3%82%BF%E3%83%B3)\">#</a></h4>\n<p>バルク番号を手動で設定するため<strong>manual</strong>を選択します。</p>\n<h4 id=\"start%2C-end\">start, end <a class=\"heading-anchor-permalink\" href=\"#start%2C-end\">#</a></h4>\n<p>開始バルク番号(start)と終了バルク番号(end)を設定します。この値はバルクジョブ投入コマンドに使用されます。<br>\n下記コマンドは、開始バルク番号(0)、終了バルク番号(2)が設定されている例です。</p>\n<pre><code>$pjsub --bulk --sparam &quot;0-2&quot; ./job.sh  \n</code></pre>\n<h4 id=\"files-job.sh\">Files <a href=\"http://job.sh\">job.sh</a> <a class=\"heading-anchor-permalink\" href=\"#files-job.sh\">#</a></h4>\n<p>標準出力した.inputファイルの中身を.outputファイルとして保存するスクリプトです。<br>\n(本来このような処理はジョブとして投入しません。あくまでもbulkjobTaskコンポーネントの使用例です。)</p>\n<pre><code>#!/bin/bash\n#PJM -L &quot;node=1&quot;               # ノード数\n#PJM -L &quot;rscgrp=eap-small&quot;     # リソースグループの指定\n#PJM -L &quot;elapse=60:00&quot;         # ジョブの経過時間制限値\n#PJM -S                        # 統計情報ファイル出力の指示\n\ncat ${PJM_BULKNUM}.input &gt; ${PJM_BULKNUM}.output\nexit 0\n</code></pre>\n<p>バルクジョブでは、環境変数<strong>PJM_BULKNUM</strong>によりバルク番号をジョブスクリプト内で利用することができます。<br>\n本例では、バルク番号0,1,2を持った3つのサブジョブが投入されます。<br>\nバルクジョブの詳細に関しては、ジョブスケジューラのドキュメントを確認してください。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E4%BE%8B-2\">使用例-2 <a class=\"heading-anchor-permalink\" href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-2\">#</a></h2>\n<p>例2では、bulkjobTaskコンポーネントプロパティに以下を設定します。<br>\n例1からの変更点は、BulkNumberのみです。</p>\n<blockquote>\n<p>bulkjobbTask</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>bulkjobTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://job.sh\">job.sh</a></td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>fugaku</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>eap-small</td>\n</tr>\n<tr>\n<td>BulkNumber</td>\n<td>use ParameterSettingFile</td>\n</tr>\n<tr>\n<td></td>\n<td>parameterSetting.json</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://job.sh\">job.sh</a>, input, parameterSetting.json</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"bulknumber-(%E3%83%A9%E3%82%B8%E3%82%AA%E3%83%9C%E3%82%BF%E3%83%B3)-2\">BulkNumber (ラジオボタン) <a class=\"heading-anchor-permalink\" href=\"#bulknumber-(%E3%83%A9%E3%82%B8%E3%82%AA%E3%83%9C%E3%82%BF%E3%83%B3)-2\">#</a></h4>\n<p>バルク番号の設定にパラメトリックスタディ機能を使用するため<strong>use PatameterSettingFile</strong>を選択します。<br>\nまた、use ParameterSettingFile有効時に設定できるセレクトボックスにWHEELに搭載されているエディタから作成した\n<strong>parameterSetting.json</strong>を選択します。<br>\nparameterSetting.jsonの作成方法は、ドキュメント <a href=\"../3_workflow_screen/3_rapid.html\">テキストエディタ画面</a> を参考にしてください。</p>\n<h3 id=\"%E3%83%91%E3%83%A9%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9Fbukjobtask%E3%81%AE%E5%AE%9F%E8%A1%8C\">パラメトリックスタディ機能を使用したbukjobTaskの実行 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9Fbukjobtask%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h3>\n<p>WHEELのテキストエディタによって、10ケース実行用のparaterSetting.jsonを作成した場合、WHEELが実行するバルクジョブは以下のように投入されます。</p>\n<pre><code>$pjsub --bulk --sparam &quot;0-9&quot; ./job.sh  \n</code></pre>\n<p>また、実行時には、パラメータセットとバルク番号の関係を記した<strong>parameterSet.whee.txt</strong>ファイルがbulkjobTaskコンポーネント直下に生成されます。</p>\n<h4 id=\"parameterset.wheel.txt\">parameterSet.wheel.txt <a class=\"heading-anchor-permalink\" href=\"#parameterset.wheel.txt\">#</a></h4>\n<p>WHEELテキストエディタにおいて、inputファイルのhogeをプレースホルダに設定し、min:0, max:2, step:1を設定した場合</p>\n<pre><code>BULKNUM_0_TARGETNUM_0_FILE=&quot;./input&quot;\nBULKNUM_0_TARGETNUM_0_KEY=&quot;hoge&quot;\nBULKNUM_0_TARGETNUM_0_VALUE=&quot;0&quot;\nBULKNUM_1_TARGETNUM_0_FILE=&quot;./input&quot;\nBULKNUM_1_TARGETNUM_0_KEY=&quot;hoge&quot;\nBULKNUM_1_TARGETNUM_0_VALUE=&quot;1&quot;\nBULKNUM_2_TARGETNUM_0_FILE=&quot;./input&quot;\nBULKNUM_2_TARGETNUM_0_KEY=&quot;hoge&quot;\nBULKNUM_2_TARGETNUM_0_VALUE=&quot;2&quot;\n</code></pre>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E4%BE%8B-3\">使用例-3 <a class=\"heading-anchor-permalink\" href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B-3\">#</a></h2>\n<p>例3では、例1の設定に加えてスクリプトでコンポーネントの正常/異常終了条件を設定するために<strong>manualFinishCondition</strong>を有効にします。</p>\n<blockquote>\n<p>bulkjobbTask</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>bulkjobTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://job.sh\">job.sh</a></td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>fugaku</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>eap-small</td>\n</tr>\n<tr>\n<td>BulkNumber</td>\n<td>manual</td>\n</tr>\n<tr>\n<td>start</td>\n<td>0</td>\n</tr>\n<tr>\n<td>end</td>\n<td>2</td>\n</tr>\n<tr>\n<td>manualFinishCondition</td>\n<td>true</td>\n</tr>\n<tr>\n<td>condition</td>\n<td><a href=\"http://condition.sh\">condition.sh</a></td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://job.sh\">job.sh</a>, <a href=\"http://condition.sh\">condition.sh</a>, 0.input, 1.input, 2.input</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"condition%E3%81%AE%E8%A8%AD%E5%AE%9A\">conditionの設定 <a class=\"heading-anchor-permalink\" href=\"#condition%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>manualFinishConditionを有効にしconditionを設定することにより、ユーザは自身が用意したスクリプトの結果によって\nbulkjobTaskコンポーネントの終了ステータスを決定することができます。\nconditionには、前述しているバルクジョブのサブジョブの終了状態を記した<strong>subjob_status.wheel.txt</strong>を使用したスクリプトを設定することも可能です。<br>\n下記の例では、サブジョブのジョブスクリプトの終了ステータスが一つでも正常終了でない場合(EC=1)、コンポーネントの終了ステータスをfailedとします。</p>\n<h4 id=\"condition.sh\"><a href=\"http://condition.sh\">condition.sh</a> <a class=\"heading-anchor-permalink\" href=\"#condition.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nsource ./subjob?status.wheel.txt\ni=0\nwhile [ $i -lt 3 ]\ndo\n  RT=&quot;RT_${i}&quot;\n  if [ ${!RT} -eq 1 ]; then\n    echo bulknum:${i} jobscript status 1\n    exit 1\n  fi\n  i=`expr $i + 1`\ndone\nexit 0\n</code></pre>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/bulkjobTask/bulkjobTask_result.png\" alt=\"img\" title=\"bulkjob_result\"></p>\n",
      "id": 11
    },
    {
      "path": "WHEEL_manual/4_component/1_Task.md",
      "url": "WHEEL_manual/4_component/1_Task.html",
      "content": "# Task\n\n![img](./img/task/task.png \"task\")  \n\nTaskコンポーネントは、WHEELの用意するコンポーネントの中で最も基本的かつ重要なコンポーネントです。  \n[ script ]プロパティに設定されたスクリプトファイルを実行環境(host/useJobScheduler/queueプロパティ)の設定に応じて実行します。  \n\nTaskコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| script | ファイル | Task内の処理を記述したスクリプトのファイルを指定 *1<br>scriptにはFilesエリアに登録されているファイルが選択可能 | \n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| host | 文字列 | Taskを実行するhost、localhostまたは登録済のremotehostのlabelを指定する *2|\n| useJobScheduler | チェックボックス | scriptをジョブスケジューラ経由で実行するか直接実行するかのフラグ *2|\n| queue | 文字列 | ジョブの投入先キューを指定する(useJobSchedulerを使用しない場合は設定不可) *2|\n| submit command | 選択したJobSchedulerに設定されているsubmit commandを表示する。(読み取り専用) |\n| submit option | 入力したoptionがジョブ投入時にsubmit commandに追加される。 |\n| clean up flag | ラジオボタン | リモート環境に作成した一時ファイルの取り扱い指定フラグ |\n|  | clean up | 削除する |\n|  | keep files | 削除しない |\n|  | follow parent setting | 親コンポーネントと同じ挙動をする |\n| include | ファイル | リモート環境から回収してくるファイル *3 |\n| exclude | ファイル | リモート環境から回収しないファイル *3 |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *4 |\n\n*1 scriptに指定されたスクリプトの終了コードが0の場合は真、  \n　それ以外の場合は、偽と判定し(プロジェクトの判定はfailedとなります)後続のノードへ遷移します。  \n*2 リモートホスト使用時のみ有効です。また、queueプロパティはuseJobScheduler有効時のみ設定可能です。  \n*3 include, excludeともにglobパターンを指定することができます。  \n　includeにマッチしなおかつexcludeにマッチしないファイルを回収してくることができます。  \n　ただし、outputFilesに指定されたファイルは、include/excludeの指定に関わらず全て回収されます。  \n*4 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n## Taskコンポーネントのタイプ\n\nTaskコンポーネントは、実行マシン、ジョブスケジューラの使用/不使用によって、4つのタイプに分類されます。\n\n1. ローカルタスク  \nWHEELが動作するマシン上で実行するTaskコンポーネント\n1. ローカルジョブタスク  \nWHEELが動作するマシン上でジョブスケジューラを使用し実行するコンポーネント *\n1. リモートタスク  \nリモートマシン上で実行するタスクコンポーネント\n1. リモートジョブタスク  \nリモートマシン上でジョブスケジューラを使用し実行するコンポーネント\n\n*現在のWHEELバージョン(ver.1.2.3)では対応していません。\n\n## Taskコンポーネントの使用方法\n\nTaskコンポーネントの使用方法を説明します。  \n\n### scriptプロパティの設定\n\nscriptプロパティはタスクのタイプによらず設定する必要があります。  \nセレクトボックスに表示されるファイルリストの中から使用するスクリプトファイルを選択します。  \nファイルリストは、プロパティ画面下部Filesエリアに作成、または、アップロードしたファイルから構成されます。\n\n#### スクリプトファイルの設定\n\n![img](./img/task/task_script.png \"script\")  \n\n#### Filesエリア\n\n![img](./img/task/task_files.png \"Filesエリア\")  \n\n#### ファイルの編集\n\nコンポーネント内で使用するファイル/ディレクトリは、Filesエリアより生成することができます。  \nまた、ファイルはファイル編集用ボタンで起動される画面で編集可能です。\n\n![img](./img/task/task_buttons.png \"ファイル編集ボタン\")  \n\n#### ファイル編集画面  \n\n![img](./img/task/task_editor.png \"ファイル編集画面\")  \n\n1. グラフビュー画面遷移ボタン  \nファイル編集画面を終了し、グラフビュー画面に遷移します\n1. 閉じるボタン  \nファイルを閉じます。保存処理も同時に実行されます\n1. 全ファイル保存ボタン  \nタブで開いている全ファイルを保存します\n1. パラメータセッティングファイル編集画面  \nParameterStudyコンポーネントで使用するパラメータセッティングファイルの編集に使用します\n\n#### スクリプトファイルの注意事項\n\nTaskコンポーネントの実行成功/失敗は、scriptファイルの終了コードで判断されます。  \nそのため、Taskコンポーネントの誤作動を防ぐためにスクリプトファイルには明示的に終了コードを記載することを推奨します。\n\n```\n#!/bin/bash\necho execute task0\nexit 0 ← 明示的に「exit」することを推奨します\n```\n\n### コンポーネント間のファイルの受け渡し\n\ninputFiles/outputFilesについて説明します。  \ninputFilesは、先行コンポーネントのoutputFilesより接続されたファイルをinputFilesに設定した名称でシンボリックリンクを作成します。*1  \ninputFilesは、Taskコンポーネントの処理開始時に、outputFilesはTaskコンポーネントの処理終了時にファイルの存在有無を確認するため、  \ninputFiles/outputFilesに設定されたファイルが存在しない場合、エラーとなります。\n\n*1 inputFiles/outputFilesに設定できる文字列の詳細は、[コンポーネント設計書](./10_component_design.md)を参考ください。\n\n![img](./img/task/task_file_connect.png \"ファイルの受け渡し\")  \n\ntask0の処理終了時にtask0にoutput.txtが存在する場合、task1にiuput.txtとしてシンボリックリンクを作成します。\n\n### リモートホストの設定\n\nリモートタスク/リモートジョブタスクを使用する場合、使用するリモートホストをRemotehostプロパティに設定します。  \nRemotehostプロパティのセレクトボックスには、リモートホスト登録画面にて登録したホストのラベルが一覧として表示ます。  \n(参考：[リモートホスト登録画面](../2_remotehost_screen/remotehost.md))\n\n#### Remotehostプロパティ\n\n![img](./img/task/task_remotehost.png \"リモートホストの設定\")  \n\nRemotehostプロパティには、リモートホスト画面で登録したホスト名が表示される。（下図参考）\n\n#### リモートホスト画面\n\n![img](./img/task/task_remotehost_screen.png \"リモートホスト画面\")  \n\n### ジョブスケジューラ/キューの設定\n\nリモートジョブタスクを使用する場合、useJobSchedulerプロパティを有効にします。  \nまた、useJobSchedulerプロパティを有効にした場合にのみQueueプロパティにてキューの設定が可能です。  \nQueueプロパティのセレクトボックスには、Remotehostプロパティで選択したホストに設定したQueueの値が一覧として表示されます。\n(参考：[リモートホスト登録画面](../2_remotehost_screen/remotehost.md))\n\n#### Queueプロパティ\n\n![img](./img/task/task_queue.png \"キューの設定\")  \n\nRemotehostプロパティで設定した「hostA」のQueueがリストとして表示される（下図参考）\n\n#### リモートホスト(hostA)の設定値\n\n![img](./img/task/task_queue2.png \"hostAの設定値\")\n\n#### submit optionプロパティ\n\n![img](./img/task/task_submitOption.png \"オプションの設定\")  \n\nsubmit optionに設定したオプションが追加されたcommandがジョブスケジューラに投入される。\n\n# プロジェクトの実行方法\n\nここでは、例として、ひとつのTaskコンポーネントの実行方法を紹介します。  \nTaskコンポーネントは、[ script ]プロパティに設定されたHelloWorld.shを実行し、  \nログエリア[ Stdout ]にメッセージ「Hello World!」を出力します。  \n手順は以下です。  \n\n1. グラフビュー画面左部 Component Libraryより、Taskコンポーネントをグラフビュー画面に配置する\n1. Taskコンポーネントをクリックし、プロパティ画面を表示する\n1. プロパティ画面下部[ Files ]より、メッセージ表示（Stdout）するスクリプトをTaskコンポーネントディレクトリへアップロードする\n1. プロパティ[ script ]にアップロードしたファイルのファイル名「HelloWorld.sh」を指定する\n\n![img](./img/task/task_exe_1.png \"task_exe_1\")\n\n> sampleTask(taskコンポーネント)\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleTask |\n| Script | HelloWorld.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | HelloWorld.sh |  \n\nここで設定したスクリプト「HelloWorld.sh」の中身は以下です。\n\n#### ・HelloWorld.sh\n\n```\n#!/bin/bash\necho Hello World!\nexit 0\n```\n\nscriptプロパティに任意のスクリプトを設定することで任意の処理をWHEEL上で実行することができます。\n\n## プロジェクトを保存する\n\nファイルの設定が完了後、プロジェクトを保存します。  \n保存前後でワークフロー画面上部[ Create date ]が更新されることを確認します。\n\n![img](./img/task/before_save.png \"before_save\")  \n![img](./img/task/after_save.png \"after_save\")  \n\n## プロジェクトの実行と実行状況の確認\n\nプロジェクトを実行します。  \nプロジェクトの実行は、ワークフロー画面上部[ Run ]ボタンより開始します。\n\n#### 1. 実行\n\n実行ボタン押下後、実行の状況の確認はグラフビュー画面、リストビュー画面のいずれかから確認することができます。\n\n![img](./img/task/run.png \"run\")  \n\n#### 2. グラフビュー画面\n\nグラフビュー画面では、ワークフロー画面上部よりプロジェクト全体の進行状況とコンポーネント右上のアイコンにより実行状況を確認できます。  \n\n![img](./img/task/running_graghview.png \"runnig_graghview\")  \n\n#### 3. リストビュー画面\n\nリストビュー画面では、各コンポーネントの進行状況がグラフビュー画面より詳細に表示されます。\n\n![img](./img/task/running_ListView.png \"running_listview\")  \n\n#### 4. 実行完了\n\n実行が完了したとき、状態は[ finished ]へと変化し、  \nまた、ログエリア[ Stdout ]に「Hello World!」と表示されます。  \n\n![img](./img/task/finish.png \"finish\")  \n\n以上が基本的なコンポーネント設定、プロジェクトの実行手順となります。  \nWHEELでは、Taskコンポーネントに加えて以降紹介するコンポーネントを組み合わせることにより、  \n複雑なワークフローを視覚的・直感的に理解しやすく構成することができます。\n",
      "html": "<h1 id=\"task\">Task <a class=\"heading-anchor-permalink\" href=\"#task\">#</a></h1>\n<p><img src=\"./img/task/task.png\" alt=\"img\" title=\"task\"></p>\n<p>Taskコンポーネントは、WHEELの用意するコンポーネントの中で最も基本的かつ重要なコンポーネントです。<br>\n[ script ]プロパティに設定されたスクリプトファイルを実行環境(host/useJobScheduler/queueプロパティ)の設定に応じて実行します。</p>\n<p>Taskコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>script</td>\n<td>ファイル</td>\n<td>Task内の処理を記述したスクリプトのファイルを指定 *1<br>scriptにはFilesエリアに登録されているファイルが選択可能</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>host</td>\n<td>文字列</td>\n<td>Taskを実行するhost、localhostまたは登録済のremotehostのlabelを指定する *2</td>\n</tr>\n<tr>\n<td>useJobScheduler</td>\n<td>チェックボックス</td>\n<td>scriptをジョブスケジューラ経由で実行するか直接実行するかのフラグ *2</td>\n</tr>\n<tr>\n<td>queue</td>\n<td>文字列</td>\n<td>ジョブの投入先キューを指定する(useJobSchedulerを使用しない場合は設定不可) *2</td>\n</tr>\n<tr>\n<td>submit command</td>\n<td>選択したJobSchedulerに設定されているsubmit commandを表示する。(読み取り専用)</td>\n<td></td>\n</tr>\n<tr>\n<td>submit option</td>\n<td>入力したoptionがジョブ投入時にsubmit commandに追加される。</td>\n<td></td>\n</tr>\n<tr>\n<td>clean up flag</td>\n<td>ラジオボタン</td>\n<td>リモート環境に作成した一時ファイルの取り扱い指定フラグ</td>\n</tr>\n<tr>\n<td></td>\n<td>clean up</td>\n<td>削除する</td>\n</tr>\n<tr>\n<td></td>\n<td>keep files</td>\n<td>削除しない</td>\n</tr>\n<tr>\n<td></td>\n<td>follow parent setting</td>\n<td>親コンポーネントと同じ挙動をする</td>\n</tr>\n<tr>\n<td>include</td>\n<td>ファイル</td>\n<td>リモート環境から回収してくるファイル *3</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>ファイル</td>\n<td>リモート環境から回収しないファイル *3</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *4</td>\n</tr>\n</tbody>\n</table>\n<p>*1 scriptに指定されたスクリプトの終了コードが0の場合は真、<br>\n　それ以外の場合は、偽と判定し(プロジェクトの判定はfailedとなります)後続のノードへ遷移します。<br>\n*2 リモートホスト使用時のみ有効です。また、queueプロパティはuseJobScheduler有効時のみ設定可能です。<br>\n*3 include, excludeともにglobパターンを指定することができます。<br>\n　includeにマッチしなおかつexcludeにマッチしないファイルを回収してくることができます。<br>\n　ただし、outputFilesに指定されたファイルは、include/excludeの指定に関わらず全て回収されます。<br>\n*4 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h2 id=\"task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97\">Taskコンポーネントのタイプ <a class=\"heading-anchor-permalink\" href=\"#task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97\">#</a></h2>\n<p>Taskコンポーネントは、実行マシン、ジョブスケジューラの使用/不使用によって、4つのタイプに分類されます。</p>\n<ol>\n<li>ローカルタスク<br>\nWHEELが動作するマシン上で実行するTaskコンポーネント</li>\n<li>ローカルジョブタスク<br>\nWHEELが動作するマシン上でジョブスケジューラを使用し実行するコンポーネント *</li>\n<li>リモートタスク<br>\nリモートマシン上で実行するタスクコンポーネント</li>\n<li>リモートジョブタスク<br>\nリモートマシン上でジョブスケジューラを使用し実行するコンポーネント</li>\n</ol>\n<p>*現在のWHEELバージョン(ver.1.2.3)では対応していません。</p>\n<h2 id=\"task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">Taskコンポーネントの使用方法 <a class=\"heading-anchor-permalink\" href=\"#task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">#</a></h2>\n<p>Taskコンポーネントの使用方法を説明します。</p>\n<h3 id=\"script%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E8%A8%AD%E5%AE%9A\">scriptプロパティの設定 <a class=\"heading-anchor-permalink\" href=\"#script%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>scriptプロパティはタスクのタイプによらず設定する必要があります。<br>\nセレクトボックスに表示されるファイルリストの中から使用するスクリプトファイルを選択します。<br>\nファイルリストは、プロパティ画面下部Filesエリアに作成、または、アップロードしたファイルから構成されます。</p>\n<h4 id=\"%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\">スクリプトファイルの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h4>\n<p><img src=\"./img/task/task_script.png\" alt=\"img\" title=\"script\"></p>\n<h4 id=\"files%E3%82%A8%E3%83%AA%E3%82%A2\">Filesエリア <a class=\"heading-anchor-permalink\" href=\"#files%E3%82%A8%E3%83%AA%E3%82%A2\">#</a></h4>\n<p><img src=\"./img/task/task_files.png\" alt=\"img\" title=\"Filesエリア\"></p>\n<h4 id=\"%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\">ファイルの編集 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E7%B7%A8%E9%9B%86\">#</a></h4>\n<p>コンポーネント内で使用するファイル/ディレクトリは、Filesエリアより生成することができます。<br>\nまた、ファイルはファイル編集用ボタンで起動される画面で編集可能です。</p>\n<p><img src=\"./img/task/task_buttons.png\" alt=\"img\" title=\"ファイル編集ボタン\"></p>\n<h4 id=\"%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2\">ファイル編集画面 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2\">#</a></h4>\n<p><img src=\"./img/task/task_editor.png\" alt=\"img\" title=\"ファイル編集画面\"></p>\n<ol>\n<li>グラフビュー画面遷移ボタン<br>\nファイル編集画面を終了し、グラフビュー画面に遷移します</li>\n<li>閉じるボタン<br>\nファイルを閉じます。保存処理も同時に実行されます</li>\n<li>全ファイル保存ボタン<br>\nタブで開いている全ファイルを保存します</li>\n<li>パラメータセッティングファイル編集画面<br>\nParameterStudyコンポーネントで使用するパラメータセッティングファイルの編集に使用します</li>\n</ol>\n<h4 id=\"%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\">スクリプトファイルの注意事項 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85\">#</a></h4>\n<p>Taskコンポーネントの実行成功/失敗は、scriptファイルの終了コードで判断されます。<br>\nそのため、Taskコンポーネントの誤作動を防ぐためにスクリプトファイルには明示的に終了コードを記載することを推奨します。</p>\n<pre><code>#!/bin/bash\necho execute task0\nexit 0 ← 明示的に「exit」することを推奨します\n</code></pre>\n<h3 id=\"%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%97%E3%81%91%E6%B8%A1%E3%81%97\">コンポーネント間のファイルの受け渡し <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%8F%97%E3%81%91%E6%B8%A1%E3%81%97\">#</a></h3>\n<p>inputFiles/outputFilesについて説明します。<br>\ninputFilesは、先行コンポーネントのoutputFilesより接続されたファイルをinputFilesに設定した名称でシンボリックリンクを作成します。*1<br>\ninputFilesは、Taskコンポーネントの処理開始時に、outputFilesはTaskコンポーネントの処理終了時にファイルの存在有無を確認するため、<br>\ninputFiles/outputFilesに設定されたファイルが存在しない場合、エラーとなります。</p>\n<p>*1 inputFiles/outputFilesに設定できる文字列の詳細は、<a href=\"./10_component_design.html\">コンポーネント設計書</a>を参考ください。</p>\n<p><img src=\"./img/task/task_file_connect.png\" alt=\"img\" title=\"ファイルの受け渡し\"></p>\n<p>task0の処理終了時にtask0にoutput.txtが存在する場合、task1にiuput.txtとしてシンボリックリンクを作成します。</p>\n<h3 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">リモートホストの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>リモートタスク/リモートジョブタスクを使用する場合、使用するリモートホストをRemotehostプロパティに設定します。<br>\nRemotehostプロパティのセレクトボックスには、リモートホスト登録画面にて登録したホストのラベルが一覧として表示ます。<br>\n(参考：<a href=\"../2_remotehost_screen/remotehost.html\">リモートホスト登録画面</a>)</p>\n<h4 id=\"remotehost%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">Remotehostプロパティ <a class=\"heading-anchor-permalink\" href=\"#remotehost%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h4>\n<p><img src=\"./img/task/task_remotehost.png\" alt=\"img\" title=\"リモートホストの設定\"></p>\n<p>Remotehostプロパティには、リモートホスト画面で登録したホスト名が表示される。（下図参考）</p>\n<h4 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%94%BB%E9%9D%A2\">リモートホスト画面 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%94%BB%E9%9D%A2\">#</a></h4>\n<p><img src=\"./img/task/task_remotehost_screen.png\" alt=\"img\" title=\"リモートホスト画面\"></p>\n<h3 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%2F%E3%82%AD%E3%83%A5%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A\">ジョブスケジューラ/キューの設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%2F%E3%82%AD%E3%83%A5%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>リモートジョブタスクを使用する場合、useJobSchedulerプロパティを有効にします。<br>\nまた、useJobSchedulerプロパティを有効にした場合にのみQueueプロパティにてキューの設定が可能です。<br>\nQueueプロパティのセレクトボックスには、Remotehostプロパティで選択したホストに設定したQueueの値が一覧として表示されます。\n(参考：<a href=\"../2_remotehost_screen/remotehost.html\">リモートホスト登録画面</a>)</p>\n<h4 id=\"queue%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">Queueプロパティ <a class=\"heading-anchor-permalink\" href=\"#queue%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h4>\n<p><img src=\"./img/task/task_queue.png\" alt=\"img\" title=\"キューの設定\"></p>\n<p>Remotehostプロパティで設定した「hostA」のQueueがリストとして表示される（下図参考）</p>\n<h4 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88(hosta)%E3%81%AE%E8%A8%AD%E5%AE%9A%E5%80%A4\">リモートホスト(hostA)の設定値 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88(hosta)%E3%81%AE%E8%A8%AD%E5%AE%9A%E5%80%A4\">#</a></h4>\n<p><img src=\"./img/task/task_queue2.png\" alt=\"img\" title=\"hostAの設定値\"></p>\n<h4 id=\"submit-option%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">submit optionプロパティ <a class=\"heading-anchor-permalink\" href=\"#submit-option%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h4>\n<p><img src=\"./img/task/task_submitOption.png\" alt=\"img\" title=\"オプションの設定\"></p>\n<p>submit optionに設定したオプションが追加されたcommandがジョブスケジューラに投入される。</p>\n<h1 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%96%B9%E6%B3%95\">プロジェクトの実行方法 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%96%B9%E6%B3%95\">#</a></h1>\n<p>ここでは、例として、ひとつのTaskコンポーネントの実行方法を紹介します。<br>\nTaskコンポーネントは、[ script ]プロパティに設定されたHelloWorld.shを実行し、<br>\nログエリア[ Stdout ]にメッセージ「Hello World!」を出力します。<br>\n手順は以下です。</p>\n<ol>\n<li>グラフビュー画面左部 Component Libraryより、Taskコンポーネントをグラフビュー画面に配置する</li>\n<li>Taskコンポーネントをクリックし、プロパティ画面を表示する</li>\n<li>プロパティ画面下部[ Files ]より、メッセージ表示（Stdout）するスクリプトをTaskコンポーネントディレクトリへアップロードする</li>\n<li>プロパティ[ script ]にアップロードしたファイルのファイル名「<a href=\"http://HelloWorld.sh\">HelloWorld.sh</a>」を指定する</li>\n</ol>\n<p><img src=\"./img/task/task_exe_1.png\" alt=\"img\" title=\"task_exe_1\"></p>\n<blockquote>\n<p>sampleTask(taskコンポーネント)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://HelloWorld.sh\">HelloWorld.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://HelloWorld.sh\">HelloWorld.sh</a></td>\n</tr>\n</tbody>\n</table>\n<p>ここで設定したスクリプト「<a href=\"http://HelloWorld.sh\">HelloWorld.sh</a>」の中身は以下です。</p>\n<h4 id=\"%E3%83%BBhelloworld.sh\">・<a href=\"http://HelloWorld.sh\">HelloWorld.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBhelloworld.sh\">#</a></h4>\n<pre><code>#!/bin/bash\necho Hello World!\nexit 0\n</code></pre>\n<p>scriptプロパティに任意のスクリプトを設定することで任意の処理をWHEEL上で実行することができます。</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B\">プロジェクトを保存する <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ファイルの設定が完了後、プロジェクトを保存します。<br>\n保存前後でワークフロー画面上部[ Create date ]が更新されることを確認します。</p>\n<p><img src=\"./img/task/before_save.png\" alt=\"img\" title=\"before_save\"><br>\n<img src=\"./img/task/after_save.png\" alt=\"img\" title=\"after_save\"></p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%81%A8%E5%AE%9F%E8%A1%8C%E7%8A%B6%E6%B3%81%E3%81%AE%E7%A2%BA%E8%AA%8D\">プロジェクトの実行と実行状況の確認 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%81%A8%E5%AE%9F%E8%A1%8C%E7%8A%B6%E6%B3%81%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>プロジェクトを実行します。<br>\nプロジェクトの実行は、ワークフロー画面上部[ Run ]ボタンより開始します。</p>\n<h4 id=\"1.-%E5%AE%9F%E8%A1%8C\">1. 実行 <a class=\"heading-anchor-permalink\" href=\"#1.-%E5%AE%9F%E8%A1%8C\">#</a></h4>\n<p>実行ボタン押下後、実行の状況の確認はグラフビュー画面、リストビュー画面のいずれかから確認することができます。</p>\n<p><img src=\"./img/task/run.png\" alt=\"img\" title=\"run\"></p>\n<h4 id=\"2.-%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">2. グラフビュー画面 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">#</a></h4>\n<p>グラフビュー画面では、ワークフロー画面上部よりプロジェクト全体の進行状況とコンポーネント右上のアイコンにより実行状況を確認できます。</p>\n<p><img src=\"./img/task/running_graghview.png\" alt=\"img\" title=\"runnig_graghview\"></p>\n<h4 id=\"3.-%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">3. リストビュー画面 <a class=\"heading-anchor-permalink\" href=\"#3.-%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">#</a></h4>\n<p>リストビュー画面では、各コンポーネントの進行状況がグラフビュー画面より詳細に表示されます。</p>\n<p><img src=\"./img/task/running_ListView.png\" alt=\"img\" title=\"running_listview\"></p>\n<h4 id=\"4.-%E5%AE%9F%E8%A1%8C%E5%AE%8C%E4%BA%86\">4. 実行完了 <a class=\"heading-anchor-permalink\" href=\"#4.-%E5%AE%9F%E8%A1%8C%E5%AE%8C%E4%BA%86\">#</a></h4>\n<p>実行が完了したとき、状態は[ finished ]へと変化し、<br>\nまた、ログエリア[ Stdout ]に「Hello World!」と表示されます。</p>\n<p><img src=\"./img/task/finish.png\" alt=\"img\" title=\"finish\"></p>\n<p>以上が基本的なコンポーネント設定、プロジェクトの実行手順となります。<br>\nWHEELでは、Taskコンポーネントに加えて以降紹介するコンポーネントを組み合わせることにより、<br>\n複雑なワークフローを視覚的・直感的に理解しやすく構成することができます。</p>\n",
      "id": 12
    },
    {
      "path": "WHEEL_manual/4_component/2_If.md",
      "url": "WHEEL_manual/4_component/2_If.html",
      "content": "# If\n\n![img](./img/if/if.png \"if\")  \n\nIfコンポーネントは、[ condition ]プロパティに設定したスクリプトにより真偽判別し、後のワークフローの挙動を変化させるために用います。  \n真の場合はnext（緑）に指定されたコンポーネント、偽の場合はelse（紫）に指定されたコンポーネントを  \n後続タスクとして登録して終了します。  \n\nIfコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 |  コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| condition | ファイル名,またはJavascriptの式 | 条件判定を行うスクリプトのファイル名、またはJavascriptの式 *1 |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *2 |\n\n*1 conditionに指定されたスクリプトの終了コードが0の場合は真、それ以外の場合は、偽と判定して後続のノードへ遷移します。  \n　ただし、conditionに指定された文字列と一致するファイルが存在しなかった場合は、Javascriptの式とみなしてそのコードを実行します。  \n　この場合、実行結果がtruthyな値の場合を真、falseyな値の場合を偽とします。  \n　また、Javascriptの式には、予約済環境変数`$WHEEL_CURRENT_INDEX`（ループ系コンポーネントのループカウンタインデックス）が使用できます。  \n*2 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n# Ifコンポーネントの使用例\n\nサンプルでは、calcTaskコンポーネントにより三角形の面積を計算し、その計算結果を元にsampleIfコンポーネントにて真偽判定を行います。  \n面積が20より大きい場合、trueTaskコンポーネントを、小さい場合、falseTaskコンポーネントを実行します。  \n（true/falseTaskは、\"true\"/\"false\"を標準出力するTaskです。）  \n\nこのワークフローは下記の処理を行います。\n\n1. calcTaskコンポーネントにより、面積算出ソルバーを実行する\n2. 実行結果をifコンポーネントに渡す\n3. sampleIfコンポーネントで設定したスクリプトにより結果ファイルの真偽を判定する\n4. 真偽判定を踏まえ、trueTask, falseTaskのいずれかを実行する\n\n## ワークフロー構成図\n\n![img](./img/if/if_workflow.png \"if_workflow\") \n\n## 各コンポーネントのプロパティ\n\n> calkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | calcTask |\n| Script | calc.sh |\n| InputFiles | - |\n| OutputFiles | result.txt *1 |\n| Remotehost | localhost |\n| Files | calc.sh, wheel_tutorial_solver.cc, inputdata.txt |  \n\n*1 計算結果データ\n\n#### ・calc.sh\n\n```\n#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver  \nexit 0\n```\n\n> trueTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | trueTask |\n| Script | true.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | true.sh |  \n\n#### ・true.sh\n\n```\n#!/bin/bash  \necho true  \nexit 0\n```\n\n> falseTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | falseTask |\n| Script | false.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | false.sh |  \n\n#### ・false.sh\n\n```\n#!/bin/bash  \necho false  \nexit 0\n```\n\n> sampleIf（ifコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleIf |\n| InputFiles | input.txt |\n| OutputFiles | - |\n| Condition | condition.sh |\n| Files | condition.sh |  \n\n#### ・condition.sh\n\n```\n#!/bin/bash\nresult=$(cut -f 2 -d \"=\" input.txt)\necho $result\nif [ $result -gt 20 ] ; then\n  exit 0\nelse\n  exit 1\nfi \n```\n\n## 実行結果\n\n![img](./img/if/if_workflow_result.png \"if_workflow_result\") \n",
      "html": "<h1 id=\"if\">If <a class=\"heading-anchor-permalink\" href=\"#if\">#</a></h1>\n<p><img src=\"./img/if/if.png\" alt=\"img\" title=\"if\"></p>\n<p>Ifコンポーネントは、[ condition ]プロパティに設定したスクリプトにより真偽判別し、後のワークフローの挙動を変化させるために用います。<br>\n真の場合はnext（緑）に指定されたコンポーネント、偽の場合はelse（紫）に指定されたコンポーネントを<br>\n後続タスクとして登録して終了します。</p>\n<p>Ifコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>ファイル名,またはJavascriptの式</td>\n<td>条件判定を行うスクリプトのファイル名、またはJavascriptの式 *1</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *2</td>\n</tr>\n</tbody>\n</table>\n<p>*1 conditionに指定されたスクリプトの終了コードが0の場合は真、それ以外の場合は、偽と判定して後続のノードへ遷移します。<br>\n　ただし、conditionに指定された文字列と一致するファイルが存在しなかった場合は、Javascriptの式とみなしてそのコードを実行します。<br>\n　この場合、実行結果がtruthyな値の場合を真、falseyな値の場合を偽とします。<br>\n　また、Javascriptの式には、予約済環境変数<code>$WHEEL_CURRENT_INDEX</code>（ループ系コンポーネントのループカウンタインデックス）が使用できます。<br>\n*2 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h1 id=\"if%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Ifコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#if%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>サンプルでは、calcTaskコンポーネントにより三角形の面積を計算し、その計算結果を元にsampleIfコンポーネントにて真偽判定を行います。<br>\n面積が20より大きい場合、trueTaskコンポーネントを、小さい場合、falseTaskコンポーネントを実行します。<br>\n（true/falseTaskは、“true”/&quot;false&quot;を標準出力するTaskです。）</p>\n<p>このワークフローは下記の処理を行います。</p>\n<ol>\n<li>calcTaskコンポーネントにより、面積算出ソルバーを実行する</li>\n<li>実行結果をifコンポーネントに渡す</li>\n<li>sampleIfコンポーネントで設定したスクリプトにより結果ファイルの真偽を判定する</li>\n<li>真偽判定を踏まえ、trueTask, falseTaskのいずれかを実行する</li>\n</ol>\n<h2 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">ワークフロー構成図 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/if/if_workflow.png\" alt=\"img\" title=\"if_workflow\"></p>\n<h2 id=\"%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">各コンポーネントのプロパティ <a class=\"heading-anchor-permalink\" href=\"#%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h2>\n<blockquote>\n<p>calkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>calcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://calc.sh\">calc.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>result.txt *1</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://calc.sh\">calc.sh</a>, wheel_tutorial_solver.cc, inputdata.txt</td>\n</tr>\n</tbody>\n</table>\n<p>*1 計算結果データ</p>\n<h4 id=\"%E3%83%BBcalc.sh\">・<a href=\"http://calc.sh\">calc.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBcalc.sh\">#</a></h4>\n<pre><code>#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver  \nexit 0\n</code></pre>\n<blockquote>\n<p>trueTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>trueTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://true.sh\">true.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://true.sh\">true.sh</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBtrue.sh\">・<a href=\"http://true.sh\">true.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBtrue.sh\">#</a></h4>\n<pre><code>#!/bin/bash  \necho true  \nexit 0\n</code></pre>\n<blockquote>\n<p>falseTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>falseTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://false.sh\">false.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://false.sh\">false.sh</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBfalse.sh\">・<a href=\"http://false.sh\">false.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBfalse.sh\">#</a></h4>\n<pre><code>#!/bin/bash  \necho false  \nexit 0\n</code></pre>\n<blockquote>\n<p>sampleIf（ifコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleIf</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>input.txt</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Condition</td>\n<td><a href=\"http://condition.sh\">condition.sh</a></td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://condition.sh\">condition.sh</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBcondition.sh\">・<a href=\"http://condition.sh\">condition.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBcondition.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nresult=$(cut -f 2 -d &quot;=&quot; input.txt)\necho $result\nif [ $result -gt 20 ] ; then\n  exit 0\nelse\n  exit 1\nfi \n</code></pre>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/if/if_workflow_result.png\" alt=\"img\" title=\"if_workflow_result\"></p>\n",
      "id": 13
    },
    {
      "path": "WHEEL_manual/4_component/3_For.md",
      "url": "WHEEL_manual/4_component/3_For.html",
      "content": "# For\n\n![img](./img/for/for.png \"for\")  \n\nForコンポーネントは、[ start ], [ end ], [ step ]プロパティによる繰り返し計算の実行に使用します。  \nForコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 |  コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| start | 整数値 | ループの始値 |\n| end | 整数値 | ループの終値 |\n| step | 整数値 | 1回のループでのインデックスの増分（負値も可）|\n| last loop instance to keep | 整数値 | 残しておくループインスタンスの数（デフォルトではすべて保存される。） |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *1 |\n\n*1 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。  \n\n## ループ系コンポーネント（For/While/Foreach）\n\nForコンポーネントは、While/Foreachコンポーネントと同様に**ループ系コンポーネント**としてカテゴライズされ、  \nループカウンタインデックスを環境変数`$WHEEL_CURRENT_INDEX`に持ちます。  \nループ処理では、プロジェクト実行開始時に自身と同じ階層にループカウンタインデックスの値に応じたsuffixをつけてコンポーネント内に存在する全てのコンポーネントのコピーを作成します。  \n生成処理が完了したら、ループカウンタインデックスを進めて終了判定を行い、ループが終了してなければ再度コピーを作成します。  \nこのときコピーされるコンポーネントは、**1つ前のループ処理後のコンポーネント** です。  \n以下に例を示します。\n\n### Forコンポーネント名が「For」、ループカウンタを0から3まで1ずつ増加させる(start:0, end:3, step:1)場合\n\n#### 実行前のプロジェクトのディレクトリ構造\n\n```\nFor\n```\n\n#### 実行開始ループカウンタ0 ($WHEEL_CURRENT_INDEX：0)\n\n```\nFor\nFor_0 ←カウンタ開始が0のため、For_0コンポーネントが生成します\n```\n\n#### 実行開始ループカウンタ1 ($WHEEL_CURRENT_INDEX：1)\n\n```\nFor\nFor_0\nFor_1 ←「1」増加したFor_1を生成します  \n　　　　このとき、For_1コンポーネントは、カウンタ0のFor_0コンポーネントをコピーしたものです\n```\n\n以降、ループが終了するまでコンポーネントのコピー/実行を繰り返します。  \nループが終了条件を満たした時点で、これらのコンポーネントは終了となります。  \n\n# Forコンポーネントの使用例\n\nForコンポーネントのサンプルを示します。  \nサンプルでは、Forコンポーネント内でのTaskコンポーネントの処理（面積計算）にループインデックス(`$WHEEL_CURRENT_INDEX`)使用します。  \nワークフローに設定されているファイルは以下です。  \n\nこのワークフローは下記の処理を行います。\n\n1. calcTaskコンポーネントにより、面積算出ソルバーを実行する\n1. 実行結果をloopCalcTaskコンポーネントに渡す\n1. 「1の結果（面積の値）×ループインデックス＋3の結果」 を実行する *1\n1. 3の計算結果をファイルとして出力する\n1. 上記処理をループインデックスの上限値まで繰り返す（ループインデックス1～5）  \n\n*1　ループ回数2回目以降の計算にて使用する\n\n## Forワークフロー 構成図\n\n![img](./img/for/For_workflow.png \"For_workflow\")\n\n> sampleFor（forコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleFor |\n| InputFiles | - |\n| OutputFiles | - |\n| start | 0 |\n| end | 4 |\n| step | 1 |\n| last loop instance to keep | - |\n| Files | - |\n\n## Forワークフロー子階層 構成図\n\n![img](./img/for/For_child_workflow.png \"For_child_workflow\")\n\n> calkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | calcTask |\n| Script | calc.sh |\n| InputFiles | - |\n| OutputFiles | result.txt |\n| Remotehost | localhost |\n| Files | calc.sh , wheel_tutorial_solver.cc, inputdata.txt |  \n\n#### ・ calc.sh\n\n```\n#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver  \nexit 0\n```\n\n#### ・ inputData.txt\n\n```\n0, 0, 0\n0, 10, 0\n10, 0, 0\n```\n\n> loopCalkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | loopCalcTask |\n| Script | resultRead.sh |\n| InputFiles | input.txt |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | resultRead.sh, value.txt *2 |\n\n*2 result.shの計算結果ファイル、loopCalcTask内でインプットデータとして利用  \n\n#### ・ resultRead.sh  \n\n```\n#!/bin/bash\nresult=$(cut -f 2 -d \"=\" input.txt)\nif [ ! $WHEEL_CURRENT_INDEX = 0 ] ; then\n    value=$(cut -f 2 -d \"=\" value.txt)\nelse\n    value=0\nfi\nx=$(($result * $WHEEL_CURRENT_INDEX + $value))\necho $WHEEL_CURRENT_INDEX\necho value=$x\necho value=$x > value.txt\nexit 0\n```\n\n## 実行結果\n\n![img](./img/for/For_finished.png \"For_finished\")\n\n## ループインスタンスの削除\n\n保持するループインスタンスを１つに設定\n![img](./img/for/For_keep.png \"For_keep\")\n\n> sampleFor_keep（forコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleFor |\n| InputFiles | - |\n| OutputFiles | - |\n| start | 1 |\n| end | 3 |\n| step | 1 |\n| last loop instance to keep | 1 |\n| Files | - |\n\n## 実行結果\n\n最新のループインスタンスが保持されている\n![img](./img/for/For_keep_instance.png \"For_keep_instance\")",
      "html": "<h1 id=\"for\">For <a class=\"heading-anchor-permalink\" href=\"#for\">#</a></h1>\n<p><img src=\"./img/for/for.png\" alt=\"img\" title=\"for\"></p>\n<p>Forコンポーネントは、[ start ], [ end ], [ step ]プロパティによる繰り返し計算の実行に使用します。<br>\nForコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>start</td>\n<td>整数値</td>\n<td>ループの始値</td>\n</tr>\n<tr>\n<td>end</td>\n<td>整数値</td>\n<td>ループの終値</td>\n</tr>\n<tr>\n<td>step</td>\n<td>整数値</td>\n<td>1回のループでのインデックスの増分（負値も可）</td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>整数値</td>\n<td>残しておくループインスタンスの数（デフォルトではすべて保存される。）</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *1</td>\n</tr>\n</tbody>\n</table>\n<p>*1 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h2 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E7%B3%BB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88for%2Fwhile%2Fforeach%EF%BC%89\">ループ系コンポーネント（For/While/Foreach） <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E7%B3%BB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88for%2Fwhile%2Fforeach%EF%BC%89\">#</a></h2>\n<p>Forコンポーネントは、While/Foreachコンポーネントと同様に<strong>ループ系コンポーネント</strong>としてカテゴライズされ、<br>\nループカウンタインデックスを環境変数<code>$WHEEL_CURRENT_INDEX</code>に持ちます。<br>\nループ処理では、プロジェクト実行開始時に自身と同じ階層にループカウンタインデックスの値に応じたsuffixをつけてコンポーネント内に存在する全てのコンポーネントのコピーを作成します。<br>\n生成処理が完了したら、ループカウンタインデックスを進めて終了判定を行い、ループが終了してなければ再度コピーを作成します。<br>\nこのときコピーされるコンポーネントは、<strong>1つ前のループ処理後のコンポーネント</strong> です。<br>\n以下に例を示します。</p>\n<h3 id=\"for%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%90%8D%E3%81%8C%E3%80%8Cfor%E3%80%8D%E3%80%81%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF%E3%82%920%E3%81%8B%E3%82%893%E3%81%BE%E3%81%A71%E3%81%9A%E3%81%A4%E5%A2%97%E5%8A%A0%E3%81%95%E3%81%9B%E3%82%8B(start%3A0%2C-end%3A3%2C-step%3A1)%E5%A0%B4%E5%90%88\">Forコンポーネント名が「For」、ループカウンタを0から3まで1ずつ増加させる(start:0, end:3, step:1)場合 <a class=\"heading-anchor-permalink\" href=\"#for%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%90%8D%E3%81%8C%E3%80%8Cfor%E3%80%8D%E3%80%81%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF%E3%82%920%E3%81%8B%E3%82%893%E3%81%BE%E3%81%A71%E3%81%9A%E3%81%A4%E5%A2%97%E5%8A%A0%E3%81%95%E3%81%9B%E3%82%8B(start%3A0%2C-end%3A3%2C-step%3A1)%E5%A0%B4%E5%90%88\">#</a></h3>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">実行前のプロジェクトのディレクトリ構造 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">#</a></h4>\n<pre><code>For\n</code></pre>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF0-(%24wheel_current_index%EF%BC%9A0)\">実行開始ループカウンタ0 ($WHEEL_CURRENT_INDEX：0) <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF0-(%24wheel_current_index%EF%BC%9A0)\">#</a></h4>\n<pre><code>For\nFor_0 ←カウンタ開始が0のため、For_0コンポーネントが生成します\n</code></pre>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF1-(%24wheel_current_index%EF%BC%9A1)\">実行開始ループカウンタ1 ($WHEEL_CURRENT_INDEX：1) <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF1-(%24wheel_current_index%EF%BC%9A1)\">#</a></h4>\n<pre><code>For\nFor_0\nFor_1 ←「1」増加したFor_1を生成します  \n　　　　このとき、For_1コンポーネントは、カウンタ0のFor_0コンポーネントをコピーしたものです\n</code></pre>\n<p>以降、ループが終了するまでコンポーネントのコピー/実行を繰り返します。<br>\nループが終了条件を満たした時点で、これらのコンポーネントは終了となります。</p>\n<h1 id=\"for%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Forコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#for%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>Forコンポーネントのサンプルを示します。<br>\nサンプルでは、Forコンポーネント内でのTaskコンポーネントの処理（面積計算）にループインデックス(<code>$WHEEL_CURRENT_INDEX</code>)使用します。<br>\nワークフローに設定されているファイルは以下です。</p>\n<p>このワークフローは下記の処理を行います。</p>\n<ol>\n<li>calcTaskコンポーネントにより、面積算出ソルバーを実行する</li>\n<li>実行結果をloopCalcTaskコンポーネントに渡す</li>\n<li>「1の結果（面積の値）×ループインデックス＋3の結果」 を実行する *1</li>\n<li>3の計算結果をファイルとして出力する</li>\n<li>上記処理をループインデックスの上限値まで繰り返す（ループインデックス1～5）</li>\n</ol>\n<p>*1　ループ回数2回目以降の計算にて使用する</p>\n<h2 id=\"for%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC-%E6%A7%8B%E6%88%90%E5%9B%B3\">Forワークフロー 構成図 <a class=\"heading-anchor-permalink\" href=\"#for%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC-%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/for/For_workflow.png\" alt=\"img\" title=\"For_workflow\"></p>\n<blockquote>\n<p>sampleFor（forコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleFor</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>start</td>\n<td>0</td>\n</tr>\n<tr>\n<td>end</td>\n<td>4</td>\n</tr>\n<tr>\n<td>step</td>\n<td>1</td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"for%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">Forワークフロー子階層 構成図 <a class=\"heading-anchor-permalink\" href=\"#for%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/for/For_child_workflow.png\" alt=\"img\" title=\"For_child_workflow\"></p>\n<blockquote>\n<p>calkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>calcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://calc.sh\">calc.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>result.txt</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://calc.sh\">calc.sh</a> , wheel_tutorial_solver.cc, inputdata.txt</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BB-calc.sh\">・ <a href=\"http://calc.sh\">calc.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BB-calc.sh\">#</a></h4>\n<pre><code>#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver  \nexit 0\n</code></pre>\n<h4 id=\"%E3%83%BB-inputdata.txt\">・ inputData.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BB-inputdata.txt\">#</a></h4>\n<pre><code>0, 0, 0\n0, 10, 0\n10, 0, 0\n</code></pre>\n<blockquote>\n<p>loopCalkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>loopCalcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://resultRead.sh\">resultRead.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>input.txt</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://resultRead.sh\">resultRead.sh</a>, value.txt *2</td>\n</tr>\n</tbody>\n</table>\n<p>*2 result.shの計算結果ファイル、loopCalcTask内でインプットデータとして利用</p>\n<h4 id=\"%E3%83%BB-resultread.sh\">・ <a href=\"http://resultRead.sh\">resultRead.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BB-resultread.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nresult=$(cut -f 2 -d &quot;=&quot; input.txt)\nif [ ! $WHEEL_CURRENT_INDEX = 0 ] ; then\n    value=$(cut -f 2 -d &quot;=&quot; value.txt)\nelse\n    value=0\nfi\nx=$(($result * $WHEEL_CURRENT_INDEX + $value))\necho $WHEEL_CURRENT_INDEX\necho value=$x\necho value=$x &gt; value.txt\nexit 0\n</code></pre>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/for/For_finished.png\" alt=\"img\" title=\"For_finished\"></p>\n<h2 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">ループインスタンスの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p>保持するループインスタンスを１つに設定\n<img src=\"./img/for/For_keep.png\" alt=\"img\" title=\"For_keep\"></p>\n<blockquote>\n<p>sampleFor_keep（forコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleFor</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>start</td>\n<td>1</td>\n</tr>\n<tr>\n<td>end</td>\n<td>3</td>\n</tr>\n<tr>\n<td>step</td>\n<td>1</td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-2\">実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C-2\">#</a></h2>\n<p>最新のループインスタンスが保持されている\n<img src=\"./img/for/For_keep_instance.png\" alt=\"img\" title=\"For_keep_instance\"></p>\n",
      "id": 14
    },
    {
      "path": "WHEEL_manual/4_component/4_Foreach.md",
      "url": "WHEEL_manual/4_component/4_Foreach.html",
      "content": "# Foreach\n\n![img](./img/foreach/foreach.png \"foreach\")  \n\nForコンポーネントは、[ indexList ]プロパティによる繰り返し計算の実行に使用します。  \nForeachコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 |  コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| indexList | 文字列 | ループカウンタインデックスに指定される値のリスト *1|\n| last loop instance to keep | 整数値 | 残しておくループインスタンスの数（デフォルトではすべて保存される。） |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *2 |\n\n*1 使用できる文字列は、半角英数字[0-9 a-Z]、ハイフン[ - ]、アンダースコア[ _ ]のみです。  \n*2 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n## ループ系コンポーネント（Foreach/For/While）\n\nForeachコンポーネントは、For/Whileコンポーネントと同様に**ループ系コンポーネント**としてカテゴライズされ、  \nループカウンタインデックスを環境変数`$WHEEL_CURRENT_INDEX`に持ちます。  \nループ処理では、プロジェクト実行開始時に自身と同じ階層にループカウンタインデックスの値に応じたsuffixをつけてコンポーネント内に存在する全てのコンポーネントのコピーを作成します。  \n生成処理が完了したら、ループカウンタインデックスを進めて終了判定を行い、ループが終了してなければ再度コピーを作成します。  \nこのときコピーされるコンポーネントは、**1つ前のループ処理後のコンポーネント** です。  \n以下に例を示します。\n\n### Foreachコンポーネント名が「Foreach」、indexListが「a, b, c」の場合\n\n#### 実行前のプロジェクトのディレクトリ構造\n\n```\nForeach\n```\n\n#### 実行開始ループカウンタa ($WHEEL_CURRENT_INDEX：a)\n\n```\nForeach\nForeach_a ←ループカウンタaのため、Foreach_aコンポーネントが生成します\n```\n\n#### 実行開始ループカウンタb ($WHEEL_CURRENT_INDEX：b)\n\n```\nForeach\nForeach_a\nForeach_b ←二つ目のindexList:bに基づき、Foreach_bを生成します  \n　　　　　　このとき、Foreach_bコンポーネントは、カウンタaのForeach_aコンポーネントをコピーしたものです\n```\n\n以降、ループが終了するまでコンポーネントのコピー/実行を繰り返します。  \nループが終了条件を満たした時点で、これらのコンポーネントは終了となります。  \n\n# Foreachコンポーネントの使用例  \n\nForeachコンポーネントのサンプルを示します。  \nサンプルでは、Foreachコンポーネント内でのTaskコンポーネントの処理（面積計算）にループインデックス(`$WHEEL_CURRENT_INDEX`)使用します。  \n\nこのワークフローは下記の処理を行います。\n\n1. calcTaskコンポーネントにより、面積算出ソルバーを実行する\n1. 実行結果をtask1コンポーネントに渡す\n1. 「1の結果（面積の値）×ループインデックス＋3の結果」 を実行する *1\n1. 3の計算結果をファイルとして出力する\n1. 上記処理をループインデックスの上限値まで繰り返す（ループインデックス1, 3, 5）\n\n*　ループ回数2回目以降の計算にて使用する\n\n## Foreachワークフロー 構成図\n\n![img](./img/foreach/Foreach_workflow.png \"Foreach_workflow\")  \n\n> sampleForeach（foreachコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleForeach |\n| InputFiles | - |\n| OutputFiles | - |\n| index list | 1 |\n|  | 3 |\n|  | 5 |\n| last loop instance to keep | - |\n| Files | - |\n\n## Foreachワークフロー子階層　構成図\n\n![img](./img/foreach/Foreach_child_workflow.png \"Foreach_child_workflow\")\n\n> calkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | calcTask |\n| Script | calc.sh |\n| InputFiles | - |\n| OutputFiles | result.txt |\n| Remotehost | localhost |\n| Files | calc.sh , wheel_tutorial_solver.cc, inputdata.txt |  \n\n#### ・calc.sh\n\n```\n#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver\nexit 0\n```\n\n#### ・inputData.txt\n\n```\n0, 0, 0\n0, 10, 0\n10, 0, 0\n```\n\n> loopCalkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | loopCalcTask |\n| Script | resultRead.sh |\n| InputFiles | input.txt |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | resultRead.sh, value.txt *2 |\n\n*2 result.shの計算結果ファイル、loopCalcTask内でインプットデータとして利用  \n\n#### ・resultRead.sh\n\n```\n#!/bin/bash\nresult=$(cut -f 2 -d \"=\" input.txt)\nif [ ! $WHEEL_CURRENT_INDEX = 0 ] ; then\n    value=$(cut -f 2 -d \"=\" value.txt)\nelse\n    value=0\nfi\nx=$(($result * $WHEEL_CURRENT_INDEX + $value))\necho $WHEEL_CURRENT_INDEX\necho value=$x\necho value=$x > value.txt\nexit 0\n```\n\n## ワークフロー実行結果\n\n![img](./img/foreach/Foreach_finished.png \"Foreach_finished\")\n\n## ループインスタンスの削除\n(参考：[ループインスタンスの削除](../4_component/3_For.md))",
      "html": "<h1 id=\"foreach\">Foreach <a class=\"heading-anchor-permalink\" href=\"#foreach\">#</a></h1>\n<p><img src=\"./img/foreach/foreach.png\" alt=\"img\" title=\"foreach\"></p>\n<p>Forコンポーネントは、[ indexList ]プロパティによる繰り返し計算の実行に使用します。<br>\nForeachコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>indexList</td>\n<td>文字列</td>\n<td>ループカウンタインデックスに指定される値のリスト *1</td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>整数値</td>\n<td>残しておくループインスタンスの数（デフォルトではすべて保存される。）</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *2</td>\n</tr>\n</tbody>\n</table>\n<p>*1 使用できる文字列は、半角英数字[0-9 a-Z]、ハイフン[ - ]、アンダースコア[ _ ]のみです。<br>\n*2 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h2 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E7%B3%BB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88foreach%2Ffor%2Fwhile%EF%BC%89\">ループ系コンポーネント（Foreach/For/While） <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E7%B3%BB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88foreach%2Ffor%2Fwhile%EF%BC%89\">#</a></h2>\n<p>Foreachコンポーネントは、For/Whileコンポーネントと同様に<strong>ループ系コンポーネント</strong>としてカテゴライズされ、<br>\nループカウンタインデックスを環境変数<code>$WHEEL_CURRENT_INDEX</code>に持ちます。<br>\nループ処理では、プロジェクト実行開始時に自身と同じ階層にループカウンタインデックスの値に応じたsuffixをつけてコンポーネント内に存在する全てのコンポーネントのコピーを作成します。<br>\n生成処理が完了したら、ループカウンタインデックスを進めて終了判定を行い、ループが終了してなければ再度コピーを作成します。<br>\nこのときコピーされるコンポーネントは、<strong>1つ前のループ処理後のコンポーネント</strong> です。<br>\n以下に例を示します。</p>\n<h3 id=\"foreach%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%90%8D%E3%81%8C%E3%80%8Cforeach%E3%80%8D%E3%80%81indexlist%E3%81%8C%E3%80%8Ca%2C-b%2C-c%E3%80%8D%E3%81%AE%E5%A0%B4%E5%90%88\">Foreachコンポーネント名が「Foreach」、indexListが「a, b, c」の場合 <a class=\"heading-anchor-permalink\" href=\"#foreach%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%90%8D%E3%81%8C%E3%80%8Cforeach%E3%80%8D%E3%80%81indexlist%E3%81%8C%E3%80%8Ca%2C-b%2C-c%E3%80%8D%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">実行前のプロジェクトのディレクトリ構造 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">#</a></h4>\n<pre><code>Foreach\n</code></pre>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BFa-(%24wheel_current_index%EF%BC%9Aa)\">実行開始ループカウンタa ($WHEEL_CURRENT_INDEX：a) <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BFa-(%24wheel_current_index%EF%BC%9Aa)\">#</a></h4>\n<pre><code>Foreach\nForeach_a ←ループカウンタaのため、Foreach_aコンポーネントが生成します\n</code></pre>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BFb-(%24wheel_current_index%EF%BC%9Ab)\">実行開始ループカウンタb ($WHEEL_CURRENT_INDEX：b) <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BFb-(%24wheel_current_index%EF%BC%9Ab)\">#</a></h4>\n<pre><code>Foreach\nForeach_a\nForeach_b ←二つ目のindexList:bに基づき、Foreach_bを生成します  \n　　　　　　このとき、Foreach_bコンポーネントは、カウンタaのForeach_aコンポーネントをコピーしたものです\n</code></pre>\n<p>以降、ループが終了するまでコンポーネントのコピー/実行を繰り返します。<br>\nループが終了条件を満たした時点で、これらのコンポーネントは終了となります。</p>\n<h1 id=\"foreach%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Foreachコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#foreach%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>Foreachコンポーネントのサンプルを示します。<br>\nサンプルでは、Foreachコンポーネント内でのTaskコンポーネントの処理（面積計算）にループインデックス(<code>$WHEEL_CURRENT_INDEX</code>)使用します。</p>\n<p>このワークフローは下記の処理を行います。</p>\n<ol>\n<li>calcTaskコンポーネントにより、面積算出ソルバーを実行する</li>\n<li>実行結果をtask1コンポーネントに渡す</li>\n<li>「1の結果（面積の値）×ループインデックス＋3の結果」 を実行する *1</li>\n<li>3の計算結果をファイルとして出力する</li>\n<li>上記処理をループインデックスの上限値まで繰り返す（ループインデックス1, 3, 5）</li>\n</ol>\n<p>*　ループ回数2回目以降の計算にて使用する</p>\n<h2 id=\"foreach%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC-%E6%A7%8B%E6%88%90%E5%9B%B3\">Foreachワークフロー 構成図 <a class=\"heading-anchor-permalink\" href=\"#foreach%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC-%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/foreach/Foreach_workflow.png\" alt=\"img\" title=\"Foreach_workflow\"></p>\n<blockquote>\n<p>sampleForeach（foreachコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleForeach</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>index list</td>\n<td>1</td>\n</tr>\n<tr>\n<td></td>\n<td>3</td>\n</tr>\n<tr>\n<td></td>\n<td>5</td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"foreach%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">Foreachワークフロー子階層　構成図 <a class=\"heading-anchor-permalink\" href=\"#foreach%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/foreach/Foreach_child_workflow.png\" alt=\"img\" title=\"Foreach_child_workflow\"></p>\n<blockquote>\n<p>calkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>calcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://calc.sh\">calc.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>result.txt</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://calc.sh\">calc.sh</a> , wheel_tutorial_solver.cc, inputdata.txt</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBcalc.sh\">・<a href=\"http://calc.sh\">calc.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBcalc.sh\">#</a></h4>\n<pre><code>#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver\nexit 0\n</code></pre>\n<h4 id=\"%E3%83%BBinputdata.txt\">・inputData.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBinputdata.txt\">#</a></h4>\n<pre><code>0, 0, 0\n0, 10, 0\n10, 0, 0\n</code></pre>\n<blockquote>\n<p>loopCalkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>loopCalcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://resultRead.sh\">resultRead.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>input.txt</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://resultRead.sh\">resultRead.sh</a>, value.txt *2</td>\n</tr>\n</tbody>\n</table>\n<p>*2 result.shの計算結果ファイル、loopCalcTask内でインプットデータとして利用</p>\n<h4 id=\"%E3%83%BBresultread.sh\">・<a href=\"http://resultRead.sh\">resultRead.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBresultread.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nresult=$(cut -f 2 -d &quot;=&quot; input.txt)\nif [ ! $WHEEL_CURRENT_INDEX = 0 ] ; then\n    value=$(cut -f 2 -d &quot;=&quot; value.txt)\nelse\n    value=0\nfi\nx=$(($result * $WHEEL_CURRENT_INDEX + $value))\necho $WHEEL_CURRENT_INDEX\necho value=$x\necho value=$x &gt; value.txt\nexit 0\n</code></pre>\n<h2 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">ワークフロー実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/foreach/Foreach_finished.png\" alt=\"img\" title=\"Foreach_finished\"></p>\n<h2 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">ループインスタンスの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p>(参考：<a href=\"../4_component/3_For.html\">ループインスタンスの削除</a>)</p>\n",
      "id": 15
    },
    {
      "path": "WHEEL_manual/4_component/5_While.md",
      "url": "WHEEL_manual/4_component/5_While.html",
      "content": "# While\n\n![img](./img/while/while.png \"while\")  \n\nWhileコンポーネントは、[ condition ]プロパティに設定した条件判定スクリプトによって終了判定する繰り返し計算の実行に使用します。  \nWhileコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 |  コンポーネント |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| condition | ファイル名,またはJavaScriptの式 | 条件判定を行うスクリプトのファイル名、またはJavaScriptの式 |\n| last loop instance to keep | 整数値 | 残しておくループインスタンスの数（デフォルトではすべて保存される。） |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *1 |\n\n*1 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。  \n\n## Whileループの終了条件\n\n[ condition ]プロパティの条件判定要素として環境変数`$WHEEL_CURRENT_INDEX`（ループ系コンポーネントのループカウンタインデックス）が使用できます。  \nWhileコンポーネントにおける環境変数`$WHEEL_CURRENT_INDEX`は、初期値0,増加率1として扱われます。  \n[ condition ]プロパティに指定されたスクリプトファイルの終了コードが0の場合は真、それ以外の場合は、偽と判定してループ継続となります。  \nただし、conditionに指定された文字列と一致するファイルが存在しなかった場合は、Javascriptの式とみなしてそのコードを実行します。  \nこの場合、実行結果がtruthyな値の場合を真、falseyな値の場合を偽とします。  \n例として、$WHEEL_CURRENT_INDEXの値が3より小さい場合に継続するスクリプト、Javascript判定式を下記に示します。\n\n#### スクリプトファイル\n\n```\n#!/bin/bash\nif [ $WHEEL_CURRENT_INDEX -lt 3 ] ; then\n  exit 0\nelse\n  exit 1\nfi\n```\n\n#### Javascript\n\n```\nWHEEL_CURRENT_INDEX < 3　　*1\n```\n\n*1 JavaScript判定式では`$`は不要です\n\n\n## ループ系コンポーネント（While/Foreach/For）\n\nWhileコンポーネントは、For/Foreachコンポーネントと同様に**ループ系コンポーネント**としてカテゴライズされ、  \nループカウンタインデックスを環境変数`$WHEEL_CURRENT_INDEX`に持ちます。  \nループ処理では、プロジェクト実行開始時に自身と同じ階層にループカウンタインデックスの値に応じたsuffixをつけてコンポーネント内に存在する全てのコンポーネントのコピーを作成します。  \n生成処理が完了したら、ループカウンタインデックスを進めて終了判定を行い、ループが終了してなければ再度コピーを作成します。  \nこのときコピーされるコンポーネントは、**1つ前のループ処理後のコンポーネント** です。  \n以下に例を示します。\n\n### Whileコンポーネント名が「While」、conditionの設定が「$WHEEL_CURRENT_INDEXの値が3より小さいときループ継続する」という場合\n\n#### 実行前のプロジェクトのディレクトリ構造\n\n```\nWhile\n```\n\n#### 実行開始ループカウンタ0 ($WHEEL_CURRENT_INDEX：0)\n\n```\nWhile\nWhile_0 ←ループカウンタaのため、While_0コンポーネントが生成します\n```\n\n#### 実行開始ループカウンタ1 ($WHEEL_CURRENT_INDEX：1)\n\n```\nWhile\nWhile_0\nWhile_1 ←「1」増加したWhile_1を生成します  \n　　　　　このとき、While_1コンポーネントは、カウンタ0のWhile_0コンポーネントをコピーしたものです\n```\n\n以降、ループが終了するまでコンポーネントのコピー/実行を繰り返します。  \nループが終了条件を満たした時点で、これらのコンポーネントは終了となります。  \nループの条件判定は、コピーされたコンポーネント（While_*）ではなく、コピー元のコンポーネント（While）上で実行されます。\n\n# Whileコンポーネントの使用例\n\nWhileコンポーネントのサンプルを示します。\n\nこのワークフローは下記の処理を行います。  \n\n1. calcTaskコンポーネントにより、面積算出ソルバーを実行する\n1. 実行結果をloopCalcTaskコンポーネントに渡す\n1. 「1の結果（面積の値）×ループインデックス＋3の結果」 を実行する *1\n1. 3の計算結果をファイルとして出力する\n1. Whileコンポーネントに設定された条件判定スクリプトで、ループ継続判定をする\n1. ループ継続であればループインデックスに1を加算し処理1に戻り、ループ終了であればワークフローを終了する\n\n*1　ループ回数2回目以降の計算にて使用する\n\n## While ワークフロー構成図\n\n![img](./img/while/While_workflow.png \"While_workflow\")\n\n> sampleWhile（whileコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleWhile |\n| InputFiles | - |\n| OutputFiles | - |\n| Condition | condition.sh |\n| last loop instance to keep | - |\n| Files | condition.sh |\n\n#### ・condition.sh\n\n```\n#!/bin/bash\nif [ $WHEEL_CURRENT_INDEX -lt 6 ] ; then\n  exit 0\nelse\n  exit 1\nfi\n```\n\n## While ワークフロー子階層　構成図\n\n![img](./img/while/While_child_workflow.png \"While_child_workflow\")\n\n> calkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | calcTask |\n| Script | calc.sh |\n| InputFiles | - |\n| OutputFiles | result.txt |\n| Remotehost | localhost |\n| Files | calc.sh , wheel_tutorial_solver.cc, inputdata.txt |  \n\n#### ・calc.sh\n\n```\n#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver\nexit 0\n```\n\n#### ・inputData.txt\n\n```\n0, 0, 0\n0, 10, 0\n10, 0, 0\n```\n\n> loopCalkTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | loopCalcTask |\n| Script | resultRead.sh |\n| InputFiles | input.txt |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | resultRead.sh, value.txt *2 |\n\n*2 result.shの計算結果ファイル、loopCalcTask内でインプットデータとして利用  \n\n#### ・resultRead.sh\n\n```\n#!/bin/bash\nresult=$(cut -f 2 -d \"=\" input.txt)\nif [ ! $WHEEL_CURRENT_INDEX = 0 ] ; then\n    value=$(cut -f 2 -d \"=\" value.txt)\nelse\n    value=0\nfi\nx=$(($result * $WHEEL_CURRENT_INDEX + $value))\necho $WHEEL_CURRENT_INDEX\necho value=$x\necho value=$x > value.txt\nexit 0\n```\n\n## ワークフロー実行結果\n\n![img](./img/while/While_finished.png \"While_finished\")\n\n## ループインスタンスの削除\n(参考：[ループインスタンスの削除](../4_component/3_For.md))",
      "html": "<h1 id=\"while\">While <a class=\"heading-anchor-permalink\" href=\"#while\">#</a></h1>\n<p><img src=\"./img/while/while.png\" alt=\"img\" title=\"while\"></p>\n<p>Whileコンポーネントは、[ condition ]プロパティに設定した条件判定スクリプトによって終了判定する繰り返し計算の実行に使用します。<br>\nWhileコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>ファイル名,またはJavaScriptの式</td>\n<td>条件判定を行うスクリプトのファイル名、またはJavaScriptの式</td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>整数値</td>\n<td>残しておくループインスタンスの数（デフォルトではすべて保存される。）</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *1</td>\n</tr>\n</tbody>\n</table>\n<p>*1 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h2 id=\"while%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E7%B5%82%E4%BA%86%E6%9D%A1%E4%BB%B6\">Whileループの終了条件 <a class=\"heading-anchor-permalink\" href=\"#while%E3%83%AB%E3%83%BC%E3%83%97%E3%81%AE%E7%B5%82%E4%BA%86%E6%9D%A1%E4%BB%B6\">#</a></h2>\n<p>[ condition ]プロパティの条件判定要素として環境変数<code>$WHEEL_CURRENT_INDEX</code>（ループ系コンポーネントのループカウンタインデックス）が使用できます。<br>\nWhileコンポーネントにおける環境変数<code>$WHEEL_CURRENT_INDEX</code>は、初期値0,増加率1として扱われます。<br>\n[ condition ]プロパティに指定されたスクリプトファイルの終了コードが0の場合は真、それ以外の場合は、偽と判定してループ継続となります。<br>\nただし、conditionに指定された文字列と一致するファイルが存在しなかった場合は、Javascriptの式とみなしてそのコードを実行します。<br>\nこの場合、実行結果がtruthyな値の場合を真、falseyな値の場合を偽とします。<br>\n例として、$WHEEL_CURRENT_INDEXの値が3より小さい場合に継続するスクリプト、Javascript判定式を下記に示します。</p>\n<h4 id=\"%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">スクリプトファイル <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">#</a></h4>\n<pre><code>#!/bin/bash\nif [ $WHEEL_CURRENT_INDEX -lt 3 ] ; then\n  exit 0\nelse\n  exit 1\nfi\n</code></pre>\n<h4 id=\"javascript\">Javascript <a class=\"heading-anchor-permalink\" href=\"#javascript\">#</a></h4>\n<pre><code>WHEEL_CURRENT_INDEX &lt; 3　　*1\n</code></pre>\n<p>*1 JavaScript判定式では<code>$</code>は不要です</p>\n<h2 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E7%B3%BB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88while%2Fforeach%2Ffor%EF%BC%89\">ループ系コンポーネント（While/Foreach/For） <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E7%B3%BB%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88while%2Fforeach%2Ffor%EF%BC%89\">#</a></h2>\n<p>Whileコンポーネントは、For/Foreachコンポーネントと同様に<strong>ループ系コンポーネント</strong>としてカテゴライズされ、<br>\nループカウンタインデックスを環境変数<code>$WHEEL_CURRENT_INDEX</code>に持ちます。<br>\nループ処理では、プロジェクト実行開始時に自身と同じ階層にループカウンタインデックスの値に応じたsuffixをつけてコンポーネント内に存在する全てのコンポーネントのコピーを作成します。<br>\n生成処理が完了したら、ループカウンタインデックスを進めて終了判定を行い、ループが終了してなければ再度コピーを作成します。<br>\nこのときコピーされるコンポーネントは、<strong>1つ前のループ処理後のコンポーネント</strong> です。<br>\n以下に例を示します。</p>\n<h3 id=\"while%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%90%8D%E3%81%8C%E3%80%8Cwhile%E3%80%8D%E3%80%81condition%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%8C%E3%80%8C%24wheel_current_index%E3%81%AE%E5%80%A4%E3%81%8C3%E3%82%88%E3%82%8A%E5%B0%8F%E3%81%95%E3%81%84%E3%81%A8%E3%81%8D%E3%83%AB%E3%83%BC%E3%83%97%E7%B6%99%E7%B6%9A%E3%81%99%E3%82%8B%E3%80%8D%E3%81%A8%E3%81%84%E3%81%86%E5%A0%B4%E5%90%88\">Whileコンポーネント名が「While」、conditionの設定が「$WHEEL_CURRENT_INDEXの値が3より小さいときループ継続する」という場合 <a class=\"heading-anchor-permalink\" href=\"#while%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%90%8D%E3%81%8C%E3%80%8Cwhile%E3%80%8D%E3%80%81condition%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%8C%E3%80%8C%24wheel_current_index%E3%81%AE%E5%80%A4%E3%81%8C3%E3%82%88%E3%82%8A%E5%B0%8F%E3%81%95%E3%81%84%E3%81%A8%E3%81%8D%E3%83%AB%E3%83%BC%E3%83%97%E7%B6%99%E7%B6%9A%E3%81%99%E3%82%8B%E3%80%8D%E3%81%A8%E3%81%84%E3%81%86%E5%A0%B4%E5%90%88\">#</a></h3>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">実行前のプロジェクトのディレクトリ構造 <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0\">#</a></h4>\n<pre><code>While\n</code></pre>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF0-(%24wheel_current_index%EF%BC%9A0)\">実行開始ループカウンタ0 ($WHEEL_CURRENT_INDEX：0) <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF0-(%24wheel_current_index%EF%BC%9A0)\">#</a></h4>\n<pre><code>While\nWhile_0 ←ループカウンタaのため、While_0コンポーネントが生成します\n</code></pre>\n<h4 id=\"%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF1-(%24wheel_current_index%EF%BC%9A1)\">実行開始ループカウンタ1 ($WHEEL_CURRENT_INDEX：1) <a class=\"heading-anchor-permalink\" href=\"#%E5%AE%9F%E8%A1%8C%E9%96%8B%E5%A7%8B%E3%83%AB%E3%83%BC%E3%83%97%E3%82%AB%E3%82%A6%E3%83%B3%E3%82%BF1-(%24wheel_current_index%EF%BC%9A1)\">#</a></h4>\n<pre><code>While\nWhile_0\nWhile_1 ←「1」増加したWhile_1を生成します  \n　　　　　このとき、While_1コンポーネントは、カウンタ0のWhile_0コンポーネントをコピーしたものです\n</code></pre>\n<p>以降、ループが終了するまでコンポーネントのコピー/実行を繰り返します。<br>\nループが終了条件を満たした時点で、これらのコンポーネントは終了となります。<br>\nループの条件判定は、コピーされたコンポーネント（While_*）ではなく、コピー元のコンポーネント（While）上で実行されます。</p>\n<h1 id=\"while%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Whileコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#while%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>Whileコンポーネントのサンプルを示します。</p>\n<p>このワークフローは下記の処理を行います。</p>\n<ol>\n<li>calcTaskコンポーネントにより、面積算出ソルバーを実行する</li>\n<li>実行結果をloopCalcTaskコンポーネントに渡す</li>\n<li>「1の結果（面積の値）×ループインデックス＋3の結果」 を実行する *1</li>\n<li>3の計算結果をファイルとして出力する</li>\n<li>Whileコンポーネントに設定された条件判定スクリプトで、ループ継続判定をする</li>\n<li>ループ継続であればループインデックスに1を加算し処理1に戻り、ループ終了であればワークフローを終了する</li>\n</ol>\n<p>*1　ループ回数2回目以降の計算にて使用する</p>\n<h2 id=\"while-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">While ワークフロー構成図 <a class=\"heading-anchor-permalink\" href=\"#while-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/while/While_workflow.png\" alt=\"img\" title=\"While_workflow\"></p>\n<blockquote>\n<p>sampleWhile（whileコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleWhile</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Condition</td>\n<td><a href=\"http://condition.sh\">condition.sh</a></td>\n</tr>\n<tr>\n<td>last loop instance to keep</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://condition.sh\">condition.sh</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBcondition.sh\">・<a href=\"http://condition.sh\">condition.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBcondition.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nif [ $WHEEL_CURRENT_INDEX -lt 6 ] ; then\n  exit 0\nelse\n  exit 1\nfi\n</code></pre>\n<h2 id=\"while-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">While ワークフロー子階層　構成図 <a class=\"heading-anchor-permalink\" href=\"#while-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/while/While_child_workflow.png\" alt=\"img\" title=\"While_child_workflow\"></p>\n<blockquote>\n<p>calkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>calcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://calc.sh\">calc.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>result.txt</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://calc.sh\">calc.sh</a> , wheel_tutorial_solver.cc, inputdata.txt</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBcalc.sh\">・<a href=\"http://calc.sh\">calc.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBcalc.sh\">#</a></h4>\n<pre><code>#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver  \n./wheel_tutorial_solver\nexit 0\n</code></pre>\n<h4 id=\"%E3%83%BBinputdata.txt\">・inputData.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBinputdata.txt\">#</a></h4>\n<pre><code>0, 0, 0\n0, 10, 0\n10, 0, 0\n</code></pre>\n<blockquote>\n<p>loopCalkTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>loopCalcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://resultRead.sh\">resultRead.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>input.txt</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://resultRead.sh\">resultRead.sh</a>, value.txt *2</td>\n</tr>\n</tbody>\n</table>\n<p>*2 result.shの計算結果ファイル、loopCalcTask内でインプットデータとして利用</p>\n<h4 id=\"%E3%83%BBresultread.sh\">・<a href=\"http://resultRead.sh\">resultRead.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBresultread.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nresult=$(cut -f 2 -d &quot;=&quot; input.txt)\nif [ ! $WHEEL_CURRENT_INDEX = 0 ] ; then\n    value=$(cut -f 2 -d &quot;=&quot; value.txt)\nelse\n    value=0\nfi\nx=$(($result * $WHEEL_CURRENT_INDEX + $value))\necho $WHEEL_CURRENT_INDEX\necho value=$x\necho value=$x &gt; value.txt\nexit 0\n</code></pre>\n<h2 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">ワークフロー実行結果 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/while/While_finished.png\" alt=\"img\" title=\"While_finished\"></p>\n<h2 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">ループインスタンスの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p>(参考：<a href=\"../4_component/3_For.html\">ループインスタンスの削除</a>)</p>\n",
      "id": 16
    },
    {
      "path": "WHEEL_manual/4_component/6_Source.md",
      "url": "WHEEL_manual/4_component/6_Source.html",
      "content": "# Source\n\n![img](./img/source/source.png \"source\")\n\nSourceコンポーネントは、実際のプロジェクト実行に先立って\n[ outputFile ]プロパティに指定されたファイルの実体を用意する処理を行います。\n\nSourceコンポーネントのプロパティは以下です。  \n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| uploadOnDemand | チェックボックス | プロジェクト実行開始時にクライアントからアップロードさせるかどうかのフラグ |\n\n# Sourceコンポーネントの使用例\n\nSourceコンポーネントのサンプルワークフローを示します。  \nSourceコンポーネントで後続コンポーネントにファイルを渡す方法は3パターンあります。  \n\n1. [ outputFile ]プロパティに指定したファイルを渡す（FilesエリアにoutputFileで指定したファイルしか存在しない場合）\n1. プロジェクト実行時に表示されるダイアログで指定したファイルを渡す（Filesエリアに複数ファイルが存在する場合）\n1. プロジェクト実行時に表示されるファイルブラウザで指定したファイルを渡す（[ uploadOnDemand ]プロパティが有効の場合）\n\nそれぞれの設定方法を以下のサンプルワークフローを用いて説明します。  \nこのサンプルワークフローでは、sourceコンポーネントに設定したテキストファイルを後続のtaskコンポーネントに渡して、テキストファイルの内容を標準出力させます。\n\n## sourceワークフロー構成図\n\n![img](./img/source/Source_workflow.png \"Source_workflow\")  \n\n## 各コンポーネントのプロパティ\n\n> task1（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | task1 |\n| Script | echo.sh |\n| InputFiles | input.txt |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | echo.sh |  \n\n#### ・echo.sh\n\n```\n#!/bin/bash\ncat input.txt\nexit 0\n```\n\n※ task2, task3についても同様の設定\n\n> source1 (Sourceコンポーネント)\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | source1 |\n| OutputFiles | output_1.txt |\n| uploadOnDemand | チェックしない |\n| Files | output_1.txt |\n\n#### ・output_1.txt\n\n```\nHello Task1\n```\n\n> source2 (Sourceコンポーネント)\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | source2 |\n| OutputFiles | output_1.txt |\n| uploadOnDemand | チェックしない |\n| Files | output_1.txt, output_2.txt |\n\n#### ・output_1.txt\n\n```\nHello Task1\n```\n\n#### ・output_2.txt\n\n```\nHello Task2\n```\n\n> source3 (Sourceコンポーネント)\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | source3 |\n| OutputFiles | dammy |\n| uploadOnDemand | チェックする |\n| Files | dammy |\n\n#### ・dammy\noutputファイルはダイアログからアップロードするため、任意のダミーファイルをoutputファイルに設定します  \n今回は\"dammy\"という名前の空ファイルを設定しました\n\n#### ・output_3.txt\n\n```\nHello Task3\n```\n\noutput_3.txtは、ワークフローを実行した際にアップロードするファイルです  \nWebブラウザを起動しているマシンに存在する必要があります\n\n## sourceワークフロー実行\n\nサンプルワークフローを実行すると、Filesエリアに複数ファイルを持っている\"source2\"コンポーネントを実行するにあたり  \n下記のダイアログが表示されます。セレクトボックスで\"output_2.txt\"を選択して「OK」をクリックします  \n\n![img](./img/source/select_outputfile.png \"select_outputfile\")  \n\n次に、uploadOnDemandにチェックを入れている\"source3\"コンポーネントを実行するにあたり  \n下記のダイアログが表示されます。「OK」をクリックします\n\n![img](./img/source/upload_dialog.png \"upload_dialog\")  \n\n次にアップロードするファイルを選択するダイアログが表示されます。  \n任意のディレクトリに格納していた\"output_3.txt\"を選択します。\n\n![img](./img/source/file_dialog.png \"file_dialog\")  \n\nsouceコンポーネントのoutputファイルの設定が完了すると、ワークフローがrunningになります  \nワークフローの結果が下記になります\n\n![img](./img/source/Source_workflow_result.png \"Source_workflow_result\")  \n",
      "html": "<h1 id=\"source\">Source <a class=\"heading-anchor-permalink\" href=\"#source\">#</a></h1>\n<p><img src=\"./img/source/source.png\" alt=\"img\" title=\"source\"></p>\n<p>Sourceコンポーネントは、実際のプロジェクト実行に先立って\n[ outputFile ]プロパティに指定されたファイルの実体を用意する処理を行います。</p>\n<p>Sourceコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>uploadOnDemand</td>\n<td>チェックボックス</td>\n<td>プロジェクト実行開始時にクライアントからアップロードさせるかどうかのフラグ</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"source%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Sourceコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#source%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>Sourceコンポーネントのサンプルワークフローを示します。<br>\nSourceコンポーネントで後続コンポーネントにファイルを渡す方法は3パターンあります。</p>\n<ol>\n<li>[ outputFile ]プロパティに指定したファイルを渡す（FilesエリアにoutputFileで指定したファイルしか存在しない場合）</li>\n<li>プロジェクト実行時に表示されるダイアログで指定したファイルを渡す（Filesエリアに複数ファイルが存在する場合）</li>\n<li>プロジェクト実行時に表示されるファイルブラウザで指定したファイルを渡す（[ uploadOnDemand ]プロパティが有効の場合）</li>\n</ol>\n<p>それぞれの設定方法を以下のサンプルワークフローを用いて説明します。<br>\nこのサンプルワークフローでは、sourceコンポーネントに設定したテキストファイルを後続のtaskコンポーネントに渡して、テキストファイルの内容を標準出力させます。</p>\n<h2 id=\"source%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">sourceワークフロー構成図 <a class=\"heading-anchor-permalink\" href=\"#source%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/source/Source_workflow.png\" alt=\"img\" title=\"Source_workflow\"></p>\n<h2 id=\"%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">各コンポーネントのプロパティ <a class=\"heading-anchor-permalink\" href=\"#%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h2>\n<blockquote>\n<p>task1（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>task1</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://echo.sh\">echo.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>input.txt</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://echo.sh\">echo.sh</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBecho.sh\">・<a href=\"http://echo.sh\">echo.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBecho.sh\">#</a></h4>\n<pre><code>#!/bin/bash\ncat input.txt\nexit 0\n</code></pre>\n<p>※ task2, task3についても同様の設定</p>\n<blockquote>\n<p>source1 (Sourceコンポーネント)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>source1</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>output_1.txt</td>\n</tr>\n<tr>\n<td>uploadOnDemand</td>\n<td>チェックしない</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>output_1.txt</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBoutput_1.txt\">・output_1.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBoutput_1.txt\">#</a></h4>\n<pre><code>Hello Task1\n</code></pre>\n<blockquote>\n<p>source2 (Sourceコンポーネント)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>source2</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>output_1.txt</td>\n</tr>\n<tr>\n<td>uploadOnDemand</td>\n<td>チェックしない</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>output_1.txt, output_2.txt</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBoutput_1.txt-2\">・output_1.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBoutput_1.txt-2\">#</a></h4>\n<pre><code>Hello Task1\n</code></pre>\n<h4 id=\"%E3%83%BBoutput_2.txt\">・output_2.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBoutput_2.txt\">#</a></h4>\n<pre><code>Hello Task2\n</code></pre>\n<blockquote>\n<p>source3 (Sourceコンポーネント)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>source3</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>dammy</td>\n</tr>\n<tr>\n<td>uploadOnDemand</td>\n<td>チェックする</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>dammy</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBdammy\">・dammy <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBdammy\">#</a></h4>\n<p>outputファイルはダイアログからアップロードするため、任意のダミーファイルをoutputファイルに設定します<br>\n今回は&quot;dammy&quot;という名前の空ファイルを設定しました</p>\n<h4 id=\"%E3%83%BBoutput_3.txt\">・output_3.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBoutput_3.txt\">#</a></h4>\n<pre><code>Hello Task3\n</code></pre>\n<p>output_3.txtは、ワークフローを実行した際にアップロードするファイルです<br>\nWebブラウザを起動しているマシンに存在する必要があります</p>\n<h2 id=\"source%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C\">sourceワークフロー実行 <a class=\"heading-anchor-permalink\" href=\"#source%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<p>サンプルワークフローを実行すると、Filesエリアに複数ファイルを持っている&quot;source2&quot;コンポーネントを実行するにあたり<br>\n下記のダイアログが表示されます。セレクトボックスで&quot;output_2.txt&quot;を選択して「OK」をクリックします</p>\n<p><img src=\"./img/source/select_outputfile.png\" alt=\"img\" title=\"select_outputfile\"></p>\n<p>次に、uploadOnDemandにチェックを入れている&quot;source3&quot;コンポーネントを実行するにあたり<br>\n下記のダイアログが表示されます。「OK」をクリックします</p>\n<p><img src=\"./img/source/upload_dialog.png\" alt=\"img\" title=\"upload_dialog\"></p>\n<p>次にアップロードするファイルを選択するダイアログが表示されます。<br>\n任意のディレクトリに格納していた&quot;output_3.txt&quot;を選択します。</p>\n<p><img src=\"./img/source/file_dialog.png\" alt=\"img\" title=\"file_dialog\"></p>\n<p>souceコンポーネントのoutputファイルの設定が完了すると、ワークフローがrunningになります<br>\nワークフローの結果が下記になります</p>\n<p><img src=\"./img/source/Source_workflow_result.png\" alt=\"img\" title=\"Source_workflow_result\"></p>\n",
      "id": 17
    },
    {
      "path": "WHEEL_manual/4_component/7_Viewer.md",
      "url": "WHEEL_manual/4_component/7_Viewer.html",
      "content": "# Viewer\n\n![img](./img/viewer/viewer.png \"viewer\")  \n\nViewerコンポーネントは、[ inputFiles ]プロパティに指定したファイルを収集するために使用します。  \ninputFilesプロパティに指定されたファイルを先行コンポーネントから受け取った後、  \nブラウザにて表示な可能なファイル（画像ファイル）が存在する場合は、別タブを起動し表示します。\n\nViewerコンポーネントのプロパティは以下です。  \n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル *1 |\n\n*1 ファイル形式は画像ファイル（拡張子png, jpg, gif, bmp）をサポートしています。  \n\n# Viewerコンポーネントの使用例\n\nViewerコンポーネントのサンプルを示します。  \nこのサンプルでは、 captureTaskで撮影したスクリーンショット画像をsampleViewerに渡し、\n別タブ（WHEEL viewer）で結果を確認します。\n\nこのワークフローは下記の処理を行います。\n\n1. captureTaskコンポーネントにより、スクリーンショットを撮影する\n1. スクリーンショットの画像ファイルをsampleViewerコンポーネントに渡す\n1. 「WHEEL viewer」を新規タブで開く\n1. 1.で撮影したスクリーンショット画像を表示する\n  \n## Viewerワークフロー構成図\n\n![img](./img/viewer/Viewer_workflow.png \"Viewer_workflow\")  \n\n## 各コンポーネントのプロパティ\n\n> captureTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | captureTask |\n| Script | capture.sh |\n| InputFiles | - |\n| OutputFiles | capture.png |\n| Remotehost | localhost |\n| Files | capture.sh, capture.png*1 |\n\n*1 capture.pngはcaputure.sh実行後に生成されるファイルです\n\n#### ・ capture.sh\n\n```\n#!/bin/bash\nCURRENT_DIR=$(pwd)\necho CURRENT_DIR = $CURRENT_DIR\nscreencapture -m $CURRENT_DIR/capture.png\nexit 0\n```\n\n> sampleViewer(VIewerコンポーネント)\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleViewer |\n| InputFiles | capture.png |\n| Files | capture.png*2 |\n\n*2 capture.pngはcaptureTaskから渡されるファイルです\n\n## Viewer ワークフロー実行結果\n\n![img](./img/viewer/WHEEL_viewer.png \"WHEEL_viewer\")",
      "html": "<h1 id=\"viewer\">Viewer <a class=\"heading-anchor-permalink\" href=\"#viewer\">#</a></h1>\n<p><img src=\"./img/viewer/viewer.png\" alt=\"img\" title=\"viewer\"></p>\n<p>Viewerコンポーネントは、[ inputFiles ]プロパティに指定したファイルを収集するために使用します。<br>\ninputFilesプロパティに指定されたファイルを先行コンポーネントから受け取った後、<br>\nブラウザにて表示な可能なファイル（画像ファイル）が存在する場合は、別タブを起動し表示します。</p>\n<p>Viewerコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル *1</td>\n</tr>\n</tbody>\n</table>\n<p>*1 ファイル形式は画像ファイル（拡張子png, jpg, gif, bmp）をサポートしています。</p>\n<h1 id=\"viewer%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Viewerコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#viewer%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>Viewerコンポーネントのサンプルを示します。<br>\nこのサンプルでは、 captureTaskで撮影したスクリーンショット画像をsampleViewerに渡し、\n別タブ（WHEEL viewer）で結果を確認します。</p>\n<p>このワークフローは下記の処理を行います。</p>\n<ol>\n<li>captureTaskコンポーネントにより、スクリーンショットを撮影する</li>\n<li>スクリーンショットの画像ファイルをsampleViewerコンポーネントに渡す</li>\n<li>「WHEEL viewer」を新規タブで開く</li>\n<li>1.で撮影したスクリーンショット画像を表示する</li>\n</ol>\n<h2 id=\"viewer%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">Viewerワークフロー構成図 <a class=\"heading-anchor-permalink\" href=\"#viewer%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/viewer/Viewer_workflow.png\" alt=\"img\" title=\"Viewer_workflow\"></p>\n<h2 id=\"%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">各コンポーネントのプロパティ <a class=\"heading-anchor-permalink\" href=\"#%E5%90%84%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h2>\n<blockquote>\n<p>captureTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>captureTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://capture.sh\">capture.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>capture.png</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://capture.sh\">capture.sh</a>, capture.png*1</td>\n</tr>\n</tbody>\n</table>\n<p>*1 capture.pngはcaputure.sh実行後に生成されるファイルです</p>\n<h4 id=\"%E3%83%BB-capture.sh\">・ <a href=\"http://capture.sh\">capture.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BB-capture.sh\">#</a></h4>\n<pre><code>#!/bin/bash\nCURRENT_DIR=$(pwd)\necho CURRENT_DIR = $CURRENT_DIR\nscreencapture -m $CURRENT_DIR/capture.png\nexit 0\n</code></pre>\n<blockquote>\n<p>sampleViewer(VIewerコンポーネント)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleViewer</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>capture.png</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>capture.png*2</td>\n</tr>\n</tbody>\n</table>\n<p>*2 capture.pngはcaptureTaskから渡されるファイルです</p>\n<h2 id=\"viewer-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">Viewer ワークフロー実行結果 <a class=\"heading-anchor-permalink\" href=\"#viewer-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p><img src=\"./img/viewer/WHEEL_viewer.png\" alt=\"img\" title=\"WHEEL_viewer\"></p>\n",
      "id": 18
    },
    {
      "path": "WHEEL_manual/4_component/8_ParameterStudy.md",
      "url": "WHEEL_manual/4_component/8_ParameterStudy.html",
      "content": "# ParameterStudy\n\n![img](./img/parameterstudy/PS.png \"Parameter Study\")  \n\nParameterStudyコンポーネント（以下、PSコンポーネント）は、parameter setting fileプロパティに設定されたファイルを読み込み、  \nそのファイルに指定されたパラメータ展開を行います。  \nコンポーネント実行時にはループ系コンポーネントと同様にディレクトリのコピーを作成します。  \nループ系コンポーネントとは異なり、コピーされた各ディレクトリの処理は並行して行われます。  \n\nPSコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| parameter setting file | ファイル名 | パラメータスタディの設定を記述したファイル |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *1 |\n\n*1 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n# PSコンポーネントの使用例\n\nPSコンポーネントは、パラメトリックスタディ用のコンポーネントです。  \nWHEELのPS用ファイル編集機能によりインプットデータにパラメータ設定を行うことで、簡単にPSを実施することができます。  \n以下に、サンプルを用いてPSワークフローの設定方法を示します。  \n\nまた、本章では、ソルバーの例として、ある空間に位置する3点の座標値からなる三角形の面積を導出するプログラム（面積算出ソルバー:wheel_tutorial_solver.cc）を用います。\n\n## PSワークフロー構成図\n\n![img](./img/parameterstudy/PS_workflow.png \"PS_workflow\")  \n\n> samplePS （PSコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | samplePS |\n| InputFiles | - |\n| OutputFiles | - |\n| Parameter setting file | parameterSetting.json*1 |  \n| Files | inputData.txt, parameterSetting.json |\n*1 inputdata.txtのパラメータ展開情報をもつJSONファイル、詳細は後述  \n\n#### ・inputData.txt\n\n```\n0, 0, 0\n0, {{ hoge }}, 0\n10, 0, 0\n```\n\n#### ・parameterSetting.json\n\n```\n{\n    \"version\": 2,\n    \"targetFiles\": [\n        {\n            \"targetName\": \"inputData.txt\",\n            \"targetNode\": \"daaecfc0-26bf-11ea-85b6-b15713548352\"\n        }\n    ],\n    \"params\": [\n        {\n            \"keyword\": \"10\",\n            \"min\": 6,\n            \"max\": 10,\n            \"step\": 1\n        }\n    ],\n    \"scatter\": [],\n    \"gather\": []\n}\n```\n\n※ \"targetNode\"の値ははWHEELが一意に設定します\n\n## PSワークフロー子階層　構成図\n\n![img](./img/parameterstudy/PS_child_workflow.png \"PS_child_workflow\")\n\n> moveFileTask（Taskコンポーネント）  \n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | moveFileTask |\n| Script | moveFiles.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | localhost  |  \n| Files | moveFiles.sh |  \n\n#### ・moveFiles.sh\n\n```\n#!/bin/bash  \nmv ../inputData.txt ../calcTask\nexit 0\n```\n\n> calcTask（Taskコンポーネント）\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | calcTask |\n| Script | calc.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | calc.sh, wheel_tutorial_solver.cc, inputdata.txt *3 |  \n\n*3 inputdata.txtは、moveFileTask実行後にPSディレクトリより移動されるファイルです。\n\n#### ・calc.sh\n\n```\n#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver\n./wheel_tutorial_solver\nexit 0\n```\n\n## PS用ファイル編集画面\n\n![img](./img/parameterstudy/edit.png \"edit\")\n\n入力データにパラメータ設定を行う場合、プロパティ画面[ Files ]エリアよりファイル編集を行います。  \n手順は以下です。\n\n1. PSコンポーネントにパラメータ設定を行う入力データファイルをインポート、または作成する\n1. 準備したファイルをクリックする\n1. [ Files ]エリアにあるテキストエディタ起動ボタンをクリックする\n\n上記操作により、テキストエディタ画面が表示されます。  \n以降、基本的な使用方法を示します。詳細については、[テキストエディタ画面仕様説明](../3_workflow_screen/3_rapid.md)をご参考ください。\n\n#### PS用ファイル編集画面\n\n![img](./img/parameterstudy/edit_for_PS.png \"edit_for_PS\")  \n\nテキストエディタ画面でのパラメータ設定手順は以下です。テキストエディタ画面右のPS用エリアを使用します。  \n次の手順では、上記図 {{ hoge }}を「6から10」まで変化させる場合の設定を示しています。  \n\n1. パラメータ書き換え対象ファイルを設定する  \n　1.「＋Add New Target File」ボタンをクリックする  \n　2. ターゲットファイルにinputdata.txtを設定する\n1. パラメータ書き換え部分を選択する\n1. 「Parameters」に選択した部分が正しく表示されていることを確認し、「+ Add New Parameter」をクリックする\n1. 選択した部分に対し変化させる値を設定し、「save」をクリックする（min:6, max:10, step:1）\n1. 「SAVE ALL FILES」をクリックし設定内容を保存する\n1. 設定が終了したら、右上のアイコンをクリックしてグラフビュー画面に遷移する\n\n#### 1.1 「＋Add New Target File」\n\n![img](./img/parameterstudy/add_targetFile.png \"add_targetFile\")  \n\n#### 1.2 ターゲットファイルの設定\n\n![img](./img/parameterstudy/set_targetFile.png \"set_targetFile\")  \n\n#### 2. パラメータ書き換え部分の選択\n\n![img](./img/parameterstudy/select_param.png \"select_param\")  \n\n#### 3. パラメータの設定\n\n![img](./img/parameterstudy/set_param.png \"set_param\")  \n\n#### 4. 設定の保存\n\n![img](./img/parameterstudy/save_files.png \"save_files\")  \n\n#### 5. 編集したファイル名.jsonの確認\n\n保存後、ワークフロー編集画面に戻りプロパティを表示すると、「 parameterSetting.json 」ファイルが作成されていることを確認します。  \nこのデータをプロパティ[ parameter setting file ]に設定します。\n\n![img](./img/parameterstudy/set_json.png \"set_json\")  \n\n以上がParameter Studyワークフローにおけるパラメータ設定手順になります。\n\n## PSワークフローの実行\n\nPSワークフロー実行時のWHEELの動作について説明します。  \nPSワークフロー実行時には、プロジェクトディレクトリ内に変化させるパラメータの数だけディレクトリを生成します。  \n上記例では、三角形を構成する一つの頂点のY座標値を6から10まで変更しているため、「10-6＋1=5」計5個のディレクトリが生成されます。  \n各ディレクトリには、PSコンポーネントのデータ及びパラメータ変化させたインプットデータが格納されています。\n\n#### プロジェクトディレクトリ内に生成されるディレクトリ\n\n![img](./img/parameterstudy/project_directory.png \"project_directory\")  \n\nPSワークフローを実行すると生成されたワークフローが順に実行されます。  \n実行後の結果は以下です。\n\n#### PSワークフロー実行結果\n\n![img](./img/parameterstudy/PS_finished.png \"PS_finished\")\n\nまた、標準出力（Stdout）の結果は以下です。  \n\n ![img](./img/parameterstudy/PS_stdout.png \"PS_stdout\")\n\n#### ループインスタンスの削除\n\n![img](./img/parameterstudy/PS_delete.png \"PS_delete\")\n\ndelete all loop instanceにチェックを入れると、計算の終了したループインスタンスをすべて削除します。",
      "html": "<h1 id=\"parameterstudy\">ParameterStudy <a class=\"heading-anchor-permalink\" href=\"#parameterstudy\">#</a></h1>\n<p><img src=\"./img/parameterstudy/PS.png\" alt=\"img\" title=\"Parameter Study\"></p>\n<p>ParameterStudyコンポーネント（以下、PSコンポーネント）は、parameter setting fileプロパティに設定されたファイルを読み込み、<br>\nそのファイルに指定されたパラメータ展開を行います。<br>\nコンポーネント実行時にはループ系コンポーネントと同様にディレクトリのコピーを作成します。<br>\nループ系コンポーネントとは異なり、コピーされた各ディレクトリの処理は並行して行われます。</p>\n<p>PSコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>parameter setting file</td>\n<td>ファイル名</td>\n<td>パラメータスタディの設定を記述したファイル</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *1</td>\n</tr>\n</tbody>\n</table>\n<p>*1 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h1 id=\"ps%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">PSコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#ps%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>PSコンポーネントは、パラメトリックスタディ用のコンポーネントです。<br>\nWHEELのPS用ファイル編集機能によりインプットデータにパラメータ設定を行うことで、簡単にPSを実施することができます。<br>\n以下に、サンプルを用いてPSワークフローの設定方法を示します。</p>\n<p>また、本章では、ソルバーの例として、ある空間に位置する3点の座標値からなる三角形の面積を導出するプログラム（面積算出ソルバー:wheel_tutorial_solver.cc）を用います。</p>\n<h2 id=\"ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">PSワークフロー構成図 <a class=\"heading-anchor-permalink\" href=\"#ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/parameterstudy/PS_workflow.png\" alt=\"img\" title=\"PS_workflow\"></p>\n<blockquote>\n<p>samplePS （PSコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>samplePS</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parameter setting file</td>\n<td>parameterSetting.json*1</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>inputData.txt, parameterSetting.json</td>\n</tr>\n</tbody>\n</table>\n<p>*1 inputdata.txtのパラメータ展開情報をもつJSONファイル、詳細は後述</p>\n<h4 id=\"%E3%83%BBinputdata.txt\">・inputData.txt <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBinputdata.txt\">#</a></h4>\n<pre><code>0, 0, 0\n0, {{ hoge }}, 0\n10, 0, 0\n</code></pre>\n<h4 id=\"%E3%83%BBparametersetting.json\">・parameterSetting.json <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBparametersetting.json\">#</a></h4>\n<pre><code>{\n    &quot;version&quot;: 2,\n    &quot;targetFiles&quot;: [\n        {\n            &quot;targetName&quot;: &quot;inputData.txt&quot;,\n            &quot;targetNode&quot;: &quot;daaecfc0-26bf-11ea-85b6-b15713548352&quot;\n        }\n    ],\n    &quot;params&quot;: [\n        {\n            &quot;keyword&quot;: &quot;10&quot;,\n            &quot;min&quot;: 6,\n            &quot;max&quot;: 10,\n            &quot;step&quot;: 1\n        }\n    ],\n    &quot;scatter&quot;: [],\n    &quot;gather&quot;: []\n}\n</code></pre>\n<p>※ &quot;targetNode&quot;の値ははWHEELが一意に設定します</p>\n<h2 id=\"ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">PSワークフロー子階層　構成図 <a class=\"heading-anchor-permalink\" href=\"#ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AD%90%E9%9A%8E%E5%B1%A4-%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p><img src=\"./img/parameterstudy/PS_child_workflow.png\" alt=\"img\" title=\"PS_child_workflow\"></p>\n<blockquote>\n<p>moveFileTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>moveFileTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://moveFiles.sh\">moveFiles.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://moveFiles.sh\">moveFiles.sh</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"%E3%83%BBmovefiles.sh\">・<a href=\"http://moveFiles.sh\">moveFiles.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBmovefiles.sh\">#</a></h4>\n<pre><code>#!/bin/bash  \nmv ../inputData.txt ../calcTask\nexit 0\n</code></pre>\n<blockquote>\n<p>calcTask（Taskコンポーネント）</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>calcTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://calc.sh\">calc.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://calc.sh\">calc.sh</a>, wheel_tutorial_solver.cc, inputdata.txt *3</td>\n</tr>\n</tbody>\n</table>\n<p>*3 inputdata.txtは、moveFileTask実行後にPSディレクトリより移動されるファイルです。</p>\n<h4 id=\"%E3%83%BBcalc.sh\">・<a href=\"http://calc.sh\">calc.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBcalc.sh\">#</a></h4>\n<pre><code>#!/bin/bash\ng++ wheel_tutorial_solver.cc -o wheel_tutorial_solver\n./wheel_tutorial_solver\nexit 0\n</code></pre>\n<h2 id=\"ps%E7%94%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2\">PS用ファイル編集画面 <a class=\"heading-anchor-permalink\" href=\"#ps%E7%94%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2\">#</a></h2>\n<p><img src=\"./img/parameterstudy/edit.png\" alt=\"img\" title=\"edit\"></p>\n<p>入力データにパラメータ設定を行う場合、プロパティ画面[ Files ]エリアよりファイル編集を行います。<br>\n手順は以下です。</p>\n<ol>\n<li>PSコンポーネントにパラメータ設定を行う入力データファイルをインポート、または作成する</li>\n<li>準備したファイルをクリックする</li>\n<li>[ Files ]エリアにあるテキストエディタ起動ボタンをクリックする</li>\n</ol>\n<p>上記操作により、テキストエディタ画面が表示されます。<br>\n以降、基本的な使用方法を示します。詳細については、<a href=\"../3_workflow_screen/3_rapid.html\">テキストエディタ画面仕様説明</a>をご参考ください。</p>\n<h4 id=\"ps%E7%94%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2-2\">PS用ファイル編集画面 <a class=\"heading-anchor-permalink\" href=\"#ps%E7%94%A8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%B7%A8%E9%9B%86%E7%94%BB%E9%9D%A2-2\">#</a></h4>\n<p><img src=\"./img/parameterstudy/edit_for_PS.png\" alt=\"img\" title=\"edit_for_PS\"></p>\n<p>テキストエディタ画面でのパラメータ設定手順は以下です。テキストエディタ画面右のPS用エリアを使用します。<br>\n次の手順では、上記図 {{ hoge }}を「6から10」まで変化させる場合の設定を示しています。</p>\n<ol>\n<li>パラメータ書き換え対象ファイルを設定する<br>\n　1.「＋Add New Target File」ボタンをクリックする<br>\n　2. ターゲットファイルにinputdata.txtを設定する</li>\n<li>パラメータ書き換え部分を選択する</li>\n<li>「Parameters」に選択した部分が正しく表示されていることを確認し、「+ Add New Parameter」をクリックする</li>\n<li>選択した部分に対し変化させる値を設定し、「save」をクリックする（min:6, max:10, step:1）</li>\n<li>「SAVE ALL FILES」をクリックし設定内容を保存する</li>\n<li>設定が終了したら、右上のアイコンをクリックしてグラフビュー画面に遷移する</li>\n</ol>\n<h4 id=\"1.1-%E3%80%8C%EF%BC%8Badd-new-target-file%E3%80%8D\">1.1 「＋Add New Target File」 <a class=\"heading-anchor-permalink\" href=\"#1.1-%E3%80%8C%EF%BC%8Badd-new-target-file%E3%80%8D\">#</a></h4>\n<p><img src=\"./img/parameterstudy/add_targetFile.png\" alt=\"img\" title=\"add_targetFile\"></p>\n<h4 id=\"1.2-%E3%82%BF%E3%83%BC%E3%82%B2%E3%83%83%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\">1.2 ターゲットファイルの設定 <a class=\"heading-anchor-permalink\" href=\"#1.2-%E3%82%BF%E3%83%BC%E3%82%B2%E3%83%83%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h4>\n<p><img src=\"./img/parameterstudy/set_targetFile.png\" alt=\"img\" title=\"set_targetFile\"></p>\n<h4 id=\"2.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E9%83%A8%E5%88%86%E3%81%AE%E9%81%B8%E6%8A%9E\">2. パラメータ書き換え部分の選択 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E9%83%A8%E5%88%86%E3%81%AE%E9%81%B8%E6%8A%9E\">#</a></h4>\n<p><img src=\"./img/parameterstudy/select_param.png\" alt=\"img\" title=\"select_param\"></p>\n<h4 id=\"3.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A\">3. パラメータの設定 <a class=\"heading-anchor-permalink\" href=\"#3.-%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h4>\n<p><img src=\"./img/parameterstudy/set_param.png\" alt=\"img\" title=\"set_param\"></p>\n<h4 id=\"4.-%E8%A8%AD%E5%AE%9A%E3%81%AE%E4%BF%9D%E5%AD%98\">4. 設定の保存 <a class=\"heading-anchor-permalink\" href=\"#4.-%E8%A8%AD%E5%AE%9A%E3%81%AE%E4%BF%9D%E5%AD%98\">#</a></h4>\n<p><img src=\"./img/parameterstudy/save_files.png\" alt=\"img\" title=\"save_files\"></p>\n<h4 id=\"5.-%E7%B7%A8%E9%9B%86%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D.json%E3%81%AE%E7%A2%BA%E8%AA%8D\">5. 編集したファイル名.jsonの確認 <a class=\"heading-anchor-permalink\" href=\"#5.-%E7%B7%A8%E9%9B%86%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D.json%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h4>\n<p>保存後、ワークフロー編集画面に戻りプロパティを表示すると、「 parameterSetting.json 」ファイルが作成されていることを確認します。<br>\nこのデータをプロパティ[ parameter setting file ]に設定します。</p>\n<p><img src=\"./img/parameterstudy/set_json.png\" alt=\"img\" title=\"set_json\"></p>\n<p>以上がParameter Studyワークフローにおけるパラメータ設定手順になります。</p>\n<h2 id=\"ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C\">PSワークフローの実行 <a class=\"heading-anchor-permalink\" href=\"#ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<p>PSワークフロー実行時のWHEELの動作について説明します。<br>\nPSワークフロー実行時には、プロジェクトディレクトリ内に変化させるパラメータの数だけディレクトリを生成します。<br>\n上記例では、三角形を構成する一つの頂点のY座標値を6から10まで変更しているため、「10-6＋1=5」計5個のディレクトリが生成されます。<br>\n各ディレクトリには、PSコンポーネントのデータ及びパラメータ変化させたインプットデータが格納されています。</p>\n<h4 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E5%86%85%E3%81%AB%E7%94%9F%E6%88%90%E3%81%95%E3%82%8C%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA\">プロジェクトディレクトリ内に生成されるディレクトリ <a class=\"heading-anchor-permalink\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E5%86%85%E3%81%AB%E7%94%9F%E6%88%90%E3%81%95%E3%82%8C%E3%82%8B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA\">#</a></h4>\n<p><img src=\"./img/parameterstudy/project_directory.png\" alt=\"img\" title=\"project_directory\"></p>\n<p>PSワークフローを実行すると生成されたワークフローが順に実行されます。<br>\n実行後の結果は以下です。</p>\n<h4 id=\"ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">PSワークフロー実行結果 <a class=\"heading-anchor-permalink\" href=\"#ps%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h4>\n<p><img src=\"./img/parameterstudy/PS_finished.png\" alt=\"img\" title=\"PS_finished\"></p>\n<p>また、標準出力（Stdout）の結果は以下です。</p>\n<p><img src=\"./img/parameterstudy/PS_stdout.png\" alt=\"img\" title=\"PS_stdout\"></p>\n<h4 id=\"%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">ループインスタンスの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AB%E3%83%BC%E3%83%97%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h4>\n<p><img src=\"./img/parameterstudy/PS_delete.png\" alt=\"img\" title=\"PS_delete\"></p>\n<p>delete all loop instanceにチェックを入れると、計算の終了したループインスタンスをすべて削除します。</p>\n",
      "id": 19
    },
    {
      "path": "WHEEL_manual/4_component/99_component_design.md",
      "url": "WHEEL_manual/4_component/99_component_design.html",
      "content": "# コンポーネントプロパティの仕様詳細\n\n## ■inputFileおよびoutputFile   \nコンポーネントのinputFiles, outputFilesに設定可能な入力値について説明します。　　\n\ninputFiles, outputFilesには以下の4種類の文字列を指定することができます。  \n・空文字列(inputのみ)  \n・path.sep('\\\\'でも'/'でも良い)を含む文字列  \n・path.sep('\\\\'でも'/'でも良い)を含まない文字列  \n・globパターン(outputのみ)  \n\n### <u>◯inputが空文字列の場合</u>  \ninputは後続ノードのrootディレクトリ(そのノードのpathプロパティが指定されたディレクトリ)が指定されてものとして扱われます。  \n\n### <u>◯inputがpath.sepを含まない文字列の場合</u>  \noutputが単一のファイルの場合、inputはファイル名として扱われ、別名でのシンボリックリンクが作成されます。  \noutputがディレクトリの場合、inputはディレクトリ名として扱われ、その名前でディレクトリへのシンボリックリンクが作成されます。  \noutputがglobパターンの場合、inputはディレクトリ名として扱われ、そのディレクトリの下にglobパターンで指定されたファイルへのシンボリックリンクが作成されます。  \nいずれの場合でも、outputの指定文字列にpath.sepが含まれた場合は後続ノード側でも同じディレクトリが作成された上でシンボリックリンクが作成されます。  \n\n### <u>◯inputがpath.sepを含む文字列の場合</u>  \n最後のpath.sepまでを後続ノードのrootディレクトリからの相対ディレクトリ名として扱います。  \n先頭と末尾のpath.sepは無視され、それぞれ取り除いた値が指定されたものとして扱います。  \n例えば'/foo/bar/'という指定がされた場合は、'foo/bar'が指定されたものとして扱います。  \n(もしあれば)末尾のものを除いて最後のpath.sep以降に続く文字列は\"inputがpath.sepを含まない文字列の場合\"に準じてoutputの指定に応じた取り扱いを行います。    \n\n## ■コンポーネントディレクトリへのファイル操作\nコンポーネントで使用するファイルは、コンポーネント選択時に表示されるプロパティ画面の[ Files ]領域より設定します。  \n\n例：Workflowコンポーネントのプロパティ画面  \n\n![img](./img/component_design/property_Files.png \"property_Files\")  \n\nFiles領域の構成は、以下です。  \n\n![img](./img/component_design/Files.png \"Files\")  \n\n1. rootワークフローからの相対パス表示領域\n1. JupyterNotebookの起動ボタン\n1. コンポーネントディレクトリへの新規ディレクトリの作成ボタン\n1. コンポーネントディレクトリへの新規ファイルの作成ボタン\n1. コンポーネントディレクトリへのファイルのアップロードボタン（ファイルブラウザの起動）\n1. ファイル編集ボタン\n1. PS用ファイル編集ボタン\n\n以下で各ボタンの機能について説明します。\n\n### <u>◯コンポーネントディレクトリへの新規ディレクトリの作成</U>\nコンポーネントディレクトリへの新規ディレクトリの作成手順は以下になります。\n\n1. 新規ディレクトリを作成したいコンポーネントをクリックする。\n1. [ Files ]領域内の上記Files領域図ボタン「3」をクリックする。\n1. 表示されるダイアログより、作成するディレクトリ名を入力し、[ OK ]ボタンをクリックする。\n\n##### 新規ディレクトリの作成  \n\n![img](./img/component_design/create_directory.png \"create_directory\")  \n\n##### 作成結果 \n\n![img](./img/component_design/create_directory_result.png \"create_directory_result\")  \n\n### <u>◯コンポーネントディレクトリへの新規ファイルの作成</u>\n新規ファイルの作成もディレクトリの作成と同様に以下の手順になります。\n\n1. 新規ファイルを作成したいコンポーネントをクリックする。\n1. [ Files ]領域内の上記Files領域図ボタン「4」をクリックする。\n1. 表示されるダイアログより、作成するファイル名を入力し、[ OK ]ボタンをクリックする。\n\n### <u>◯コンポーネントディレクトリへのファイルのアップロード</u>\n\nコンポーネントディレクトリへのファイルのアップロード手順は以下になります。\n\n1. 新規ディレクトリを作成したいコンポーネントをクリックする。\n1. [ Files ]領域内の上記Files領域図ボタン「5」をクリックする。\n1. 表示されるファイルブラウザ画面、アップロードしたいファイルを選択し、[ 開く ]ボタンをクリックする。\n\n##### ファイルのアップロード \n\n![img](./img/component_design/file_upload.png \"file_upload\")  \n\n##### アップロード結果 \n\n![img](./img/component_design/file_upload_result.png \"file_upload_result\")  \n\n## ■階層間（親子間）のファイル移動    \nWorkflow, ParameterStudy, 及びループ系（For, While, Foreach）のコンポーネントは、  \nコンポーネント内にコンポーネント（子コンポーネント）を持つことができます。  \n親コンポーネントから子コンポーネントへのファイル移動は、親子間ファイル移動機能を使用することで行うことができます。  \n使用方法は以下です。  \n\n### <u>◯親階層から子階層へ</u>\n1. 渡し元コンポーネント（task0）の出力ファイルを設定する（図1参照）\n1. 渡し先コンポーネント（workflow0）の入力ファイル名を設定する\n1. 渡し元コンポーネント（task0）の出力ファイルを渡し元コンポーネント（workflow0）の入力ファイルへ接続する\n1. コンポーネントの子階層へ遷移する（図2参照）\n1. 子階層にてコンポーネントを作成する（childTask）\n1. 子コンポーネント（childTask）の入力ファイルを設定する\n1. 親コンポーネントからの入力ファイルを子コンポーネント（childTask）の入力ファイルへ接続する  \n\n##### 図1 コンポーネントの出力・入力ファイル設定（親階層から子階層へ）\n![img](./img/component_design/move_file_PtoC.png \"入出力ファイルの設定\")  \n\n##### 図2 親から子へのファイル転送\n![img](./img/component_design/PtoC_file_connection.png \"親子間ファイルの接続\")  \n\n\n### <u>◯子階層から親階層へ</u>\n1. 渡し元コンポーネント（workflow0）の出力ファイルを設定する（図3参照）\n1. 渡し先コンポーネント（task1）の入力ファイル名を設定する\n1. 渡し元コンポーネント（workflow0）の出力ファイルを渡し先コンポーネント（task1）の入力ファイルへ接続する\n1. コンポーネントの子階層へ遷移する（図4参照）\n1. 子コンポーネント（childTask）の出力ファイルを設定する\n1. 子コンポーネント（childTask）の出力ファイルを親コンポーネントの出力ファイルへ接続する\n\n##### 図3 コンポーネントの出力・入力ファイル設定（子階層から親階層へ）\n![img](./img/component_design/move_file_CtoP.png \"入出力ファイルの設定\")  \n\n##### 図4 子から親へのファイル転送\n![img](./img/component_design/CtoP_file_connection.png \"親子間ファイルの接続\")  \n\nただし、子階層において親の入力ファイルを直接出力ファイルへ渡すこと（input1.txtをoutput2.txtへ接続する　図4参照）はできません。   ",
      "html": "<h1 id=\"%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E4%BB%95%E6%A7%98%E8%A9%B3%E7%B4%B0\">コンポーネントプロパティの仕様詳細 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E4%BB%95%E6%A7%98%E8%A9%B3%E7%B4%B0\">#</a></h1>\n<h2 id=\"%E2%96%A0inputfile%E3%81%8A%E3%82%88%E3%81%B3outputfile\">■inputFileおよびoutputFile <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0inputfile%E3%81%8A%E3%82%88%E3%81%B3outputfile\">#</a></h2>\n<p>コンポーネントのinputFiles, outputFilesに設定可能な入力値について説明します。</p>\n<p>inputFiles, outputFilesには以下の4種類の文字列を指定することができます。<br>\n・空文字列(inputのみ)<br>\n・path.sep(’\\‘でも’/‘でも良い)を含む文字列<br>\n・path.sep(’\\‘でも’/'でも良い)を含まない文字列<br>\n・globパターン(outputのみ)</p>\n<h3 id=\"%E2%97%AFinput%E3%81%8C%E7%A9%BA%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A0%B4%E5%90%88\"><u>◯inputが空文字列の場合</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AFinput%E3%81%8C%E7%A9%BA%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>inputは後続ノードのrootディレクトリ(そのノードのpathプロパティが指定されたディレクトリ)が指定されてものとして扱われます。</p>\n<h3 id=\"%E2%97%AFinput%E3%81%8Cpath.sep%E3%82%92%E5%90%AB%E3%81%BE%E3%81%AA%E3%81%84%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A0%B4%E5%90%88\"><u>◯inputがpath.sepを含まない文字列の場合</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AFinput%E3%81%8Cpath.sep%E3%82%92%E5%90%AB%E3%81%BE%E3%81%AA%E3%81%84%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>outputが単一のファイルの場合、inputはファイル名として扱われ、別名でのシンボリックリンクが作成されます。<br>\noutputがディレクトリの場合、inputはディレクトリ名として扱われ、その名前でディレクトリへのシンボリックリンクが作成されます。<br>\noutputがglobパターンの場合、inputはディレクトリ名として扱われ、そのディレクトリの下にglobパターンで指定されたファイルへのシンボリックリンクが作成されます。<br>\nいずれの場合でも、outputの指定文字列にpath.sepが含まれた場合は後続ノード側でも同じディレクトリが作成された上でシンボリックリンクが作成されます。</p>\n<h3 id=\"%E2%97%AFinput%E3%81%8Cpath.sep%E3%82%92%E5%90%AB%E3%82%80%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A0%B4%E5%90%88\"><u>◯inputがpath.sepを含む文字列の場合</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AFinput%E3%81%8Cpath.sep%E3%82%92%E5%90%AB%E3%82%80%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>最後のpath.sepまでを後続ノードのrootディレクトリからの相対ディレクトリ名として扱います。<br>\n先頭と末尾のpath.sepは無視され、それぞれ取り除いた値が指定されたものとして扱います。<br>\n例えば’/foo/bar/'という指定がされた場合は、'foo/bar’が指定されたものとして扱います。<br>\n(もしあれば)末尾のものを除いて最後のpath.sep以降に続く文字列は&quot;inputがpath.sepを含まない文字列の場合&quot;に準じてoutputの指定に応じた取り扱いを行います。</p>\n<h2 id=\"%E2%96%A0%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%93%8D%E4%BD%9C\">■コンポーネントディレクトリへのファイル操作 <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%93%8D%E4%BD%9C\">#</a></h2>\n<p>コンポーネントで使用するファイルは、コンポーネント選択時に表示されるプロパティ画面の[ Files ]領域より設定します。</p>\n<p>例：Workflowコンポーネントのプロパティ画面</p>\n<p><img src=\"./img/component_design/property_Files.png\" alt=\"img\" title=\"property_Files\"></p>\n<p>Files領域の構成は、以下です。</p>\n<p><img src=\"./img/component_design/Files.png\" alt=\"img\" title=\"Files\"></p>\n<ol>\n<li>rootワークフローからの相対パス表示領域</li>\n<li>JupyterNotebookの起動ボタン</li>\n<li>コンポーネントディレクトリへの新規ディレクトリの作成ボタン</li>\n<li>コンポーネントディレクトリへの新規ファイルの作成ボタン</li>\n<li>コンポーネントディレクトリへのファイルのアップロードボタン（ファイルブラウザの起動）</li>\n<li>ファイル編集ボタン</li>\n<li>PS用ファイル編集ボタン</li>\n</ol>\n<p>以下で各ボタンの機能について説明します。</p>\n<h3 id=\"%E2%97%AF%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E6%96%B0%E8%A6%8F%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E4%BD%9C%E6%88%90\"><u>◯コンポーネントディレクトリへの新規ディレクトリの作成</U> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AF%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E6%96%B0%E8%A6%8F%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>コンポーネントディレクトリへの新規ディレクトリの作成手順は以下になります。</p>\n<ol>\n<li>新規ディレクトリを作成したいコンポーネントをクリックする。</li>\n<li>[ Files ]領域内の上記Files領域図ボタン「3」をクリックする。</li>\n<li>表示されるダイアログより、作成するディレクトリ名を入力し、[ OK ]ボタンをクリックする。</li>\n</ol>\n<h5 id=\"%E6%96%B0%E8%A6%8F%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E4%BD%9C%E6%88%90\">新規ディレクトリの作成 <a class=\"heading-anchor-permalink\" href=\"#%E6%96%B0%E8%A6%8F%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h5>\n<p><img src=\"./img/component_design/create_directory.png\" alt=\"img\" title=\"create_directory\"></p>\n<h5 id=\"%E4%BD%9C%E6%88%90%E7%B5%90%E6%9E%9C\">作成結果 <a class=\"heading-anchor-permalink\" href=\"#%E4%BD%9C%E6%88%90%E7%B5%90%E6%9E%9C\">#</a></h5>\n<p><img src=\"./img/component_design/create_directory_result.png\" alt=\"img\" title=\"create_directory_result\"></p>\n<h3 id=\"%E2%97%AF%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E6%96%B0%E8%A6%8F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"><u>◯コンポーネントディレクトリへの新規ファイルの作成</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AF%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E6%96%B0%E8%A6%8F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>新規ファイルの作成もディレクトリの作成と同様に以下の手順になります。</p>\n<ol>\n<li>新規ファイルを作成したいコンポーネントをクリックする。</li>\n<li>[ Files ]領域内の上記Files領域図ボタン「4」をクリックする。</li>\n<li>表示されるダイアログより、作成するファイル名を入力し、[ OK ]ボタンをクリックする。</li>\n</ol>\n<h3 id=\"%E2%97%AF%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\"><u>◯コンポーネントディレクトリへのファイルのアップロード</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AF%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\">#</a></h3>\n<p>コンポーネントディレクトリへのファイルのアップロード手順は以下になります。</p>\n<ol>\n<li>新規ディレクトリを作成したいコンポーネントをクリックする。</li>\n<li>[ Files ]領域内の上記Files領域図ボタン「5」をクリックする。</li>\n<li>表示されるファイルブラウザ画面、アップロードしたいファイルを選択し、[ 開く ]ボタンをクリックする。</li>\n</ol>\n<h5 id=\"%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\">ファイルのアップロード <a class=\"heading-anchor-permalink\" href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89\">#</a></h5>\n<p><img src=\"./img/component_design/file_upload.png\" alt=\"img\" title=\"file_upload\"></p>\n<h5 id=\"%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E7%B5%90%E6%9E%9C\">アップロード結果 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E7%B5%90%E6%9E%9C\">#</a></h5>\n<p><img src=\"./img/component_design/file_upload_result.png\" alt=\"img\" title=\"file_upload_result\"></p>\n<h2 id=\"%E2%96%A0%E9%9A%8E%E5%B1%A4%E9%96%93%EF%BC%88%E8%A6%AA%E5%AD%90%E9%96%93%EF%BC%89%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%A7%BB%E5%8B%95\">■階層間（親子間）のファイル移動 <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0%E9%9A%8E%E5%B1%A4%E9%96%93%EF%BC%88%E8%A6%AA%E5%AD%90%E9%96%93%EF%BC%89%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%A7%BB%E5%8B%95\">#</a></h2>\n<p>Workflow, ParameterStudy, 及びループ系（For, While, Foreach）のコンポーネントは、<br>\nコンポーネント内にコンポーネント（子コンポーネント）を持つことができます。<br>\n親コンポーネントから子コンポーネントへのファイル移動は、親子間ファイル移動機能を使用することで行うことができます。<br>\n使用方法は以下です。</p>\n<h3 id=\"%E2%97%AF%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%B8\"><u>◯親階層から子階層へ</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AF%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%B8\">#</a></h3>\n<ol>\n<li>渡し元コンポーネント（task0）の出力ファイルを設定する（図1参照）</li>\n<li>渡し先コンポーネント（workflow0）の入力ファイル名を設定する</li>\n<li>渡し元コンポーネント（task0）の出力ファイルを渡し元コンポーネント（workflow0）の入力ファイルへ接続する</li>\n<li>コンポーネントの子階層へ遷移する（図2参照）</li>\n<li>子階層にてコンポーネントを作成する（childTask）</li>\n<li>子コンポーネント（childTask）の入力ファイルを設定する</li>\n<li>親コンポーネントからの入力ファイルを子コンポーネント（childTask）の入力ファイルへ接続する</li>\n</ol>\n<h5 id=\"%E5%9B%B31-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%87%BA%E5%8A%9B%E3%83%BB%E5%85%A5%E5%8A%9B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A%EF%BC%88%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%B8%EF%BC%89\">図1 コンポーネントの出力・入力ファイル設定（親階層から子階層へ） <a class=\"heading-anchor-permalink\" href=\"#%E5%9B%B31-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%87%BA%E5%8A%9B%E3%83%BB%E5%85%A5%E5%8A%9B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A%EF%BC%88%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%B8%EF%BC%89\">#</a></h5>\n<p><img src=\"./img/component_design/move_file_PtoC.png\" alt=\"img\" title=\"入出力ファイルの設定\"></p>\n<h5 id=\"%E5%9B%B32-%E8%A6%AA%E3%81%8B%E3%82%89%E5%AD%90%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%BB%A2%E9%80%81\">図2 親から子へのファイル転送 <a class=\"heading-anchor-permalink\" href=\"#%E5%9B%B32-%E8%A6%AA%E3%81%8B%E3%82%89%E5%AD%90%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%BB%A2%E9%80%81\">#</a></h5>\n<p><img src=\"./img/component_design/PtoC_file_connection.png\" alt=\"img\" title=\"親子間ファイルの接続\"></p>\n<h3 id=\"%E2%97%AF%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%B8\"><u>◯子階層から親階層へ</u> <a class=\"heading-anchor-permalink\" href=\"#%E2%97%AF%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%B8\">#</a></h3>\n<ol>\n<li>渡し元コンポーネント（workflow0）の出力ファイルを設定する（図3参照）</li>\n<li>渡し先コンポーネント（task1）の入力ファイル名を設定する</li>\n<li>渡し元コンポーネント（workflow0）の出力ファイルを渡し先コンポーネント（task1）の入力ファイルへ接続する</li>\n<li>コンポーネントの子階層へ遷移する（図4参照）</li>\n<li>子コンポーネント（childTask）の出力ファイルを設定する</li>\n<li>子コンポーネント（childTask）の出力ファイルを親コンポーネントの出力ファイルへ接続する</li>\n</ol>\n<h5 id=\"%E5%9B%B33-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%87%BA%E5%8A%9B%E3%83%BB%E5%85%A5%E5%8A%9B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A%EF%BC%88%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%B8%EF%BC%89\">図3 コンポーネントの出力・入力ファイル設定（子階層から親階層へ） <a class=\"heading-anchor-permalink\" href=\"#%E5%9B%B33-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E5%87%BA%E5%8A%9B%E3%83%BB%E5%85%A5%E5%8A%9B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%A8%AD%E5%AE%9A%EF%BC%88%E5%AD%90%E9%9A%8E%E5%B1%A4%E3%81%8B%E3%82%89%E8%A6%AA%E9%9A%8E%E5%B1%A4%E3%81%B8%EF%BC%89\">#</a></h5>\n<p><img src=\"./img/component_design/move_file_CtoP.png\" alt=\"img\" title=\"入出力ファイルの設定\"></p>\n<h5 id=\"%E5%9B%B34-%E5%AD%90%E3%81%8B%E3%82%89%E8%A6%AA%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%BB%A2%E9%80%81\">図4 子から親へのファイル転送 <a class=\"heading-anchor-permalink\" href=\"#%E5%9B%B34-%E5%AD%90%E3%81%8B%E3%82%89%E8%A6%AA%E3%81%B8%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E8%BB%A2%E9%80%81\">#</a></h5>\n<p><img src=\"./img/component_design/CtoP_file_connection.png\" alt=\"img\" title=\"親子間ファイルの接続\"></p>\n<p>ただし、子階層において親の入力ファイルを直接出力ファイルへ渡すこと（input1.txtをoutput2.txtへ接続する　図4参照）はできません。</p>\n",
      "id": 20
    },
    {
      "path": "WHEEL_manual/4_component/9_Workflow.md",
      "url": "WHEEL_manual/4_component/9_Workflow.html",
      "content": "# Workflow\n\n![img](./img/workflow/workflow.png \"workflow\")  \n\nWorkflowコンポーネントは、複数のコンポーネントからなる処理を一つのコンポーネントにまとめるために用います。  \nWorkflowコンポーネントを使用することで、ワークフロー編集画面上を処理毎に集約することができ、ワークフロー全体の見通しを良くすることができます。  \n\nWorkflowコンポーネントのプロパティは以下です。\n\n| プロパティ | 入力値 | プロパティ説明 |\n|----|----|----|\n| name | 文字列 | コンポーネント名 |\n| description | 文字列 | コンポーネントの説明文 |\n| inputFiles | ファイルまたはディレクトリ名 | 先行コンポーネントから受け取るファイル |\n| outputFiles | ファイル, ディレクトリ名またはglobパターン | 後続コンポーネントへ渡すファイル |\n| clean up flag | ラジオボタン | リモート環境に作成した一時ファイルの取り扱い決定フラグ |\n|  | clean up | 削除する |\n|  | keep files | 削除しない |\n|  | follow parent setting | 親コンポーネントと同じ挙動をする |\n| state clean | ボタン | コンポーネントの進行状態を初期状態に戻す *1 |\n\n*1 コンポーネントの進行状態が\"finished\"もしくは\"failed\"の時のみ表示されます。\n\n# Workflowコンポーネントの使用例\n\nWorkflowコンポーネントは、複数のコンポーネントからなる処理を一つのコンポーネントにまとめるために用います。  \nWorkflowコンポーネントを使用することで、ワークフロー編集画面上を処理毎に集約することができ、ワークフロー全体の見通しを良くすることができます。\n\nサンプルプロジェクトは下記からダウンロード可能です。  \n<a href=\"./sample/WorkflowSampleProject_1.wheel.zip\">Workflowコンポーネント未使用</a>  \n<a href=\"./sample/WorkflowSampleProject_2.wheel.zip\">Workflowコンポーネント使用</a>  \n\n#### Workflowコンポーネント未使用  \n\n![img](./img/workflow/Workflow_1.png \"Workflow_1\")\n\n#### Workflowコンポーネント使用  \n\n![img](./img/workflow/Workflow_2.png \"Workflow_2\")\n\n以下に実行結果を示します。  \n\n#### Workflowコンポーネント未使用 実行結果  \n\n![img](./img/workflow/Workflow_1_result.png \"Workflow_1_result\")\n\n#### Workflowコンポーネント未使用実行結果（ログ）\n\n![img](./img/workflow/Workflow_1_result_log.png \"Workflow_1_result_log\")\n\n#### Workflowコンポーネント使用実行結果\n\n![img](./img/workflow/Workflow_2_result.png \"Workflow_2_result\")",
      "html": "<h1 id=\"workflow\">Workflow <a class=\"heading-anchor-permalink\" href=\"#workflow\">#</a></h1>\n<p><img src=\"./img/workflow/workflow.png\" alt=\"img\" title=\"workflow\"></p>\n<p>Workflowコンポーネントは、複数のコンポーネントからなる処理を一つのコンポーネントにまとめるために用います。<br>\nWorkflowコンポーネントを使用することで、ワークフロー編集画面上を処理毎に集約することができ、ワークフロー全体の見通しを良くすることができます。</p>\n<p>Workflowコンポーネントのプロパティは以下です。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ</th>\n<th>入力値</th>\n<th>プロパティ説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>文字列</td>\n<td>コンポーネント名</td>\n</tr>\n<tr>\n<td>description</td>\n<td>文字列</td>\n<td>コンポーネントの説明文</td>\n</tr>\n<tr>\n<td>inputFiles</td>\n<td>ファイルまたはディレクトリ名</td>\n<td>先行コンポーネントから受け取るファイル</td>\n</tr>\n<tr>\n<td>outputFiles</td>\n<td>ファイル, ディレクトリ名またはglobパターン</td>\n<td>後続コンポーネントへ渡すファイル</td>\n</tr>\n<tr>\n<td>clean up flag</td>\n<td>ラジオボタン</td>\n<td>リモート環境に作成した一時ファイルの取り扱い決定フラグ</td>\n</tr>\n<tr>\n<td></td>\n<td>clean up</td>\n<td>削除する</td>\n</tr>\n<tr>\n<td></td>\n<td>keep files</td>\n<td>削除しない</td>\n</tr>\n<tr>\n<td></td>\n<td>follow parent setting</td>\n<td>親コンポーネントと同じ挙動をする</td>\n</tr>\n<tr>\n<td>state clean</td>\n<td>ボタン</td>\n<td>コンポーネントの進行状態を初期状態に戻す *1</td>\n</tr>\n</tbody>\n</table>\n<p>*1 コンポーネントの進行状態が&quot;finished&quot;もしくは&quot;failed&quot;の時のみ表示されます。</p>\n<h1 id=\"workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">Workflowコンポーネントの使用例 <a class=\"heading-anchor-permalink\" href=\"#workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h1>\n<p>Workflowコンポーネントは、複数のコンポーネントからなる処理を一つのコンポーネントにまとめるために用います。<br>\nWorkflowコンポーネントを使用することで、ワークフロー編集画面上を処理毎に集約することができ、ワークフロー全体の見通しを良くすることができます。</p>\n<p>サンプルプロジェクトは下記からダウンロード可能です。<br>\n<a href=\"./sample/WorkflowSampleProject_1.wheel.zip\">Workflowコンポーネント未使用</a><br>\n<a href=\"./sample/WorkflowSampleProject_2.wheel.zip\">Workflowコンポーネント使用</a></p>\n<h4 id=\"workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E6%9C%AA%E4%BD%BF%E7%94%A8\">Workflowコンポーネント未使用 <a class=\"heading-anchor-permalink\" href=\"#workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E6%9C%AA%E4%BD%BF%E7%94%A8\">#</a></h4>\n<p><img src=\"./img/workflow/Workflow_1.png\" alt=\"img\" title=\"Workflow_1\"></p>\n<h4 id=\"workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E4%BD%BF%E7%94%A8\">Workflowコンポーネント使用 <a class=\"heading-anchor-permalink\" href=\"#workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E4%BD%BF%E7%94%A8\">#</a></h4>\n<p><img src=\"./img/workflow/Workflow_2.png\" alt=\"img\" title=\"Workflow_2\"></p>\n<p>以下に実行結果を示します。</p>\n<h4 id=\"workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E6%9C%AA%E4%BD%BF%E7%94%A8-%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">Workflowコンポーネント未使用 実行結果 <a class=\"heading-anchor-permalink\" href=\"#workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E6%9C%AA%E4%BD%BF%E7%94%A8-%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h4>\n<p><img src=\"./img/workflow/Workflow_1_result.png\" alt=\"img\" title=\"Workflow_1_result\"></p>\n<h4 id=\"workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E6%9C%AA%E4%BD%BF%E7%94%A8%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%EF%BC%88%E3%83%AD%E3%82%B0%EF%BC%89\">Workflowコンポーネント未使用実行結果（ログ） <a class=\"heading-anchor-permalink\" href=\"#workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E6%9C%AA%E4%BD%BF%E7%94%A8%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%EF%BC%88%E3%83%AD%E3%82%B0%EF%BC%89\">#</a></h4>\n<p><img src=\"./img/workflow/Workflow_1_result_log.png\" alt=\"img\" title=\"Workflow_1_result_log\"></p>\n<h4 id=\"workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E4%BD%BF%E7%94%A8%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">Workflowコンポーネント使用実行結果 <a class=\"heading-anchor-permalink\" href=\"#workflow%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E4%BD%BF%E7%94%A8%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C\">#</a></h4>\n<p><img src=\"./img/workflow/Workflow_2_result.png\" alt=\"img\" title=\"Workflow_2_result\"></p>\n",
      "id": 21
    },
    {
      "path": "WHEEL_manual/5_execute_workflow/execute_workflow.md",
      "url": "WHEEL_manual/5_execute_workflow/execute_workflow.html",
      "content": "# ワークフローの実行方法\n\n## ■ワークフローの作成\nはじめに、ワークフローの作成手順（実行に必要なファイルの設定方法）について説明します。  \nここでは、例として、ログエリア[ Stdout ]にメッセージ「Hello World!」を出力するTaskコンポーネントの設定を紹介します。  \n手順は以下です。 \n\n1. グラフビュー画面左部 Component Libraryより、Taskコンポーネントをグラフビュー画面に配置する\n1. Taskコンポーネントをクリックし、プロパティ画面を表示する\n1. プロパティ画面下部[ Files ]より、メッセージ表示（Stdout）するスクリプトをTaskコンポーネントディレクトリへアップロードする *1\n1. プロパティ[ script ]にアップロードしたファイルのファイル名(HelloWorld.sh)を指定する \n\n*1 Taskコンポーネントディレクトリへのスクリプトの設定方法は、ファイルをアップロードする方法と  \n　[ Files ]の新規ファイル作成機能によりファイルを作成する方法があります。\n\n![img](./img/task_exe_1.png \"task_exe_1\") \n\n> sampleTask(taskコンポーネント)\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | sampleTask |\n| Script | HelloWorld.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | HelloWorld.sh |  \n\nここで設定したスクリプト「HelloWorld.sh」の中身は以下です。\n\n#### ・HelloWorld.sh\n\n```\n#!/bin/bash\necho Hello World!\n```\n\n## ■プロジェクトを保存する\nファイルの設定が完了後、プロジェクトを保存します。  \n保存前後でワークフロー画面上部[ Create date ]が更新されることを確認します。\n\n![img](./img/before_save.png \"before_save\")  \n![img](./img/after_save.png \"after_save\")  \n\n## ■ワークフローの実行と実行状況の確認\nワークフローを実行します。  \nワークフローは、デフォルト値[ localhost ]で実行します。\n\nワークフローの実行は、ワークフロー画面上部[ Run ]ボタンより開始します。\n\n#### 1. 実行\n\n実行ボタン押下後、実行の状況の確認はグラフビュー画面、リストビュー画面のいずれかから確認することができます。\n\n![img](./img/run.png \"run\")  \n\n#### 2. グラフビュー画面\n\nグラフビュー画面では、ワークフロー画面上部よりプロジェクト全体の進行状況とコンポーネント右上のアイコンにより実行状況を確認できます。  \n\n![img](./img/running.png \"runnig_graghview\")  \n\n#### 3. リストビュー画面\n\nリストビュー画面では、各コンポーネントの進行状況がグラフビュー画面より詳細に表示されます。\n\n![img](./img/running_ListView.png \"running_listview\")  \n\n#### 4. 実行完了\n\n実行が完了したとき、状態は[ finished ]へと変化し、  \nまた、ログエリア[ Stdout ]に「Hello World!」と表示されます。  \n\n![img](./img/finish.png \"finish\")  \n\n\n以上が基本的なコンポーネント設定、ワークフローの実行手順となります。  \n以下では、その他コンポーネントのサンプルを示します。  \nWHEELでは、複雑なワークフローもこれらコンポーネントを組み合わせることにより、視覚的・直感的に理解しやすいワークフローを構成することができます。",
      "html": "<h1 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%96%B9%E6%B3%95\">ワークフローの実行方法 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%96%B9%E6%B3%95\">#</a></h1>\n<h2 id=\"%E2%96%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">■ワークフローの作成 <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>はじめに、ワークフローの作成手順（実行に必要なファイルの設定方法）について説明します。<br>\nここでは、例として、ログエリア[ Stdout ]にメッセージ「Hello World!」を出力するTaskコンポーネントの設定を紹介します。<br>\n手順は以下です。</p>\n<ol>\n<li>グラフビュー画面左部 Component Libraryより、Taskコンポーネントをグラフビュー画面に配置する</li>\n<li>Taskコンポーネントをクリックし、プロパティ画面を表示する</li>\n<li>プロパティ画面下部[ Files ]より、メッセージ表示（Stdout）するスクリプトをTaskコンポーネントディレクトリへアップロードする *1</li>\n<li>プロパティ[ script ]にアップロードしたファイルのファイル名(<a href=\"http://HelloWorld.sh\">HelloWorld.sh</a>)を指定する</li>\n</ol>\n<p>*1 Taskコンポーネントディレクトリへのスクリプトの設定方法は、ファイルをアップロードする方法と<br>\n　[ Files ]の新規ファイル作成機能によりファイルを作成する方法があります。</p>\n<p><img src=\"./img/task_exe_1.png\" alt=\"img\" title=\"task_exe_1\"></p>\n<blockquote>\n<p>sampleTask(taskコンポーネント)</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>sampleTask</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://HelloWorld.sh\">HelloWorld.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://HelloWorld.sh\">HelloWorld.sh</a></td>\n</tr>\n</tbody>\n</table>\n<p>ここで設定したスクリプト「<a href=\"http://HelloWorld.sh\">HelloWorld.sh</a>」の中身は以下です。</p>\n<h4 id=\"%E3%83%BBhelloworld.sh\">・<a href=\"http://HelloWorld.sh\">HelloWorld.sh</a> <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BBhelloworld.sh\">#</a></h4>\n<pre><code>#!/bin/bash\necho Hello World!\n</code></pre>\n<h2 id=\"%E2%96%A0%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B\">■プロジェクトを保存する <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ファイルの設定が完了後、プロジェクトを保存します。<br>\n保存前後でワークフロー画面上部[ Create date ]が更新されることを確認します。</p>\n<p><img src=\"./img/before_save.png\" alt=\"img\" title=\"before_save\"><br>\n<img src=\"./img/after_save.png\" alt=\"img\" title=\"after_save\"></p>\n<h2 id=\"%E2%96%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%81%A8%E5%AE%9F%E8%A1%8C%E7%8A%B6%E6%B3%81%E3%81%AE%E7%A2%BA%E8%AA%8D\">■ワークフローの実行と実行状況の確認 <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%81%A8%E5%AE%9F%E8%A1%8C%E7%8A%B6%E6%B3%81%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>ワークフローを実行します。<br>\nワークフローは、デフォルト値[ localhost ]で実行します。</p>\n<p>ワークフローの実行は、ワークフロー画面上部[ Run ]ボタンより開始します。</p>\n<h4 id=\"1.-%E5%AE%9F%E8%A1%8C\">1. 実行 <a class=\"heading-anchor-permalink\" href=\"#1.-%E5%AE%9F%E8%A1%8C\">#</a></h4>\n<p>実行ボタン押下後、実行の状況の確認はグラフビュー画面、リストビュー画面のいずれかから確認することができます。</p>\n<p><img src=\"./img/run.png\" alt=\"img\" title=\"run\"></p>\n<h4 id=\"2.-%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">2. グラフビュー画面 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%82%B0%E3%83%A9%E3%83%95%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">#</a></h4>\n<p>グラフビュー画面では、ワークフロー画面上部よりプロジェクト全体の進行状況とコンポーネント右上のアイコンにより実行状況を確認できます。</p>\n<p><img src=\"./img/running.png\" alt=\"img\" title=\"runnig_graghview\"></p>\n<h4 id=\"3.-%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">3. リストビュー画面 <a class=\"heading-anchor-permalink\" href=\"#3.-%E3%83%AA%E3%82%B9%E3%83%88%E3%83%93%E3%83%A5%E3%83%BC%E7%94%BB%E9%9D%A2\">#</a></h4>\n<p>リストビュー画面では、各コンポーネントの進行状況がグラフビュー画面より詳細に表示されます。</p>\n<p><img src=\"./img/running_ListView.png\" alt=\"img\" title=\"running_listview\"></p>\n<h4 id=\"4.-%E5%AE%9F%E8%A1%8C%E5%AE%8C%E4%BA%86\">4. 実行完了 <a class=\"heading-anchor-permalink\" href=\"#4.-%E5%AE%9F%E8%A1%8C%E5%AE%8C%E4%BA%86\">#</a></h4>\n<p>実行が完了したとき、状態は[ finished ]へと変化し、<br>\nまた、ログエリア[ Stdout ]に「Hello World!」と表示されます。</p>\n<p><img src=\"./img/finish.png\" alt=\"img\" title=\"finish\"></p>\n<p>以上が基本的なコンポーネント設定、ワークフローの実行手順となります。<br>\n以下では、その他コンポーネントのサンプルを示します。<br>\nWHEELでは、複雑なワークフローもこれらコンポーネントを組み合わせることにより、視覚的・直感的に理解しやすいワークフローを構成することができます。</p>\n",
      "id": 22
    },
    {
      "path": "WHEEL_manual/6_jobScript_screen/jobScript.md",
      "url": "WHEEL_manual/6_jobScript_screen/jobScript.html",
      "content": "# ジョブスクリプトテンプレートの登録\n\n本画面では、リモートホストマシンへのジョブ投入に使用するジョブスクリプトの生成を支援するジョブスクリプトのテンプレートを作成、登録できます。  \n現在、本画面で対応しているジョブスケジューラは以下です。  \n\n* FUJITSU Software Technical Computing Suite (TCS、九州大学ITO向け)  \n* Univa Grid Engine (UGE)\n\n## 登録画面への移動\n\n登録画面には、下記の方法によって遷移します。\n\n* ホーム画面右上ドロワー内の[ jobScript Editor ]\n* ワークフロー画面右上ドロワー内の[ jobScript Editor ]\n\n1. ホーム画面右上ドロワー  \n![img](./img/home_jobScript.png \"home_jobScript\")  \n\n1. ワークフロー画面右上ドロワー  \n![img](./img/workflow_jobScript.png \"workflow_jobScript\")  \n\n## ジョブスクリプトテンプレート登録画面仕様\n\n本画面の構成は、以下のようになっています。  \n![img](./img/jobScript_template_editor.png )  \n\n1. タイトル　：ホーム画面遷移ボタン\n1. 登録エリア：登録するジョブスクリプトの情報を入力する\n1. 登録エリアボタン\n    1. Confirmボタン：登録エリアの入力内容を登録する\n    1. Cancelボタン：登録エリアの入力内容を空にする\n1. テンプレートリストエリア：登録済みのテンプレート情報を表示する\n    1. Copyボタン：テンプレートをコピーする\n    1. Deleteボタン：テンプレートを削除する\n\nまた、本画面で登録できるプロパティは以下です。  \n\n### ■ TCS\n\n| プロパティ名 | プロパティ | 備考 |\n|----|----|----|\n| Template Name | 登録するテンプレート名 | 重複不可 |\n| Resource Unit | リソースユニット名 | セレクトボックスから選択 |\n| Resource Group | リソースグループ名 | セレクトボックスから選択 |\n| JobScheduler | HPCシステムで使用されているジョブスケジューラ名 | 入力不可 |\n| Node | 使用するノード数 | 数値 |\n| Core per Node |1ノードあたりに使用するコア数 | 数値 |\n| Elapsed Time | 最大経過時間 | HH:MM:SS の形式 |\n| Stdout Name | 標準出力情報を保存するファイル名 | ー|\n| Stderr Name | 標準エラー出力情報を保存するファイル名 | ー|\n| Job Name | 投入するジョブ名 | ー |\n| other | 自由記述箇所 | 文字列 |\n\nより詳細な情報は、以下を参考にしてください。  \n[九州大学情報基盤センタースーパーコンピュータシステムITO](https://www.cc.kyushu-u.ac.jp/scp/system/ITO/)\n\n### ■ UGE\n\n| プロパティ名 | プロパティ | 備考 |\n|----|----|----|\n| Template Name | 登録するテンプレート名 | 重複不可 |\n| Resource Type | リソースタイプ名 | ー |\n| Resource Number | 使用するノード数 | ー |\n| JobScheduler | HPCシステムで使用されているジョブスケジューラ名 | 入力不可 |\n| Elapsed Time | 最大経過時間 | HH:MM:SS の形式 |\n| Priority | SpotサービスでのPOSIX優先度 | 数値：０～１の間|\n| Task Id | アレイジョブのタスクIDの指定 | n[-m[x]] の形式 |\n| Hold Id | 依存関係があるジョブのID | 数値 |\n| Ar Id | 予約した計算ノードの予約ID | 数値 |\n| Stdout Name | 標準出力情報を保存するファイル名 | ー|\n| Stderr Name | 標準エラー出力情報を保存するファイル名 | ー|\n| Job Name | 投入するジョブ名 | ー |\n| other | 自由記述箇所 | 文字列 |\n\n## テンプレートの登録\n\nテンプレートの登録方法は、2パターンあります。\n\n1. 新規に登録する\n1. 登録済みテンプレート情報を引用し登録する  \n\n### 1. 新規に登録する  \n\n手順は以下になります。  \n\n1. HPC Centerを選択する\n1. テンプレート登録情報を入力する\n1. Confirmボタンをクリックする  \n\n#### 1. HPC Centerを選択する\n\nKYUSHU UNIVERSITY ITO、または、otherが選択できます。選択したHPC Centerによって入力する項目が変化します。\n\n##### KYUSHU UNIVERSITY ITO\n\n![img](./img/kyushu_university_template.png)\n\n##### other\n\n![img](./img/other_property.png)\n\n#### 2. テンプレート登録情報を入力する  \n\nテンプレート登録情報を入力する。必須項目はTemplate Nameのみです。\n\n##### KYUSHU UNIVERSITY ITO\n\n![img](./img/kyushu_university_template_sample.png)\n\n##### other\n\n![img](./img/other_template_sample.png)\n\n#### 3. Confirmボタンをクリックする  \n\n入力内容をテンプレートとして登録します。テンプレートリストエリアに情報が追加されます。  \n\n![img](./img/template_list.png)  \n\n### 2. 登録済みテンプレート情報を引用し登録する  \n\n続いて、「2. 登録済みテンプレート情報を引用し登録する」方法を説明します。  \n\n手順は以下になります。\n\n1. テンプレートリストエリアに表示されている登録済みのジョブスクリプトのテンプレートを選択する\n1. テンプレートリストエリア[ Copy ]ボタンをクリックする\n1. コピーしたテンプレートの入力情報を編集し、入力画面[ Confirm ]ボタンをクリックする\n\n#### 1. テンプレートを選択する\n\n登録済みのテンプレートを選択します。選択したテンプレートの情報は、入力エリアに反映されます。  \n\n![img](./img/template_select.png )  \n\n#### 2. [ Copy ]ボタンをクリックする\n\nCopyボタンをクリックします。テンプレート入力エリアに選択したテンプレートが複製されます。  \n複製したテンプレート名は「選択したテンプレート名_1」となります。\n\n![img](./img/template_copy.png )\n\n#### 3. コピーしたテンプレートを編集し、[ Confirm ]ボタンをクリックする\n\n![img](./img/template_copy2.png )\n  \n## テンプレートの削除\n\nテンプレートの削除は、以下の手順で行います。\n\n1. テンプレートリストエリアに表示されている削除したいテンプレートを選択する\n1. テンプレートリストエリア[ Delete ]ボタンをクリックする\n1. 表示される「削除確認メッセージダイアログボックス」の[ OK ]ボタンをクリックする。  \n\n![img](./img/template_Delete.png )\n\n削除されていることを確認します。\n\n![img](./img/template_Delete2.png )\n\n## ジョブスクリプトの作成\n\n登録したジョブスクリプトのテンプレートをもとにジョブスクリプトを生成します。  \nジョブスクリプトの生成は、ワークフロー画面で生成したコンポーネントのプロパティ[ Files ]のジョブスクリプト生成ボタンから行います。  \n\n![img](./img/jobscript_create_button.png )\n\nジョブスクリプトの生成手順は以下です。\n\n1. コンポーネントのプロパティ[ Files ]のジョブスクリプト生成ボタンをクリックする\n1. 表示されたダイアログボックスから、[ jobscript template ]セレクトボックスより使用するテンプレートを選択する\n1. [ jobscript name ]テキストボックスに生成するジョブスクリプト名を入力する\n1. [ OK ]ボタンをクリックする\n\n![img](./img/jobscript_create.png )\n\nファイルが生成されていることを確認します。\n\n![img](./img/jobscript_create2.png )\n",
      "html": "<h1 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">ジョブスクリプトテンプレートの登録 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">#</a></h1>\n<p>本画面では、リモートホストマシンへのジョブ投入に使用するジョブスクリプトの生成を支援するジョブスクリプトのテンプレートを作成、登録できます。<br>\n現在、本画面で対応しているジョブスケジューラは以下です。</p>\n<ul>\n<li>FUJITSU Software Technical Computing Suite (TCS、九州大学ITO向け)</li>\n<li>Univa Grid Engine (UGE)</li>\n</ul>\n<h2 id=\"%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2%E3%81%B8%E3%81%AE%E7%A7%BB%E5%8B%95\">登録画面への移動 <a class=\"heading-anchor-permalink\" href=\"#%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2%E3%81%B8%E3%81%AE%E7%A7%BB%E5%8B%95\">#</a></h2>\n<p>登録画面には、下記の方法によって遷移します。</p>\n<ul>\n<li>ホーム画面右上ドロワー内の[ jobScript Editor ]</li>\n<li>ワークフロー画面右上ドロワー内の[ jobScript Editor ]</li>\n</ul>\n<ol>\n<li>\n<p>ホーム画面右上ドロワー<br>\n<img src=\"./img/home_jobScript.png\" alt=\"img\" title=\"home_jobScript\"></p>\n</li>\n<li>\n<p>ワークフロー画面右上ドロワー<br>\n<img src=\"./img/workflow_jobScript.png\" alt=\"img\" title=\"workflow_jobScript\"></p>\n</li>\n</ol>\n<h2 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2%E4%BB%95%E6%A7%98\">ジョブスクリプトテンプレート登録画面仕様 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%99%BB%E9%8C%B2%E7%94%BB%E9%9D%A2%E4%BB%95%E6%A7%98\">#</a></h2>\n<p>本画面の構成は、以下のようになっています。<br>\n<img src=\"./img/jobScript_template_editor.png\" alt=\"img\"></p>\n<ol>\n<li>タイトル　：ホーム画面遷移ボタン</li>\n<li>登録エリア：登録するジョブスクリプトの情報を入力する</li>\n<li>登録エリアボタン\n<ol>\n<li>Confirmボタン：登録エリアの入力内容を登録する</li>\n<li>Cancelボタン：登録エリアの入力内容を空にする</li>\n</ol>\n</li>\n<li>テンプレートリストエリア：登録済みのテンプレート情報を表示する\n<ol>\n<li>Copyボタン：テンプレートをコピーする</li>\n<li>Deleteボタン：テンプレートを削除する</li>\n</ol>\n</li>\n</ol>\n<p>また、本画面で登録できるプロパティは以下です。</p>\n<h3 id=\"%E2%96%A0-tcs\">■ TCS <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0-tcs\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>プロパティ</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Template Name</td>\n<td>登録するテンプレート名</td>\n<td>重複不可</td>\n</tr>\n<tr>\n<td>Resource Unit</td>\n<td>リソースユニット名</td>\n<td>セレクトボックスから選択</td>\n</tr>\n<tr>\n<td>Resource Group</td>\n<td>リソースグループ名</td>\n<td>セレクトボックスから選択</td>\n</tr>\n<tr>\n<td>JobScheduler</td>\n<td>HPCシステムで使用されているジョブスケジューラ名</td>\n<td>入力不可</td>\n</tr>\n<tr>\n<td>Node</td>\n<td>使用するノード数</td>\n<td>数値</td>\n</tr>\n<tr>\n<td>Core per Node</td>\n<td>1ノードあたりに使用するコア数</td>\n<td>数値</td>\n</tr>\n<tr>\n<td>Elapsed Time</td>\n<td>最大経過時間</td>\n<td>HH:MM:SS の形式</td>\n</tr>\n<tr>\n<td>Stdout Name</td>\n<td>標準出力情報を保存するファイル名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>Stderr Name</td>\n<td>標準エラー出力情報を保存するファイル名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>Job Name</td>\n<td>投入するジョブ名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>other</td>\n<td>自由記述箇所</td>\n<td>文字列</td>\n</tr>\n</tbody>\n</table>\n<p>より詳細な情報は、以下を参考にしてください。<br>\n<a href=\"https://www.cc.kyushu-u.ac.jp/scp/system/ITO/\">九州大学情報基盤センタースーパーコンピュータシステムITO</a></p>\n<h3 id=\"%E2%96%A0-uge\">■ UGE <a class=\"heading-anchor-permalink\" href=\"#%E2%96%A0-uge\">#</a></h3>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>プロパティ</th>\n<th>備考</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Template Name</td>\n<td>登録するテンプレート名</td>\n<td>重複不可</td>\n</tr>\n<tr>\n<td>Resource Type</td>\n<td>リソースタイプ名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>Resource Number</td>\n<td>使用するノード数</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>JobScheduler</td>\n<td>HPCシステムで使用されているジョブスケジューラ名</td>\n<td>入力不可</td>\n</tr>\n<tr>\n<td>Elapsed Time</td>\n<td>最大経過時間</td>\n<td>HH:MM:SS の形式</td>\n</tr>\n<tr>\n<td>Priority</td>\n<td>SpotサービスでのPOSIX優先度</td>\n<td>数値：０～１の間</td>\n</tr>\n<tr>\n<td>Task Id</td>\n<td>アレイジョブのタスクIDの指定</td>\n<td>n[-m[x]] の形式</td>\n</tr>\n<tr>\n<td>Hold Id</td>\n<td>依存関係があるジョブのID</td>\n<td>数値</td>\n</tr>\n<tr>\n<td>Ar Id</td>\n<td>予約した計算ノードの予約ID</td>\n<td>数値</td>\n</tr>\n<tr>\n<td>Stdout Name</td>\n<td>標準出力情報を保存するファイル名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>Stderr Name</td>\n<td>標準エラー出力情報を保存するファイル名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>Job Name</td>\n<td>投入するジョブ名</td>\n<td>ー</td>\n</tr>\n<tr>\n<td>other</td>\n<td>自由記述箇所</td>\n<td>文字列</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">テンプレートの登録 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E7%99%BB%E9%8C%B2\">#</a></h2>\n<p>テンプレートの登録方法は、2パターンあります。</p>\n<ol>\n<li>新規に登録する</li>\n<li>登録済みテンプレート情報を引用し登録する</li>\n</ol>\n<h3 id=\"1.-%E6%96%B0%E8%A6%8F%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">1. 新規に登録する <a class=\"heading-anchor-permalink\" href=\"#1.-%E6%96%B0%E8%A6%8F%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h3>\n<p>手順は以下になります。</p>\n<ol>\n<li>HPC Centerを選択する</li>\n<li>テンプレート登録情報を入力する</li>\n<li>Confirmボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-hpc-center%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B\">1. HPC Centerを選択する <a class=\"heading-anchor-permalink\" href=\"#1.-hpc-center%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B\">#</a></h4>\n<p>KYUSHU UNIVERSITY ITO、または、otherが選択できます。選択したHPC Centerによって入力する項目が変化します。</p>\n<h5 id=\"kyushu-university-ito\">KYUSHU UNIVERSITY ITO <a class=\"heading-anchor-permalink\" href=\"#kyushu-university-ito\">#</a></h5>\n<p><img src=\"./img/kyushu_university_template.png\" alt=\"img\"></p>\n<h5 id=\"other\">other <a class=\"heading-anchor-permalink\" href=\"#other\">#</a></h5>\n<p><img src=\"./img/other_property.png\" alt=\"img\"></p>\n<h4 id=\"2.-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B\">2. テンプレート登録情報を入力する <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B\">#</a></h4>\n<p>テンプレート登録情報を入力する。必須項目はTemplate Nameのみです。</p>\n<h5 id=\"kyushu-university-ito-2\">KYUSHU UNIVERSITY ITO <a class=\"heading-anchor-permalink\" href=\"#kyushu-university-ito-2\">#</a></h5>\n<p><img src=\"./img/kyushu_university_template_sample.png\" alt=\"img\"></p>\n<h5 id=\"other-2\">other <a class=\"heading-anchor-permalink\" href=\"#other-2\">#</a></h5>\n<p><img src=\"./img/other_template_sample.png\" alt=\"img\"></p>\n<h4 id=\"3.-confirm%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">3. Confirmボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#3.-confirm%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>入力内容をテンプレートとして登録します。テンプレートリストエリアに情報が追加されます。</p>\n<p><img src=\"./img/template_list.png\" alt=\"img\"></p>\n<h3 id=\"2.-%E7%99%BB%E9%8C%B2%E6%B8%88%E3%81%BF%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92%E5%BC%95%E7%94%A8%E3%81%97%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">2. 登録済みテンプレート情報を引用し登録する <a class=\"heading-anchor-permalink\" href=\"#2.-%E7%99%BB%E9%8C%B2%E6%B8%88%E3%81%BF%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E6%83%85%E5%A0%B1%E3%82%92%E5%BC%95%E7%94%A8%E3%81%97%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h3>\n<p>続いて、「2. 登録済みテンプレート情報を引用し登録する」方法を説明します。</p>\n<p>手順は以下になります。</p>\n<ol>\n<li>テンプレートリストエリアに表示されている登録済みのジョブスクリプトのテンプレートを選択する</li>\n<li>テンプレートリストエリア[ Copy ]ボタンをクリックする</li>\n<li>コピーしたテンプレートの入力情報を編集し、入力画面[ Confirm ]ボタンをクリックする</li>\n</ol>\n<h4 id=\"1.-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B\">1. テンプレートを選択する <a class=\"heading-anchor-permalink\" href=\"#1.-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B\">#</a></h4>\n<p>登録済みのテンプレートを選択します。選択したテンプレートの情報は、入力エリアに反映されます。</p>\n<p><img src=\"./img/template_select.png\" alt=\"img\"></p>\n<h4 id=\"2.-%5B-copy-%5D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">2. [ Copy ]ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#2.-%5B-copy-%5D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p>Copyボタンをクリックします。テンプレート入力エリアに選択したテンプレートが複製されます。<br>\n複製したテンプレート名は「選択したテンプレート名_1」となります。</p>\n<p><img src=\"./img/template_copy.png\" alt=\"img\"></p>\n<h4 id=\"3.-%E3%82%B3%E3%83%94%E3%83%BC%E3%81%97%E3%81%9F%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%97%E3%80%81%5B-confirm-%5D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">3. コピーしたテンプレートを編集し、[ Confirm ]ボタンをクリックする <a class=\"heading-anchor-permalink\" href=\"#3.-%E3%82%B3%E3%83%94%E3%83%BC%E3%81%97%E3%81%9F%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%97%E3%80%81%5B-confirm-%5D%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%99%E3%82%8B\">#</a></h4>\n<p><img src=\"./img/template_copy2.png\" alt=\"img\"></p>\n<h2 id=\"%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4\">テンプレートの削除 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p>テンプレートの削除は、以下の手順で行います。</p>\n<ol>\n<li>テンプレートリストエリアに表示されている削除したいテンプレートを選択する</li>\n<li>テンプレートリストエリア[ Delete ]ボタンをクリックする</li>\n<li>表示される「削除確認メッセージダイアログボックス」の[ OK ]ボタンをクリックする。</li>\n</ol>\n<p><img src=\"./img/template_Delete.png\" alt=\"img\"></p>\n<p>削除されていることを確認します。</p>\n<p><img src=\"./img/template_Delete2.png\" alt=\"img\"></p>\n<h2 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">ジョブスクリプトの作成 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>登録したジョブスクリプトのテンプレートをもとにジョブスクリプトを生成します。<br>\nジョブスクリプトの生成は、ワークフロー画面で生成したコンポーネントのプロパティ[ Files ]のジョブスクリプト生成ボタンから行います。</p>\n<p><img src=\"./img/jobscript_create_button.png\" alt=\"img\"></p>\n<p>ジョブスクリプトの生成手順は以下です。</p>\n<ol>\n<li>コンポーネントのプロパティ[ Files ]のジョブスクリプト生成ボタンをクリックする</li>\n<li>表示されたダイアログボックスから、[ jobscript template ]セレクトボックスより使用するテンプレートを選択する</li>\n<li>[ jobscript name ]テキストボックスに生成するジョブスクリプト名を入力する</li>\n<li>[ OK ]ボタンをクリックする</li>\n</ol>\n<p><img src=\"./img/jobscript_create.png\" alt=\"img\"></p>\n<p>ファイルが生成されていることを確認します。</p>\n<p><img src=\"./img/jobscript_create2.png\" alt=\"img\"></p>\n",
      "id": 23
    },
    {
      "path": "WHEEL_tutorial/1_OpenFOAM_PS_sample/OpenFOAM_PS_sample.md",
      "url": "WHEEL_tutorial/1_OpenFOAM_PS_sample/OpenFOAM_PS_sample.html",
      "content": "# OpenFOAMを利用したパラメトリックスタディ解析ワークフロー\n本章では、WHEELを用いた計算事例として「OpenFOAMを利用したパラメトリックスタディ解析ワークフロー」を紹介します。  \n3次元CADで作成した分配菅モデルに対しオープンソースCAEソフトウエア「SALOME-MACA」でメッシュ化し、WHEELを用いてパラメトリックスタディ解析を京コンピュータのmicroキューを利用して行います。  \n以降、下記の順にて事例内容を紹介します。  \n\nまた、本章で使用するモデルデータ、OpenFOAMの計算実行ファイル、及びTaskコンポーネントで使用するスクリプト例は、  \n下記よりダウンロード可能です。  \n<a href=\"./sample/OpenFOAM_tutorial_sample.zip\">OpenFOAMサンプルデータ</a>\n\n1. 解析概要\n1. オープンソースCAEソフトウエア「SALOME-MACA」によるメッシュ作成\n1. WHEELによるワークフローの作成  \n　1. Parameter Study コンポーネント  \n　2. Task コンポーネント\n1. ジョブの投入\n1. 解析結果の確認\n\n## 1. 解析概要\n本事例で使用する解析対象モデルは、分配菅モデルです。\n\n#### 解析モデル D50-d10\n\n![img](./img/model.png \"model\")  \n\ninletから流入した流体がoutletから出ていく解析を実施します。  \nまた、本解析では、**inletの流量**を対象としたパラメトリックスタディ解析を行います。\n\n## 2. オープンソースCAEソフトウエア「SALOME-MACA」によるメッシュ作成\n本解析では、オープンソースCAEソフトウエア「SALOME-MACA」にて解析モデルのメッシュを作成しました。  \n本節では、SALOME-MACAでのメッシュの作成手順を簡単に示します。  \n※本チュートリアルでは、オープンソースCAEソフトウエア「SALOME-MACA」はインストール済みであるものとして説明します。\n\n### 「Geometry」モジュールのグループ設定\n「Geometry」モジュールのグループ設定までの手順は以下です。\n1. SALOME-MECA起動後、「新しいドキュメント」ボタンをクリックし新規ドキュメントを作成する\n1. 「Geometory」モジュールを選択する\n1. 「ファイル」-「インポート…」-「STEP」インポートをクリックし、3次元CADで作成した分配管モデル「D50-d10.stp」を選択する\n1. 表示される単位変換の選択ウィンドウより、適切な単位系を選択する（本解析では、メートル[M]を選択）\n1. OpenFOAMでの境界条件設定用に、入口/出口/壁面のそれぞれにFACEグループを設定する  \n   本事例では、入口にinlet、10箇所の出口にoutet1～outlet10、壁面にwallのグループ名を設定\n\n#### 「Geometry」モジュールのグループ設定\n\n![img](./img/mesh_1.png \"Geometryモジュールのグループ設定\")  \n\n### 「Mesh」モジュールでのメッシュの設定と作成\n「Geometory」モジュールにて、グループ名設定後、「Mesh」モジュールに切り替えて、メッシュの設定と作成します。  \nこのモデルでは、四面体テトラ要素と境界層メッシュ（プリズム）を設定しています。\n\n![img](./img/mesh_2.png \"「Mesh」モジュールでのメッシュの設定と作成\")  \n\n### 「Mesh」モジュールのグループ設定\nメッシュ作成後、入口/出口/壁面のそれぞれにFACEグループを設定します。  \n「Geometory」モジュールで設定したグループを利用し、入口にinlet、10箇所の出口にoutet1～outlet10、壁面にwallのグループ名を設定します。\n\n以上の操作後、作成されるメッシュは以下のようになります。\n\n四面体　　　　　　：273726  \nプリズム（三角柱）：109503  \n合計　　　　　　　：383229\n\n![img](./img/mesh_3.png \"メッシュ\")  \n\n\n### メッシュデータのエキスポート\nメッシュ作成、グループ作成後、Ideas universal形式でメッシュデータをエキスポートします。\n\n### メッシュデータのOpenFOAM形式への変換\n作成したメッシュデータをOpenFOAMでの計算に利用する場合、  \nエキスポートしたメッシュデータをIdeas universalファイルから、OpenFOAM形式への変換する必要があります。  \n手順は以下です。\n\nターミナルを起動し、\n解析データの親ディレクトリ「D50-d10」にて、  \n\n```\n$ ideasUnvToFoam *.unv\n```\n\nコマンドを実行します。\n\nこの操作により、「constant/polyMesh」ディレクトリに  \n・boundary  \n・owner  \n・faces  \n・neighbor  \n・points  \nというOpenFOAM用のメッシュデータが生成されます。\n\n## 3. WHEELによるワークフローの作成\n本節では、WHEELでのパラメトリックスタディ解析に必要なワークフローコンポーネントについて説明します。  \n本事例で必要なコンポーネントとその役割は以下です。\n\n- Parameter Study コンポーネント：パラメータ化するデータの設定用\n- Task コンポーネント - 1：PSコンポーネントにてパラメータ化したデータの転送用\n- Task コンポーネント - 2：京へのジョブ投入及びOpenFOAM実行用\n\n以降で、各コンポーネントについて説明します。\n### Parameter Study コンポーネント（OpenFOAM_PS）\n前述の通り本事例では、分配菅への流入量をパラメータ化します。  \nそのため、OpenFOAM_PSコンポーネントのPSプロパティ[ parameter setting file ]には、OpenFOAMの初期状態の入力データである  \n0ディレクトリ配下の「U」ファイルにパラメータセッティングしたファイルを設定します。  \n\nOpenFOAM_PSコンポーネントに設定するプロパティは以下です。\n\n##### OpenFOAM_PS  \n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | OpenFOAM_PS |\n| InputFiles | - |\n| OutputFiles | - |\n| Parameter setting file | U.txt.json |  \n| Files | U.txt, U.txt.json |\n\n手順は以下です。  \n\n1. PSディレクトリにUファイル（U.txt）をインポートする\n（後のファイル移動時を考慮し、一時的にファイル名を U -> U.txt と変更しています）\n1. 読み込んだ U.txt を右クリック[ edit for PS ]よりファイル編集画面を開く\n1. boundaryField -> inlet -> value の uniform (5 0 0)の5に対してターゲット設定を行う（Min Value:5, Max value:7, Step:1）\n1. 設定後作成された「U.txt.json」ファイルをPSプロパティ[ parameter setting file ]に設定する\n\n![img](./img/OpenFOAM_PS.png \"OpenFOAM_PS\")  \n\n以上がPSコンポーネントでの設定になります。\n\n\n### Task コンポーネント - 1\nファイル転送用コンポーネント「moveFile_Task」について説明します。  \n本コンポーネントは、OpenFOAM_PSコンポーネントによりパラメータ化した「U.txt」ファイルをOpenFOAMでの計算で用いるために  \nOpenFOAM_PSコンポーネントから京コンピュータへ計算を投入するTask（詳細は後述）へ転送するためのコンポーネントです。\n\nmoveFile_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### moveFile_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | moveFile_Task |\n| Script | moveFile.bat |\n| InputFiles | input.txt |\n| OutputFiles | - |\n| Remotehost | localhost |\n| Files | resultRead.bat, value.txt *2 |\n\n> moveFile.bat  \n```\n@echo off  \nmv ../U.txt ../runOpenFOAM_Task  \n```\n\n設定は以下です。\n1. moveFile_Taskコンポーネントへファイル転送をするスクリプトmoveFile.batをインポートする \n1. プロパティ[ script ]にmoveFile.batを設定する\n1. プロパティ[ remotehost ]に「 localhost 」を設定する　*1  \n*1 この処理は、京コンピュータへのジョブ投入前に実施するため、localhostで実施します。\n\n![img](./img/moveFile_Task.png \"moveFile_Task\")  \n\n以上がファイル転送用Taskコンポーネントの設定になります。\n\n### Task コンポーネント - 2\n続いて、京コンピュータへのジョブ投入用及びOpenFOAM解析実行用コンポーネント「runOpenFOAM_Task」について説明します。  \n本コンポーネントは、京コンピュータのmicroキューを用いてOpenFOAMによる分配管の流体解析を実行するためのコンポーネントです。\n\nrunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### runOpenFOAM_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | runOpenFOAM_Task |\n| Script | runOpenFOAM.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | K_micro |\n| UseJobScheduler | true |\n| Queue | micro |\n| Clean up flag | keep files |\n| include | D50-d10.tar.gz |\n| exclude | - |\n| Files | runOpenFOAM.sh, D50-d10.tar.gz* |\n\n*　解析モデル及びOpenFOAMの計算設定ファイル一式  \n\n> runOpenFOAM.sh  \n```\n#!/bin/sh  \n#PJM --rsc-list \"node=2\"  \n#PJM --mpi \"shape=2\"  \n#PJM --mpi \"proc=12\"  \n#PJM -s  \n#   \n. /work/system/Env_base  \n#  \nmodule load OpenFOAM/2.4.0-fujitsu-sparc64  \nsource $WM_PROJECT_DIR/etc/bashrc  \ntar xvzf D50-d10.tar.gz  \nmv ./U.txt U  \nmv ./U ./D50-d10/0  \ncd ./D50-d10  \ndecomposePar  \nmpiexec -n 12 simpleFoam -parallel  \nreconstructPar  \ntouch result.foam  \ncd ..  \ntar cvzf D50-d10.tar.gz D50-d10  \n```\n\n設定は以下です。\n1. 京コンピュータでOpenFOAMを実行するために必要なデータ（OpenFOAMの入力ファイル「D50-b10.tar.gz」）及びジョブスクリプトrunOpenFOAM.shをインポートする\n1. プロパティ[ script ]にrunOpenFOAM.shを設定する\n1. プロパティ[ remotehost ]に事前に登録している京のリモートホスト情報「K_micro」設定する *\n1. プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「micro」を設定する\n1. moveFile_Taskコンポーネントへファイル転送をするスクリプトmoveFile.shをインポートする\n1. includeに回収するファイル名「D50-b10.tar.gz」を設定する\n\n*　京コンピュータでリソースグループmicroを使用して計算を行うため「K_micro」としています  \n　 ユーザの環境に合わせて名称の変更が必要です\n\n### ジョブスクリプトに関して\nWHEELは、リソースグループmicroを用い、効率的に計算資源を利用することを目的としています。  \nよって、microキュー内（30分）で解析が完了するようにモデル規模、またノード数、プロセス数を設定しジョブを投入する必要があります。  \n本解析は**2ノード12プロセス**にて解析を行っております。\n\nまた、ジョブスクリプトrunOpenFOAM.shには、#PJMで始まるジョブへのオプション設定の他に「OpenFOAMを実行するためのコマンド」を用意しています。  \nここでは、京でOpenFOAMを実行するためのコマンドを紹介します。\n\n通常、京で計算を行うためには計算用の実行モジュールを京のユーザが用意する必要があります。  \nしかし、オープンソースであるOpenFOAMは京に用意されているため、実行モジュールを用意する必要が無く  \n[ module load ]コマンドを使用することで、OpenFOAMのモジュールを利用することができます。\n\n本事例では、メッシュは作成済みであるため下記コマンドをスクリプトに組み込んでいます。  \n\n```\n$ module load OpenFOAM/version..  \n$ source $WM_PROJECT_DIR/etc/bashrc  \n$ simpleFoam  \n```\n\n京で利用できるOpenFOAMのバージョンを確認するためには、  \n\n```\n$ module avail\n```\n\nコマンドで確認してください。  \n\nまた、解析完了後、Paraviewで解析結果を確認するためには、空の「○○.foam」ファイル（○○は任意の文字列）が  \n必要であるため、空ファイルを作成するコマンド\n\n```\n$ touch ○○.foam\n```\n\nをスクリプト内に組み込んでおくと結果確認をスムーズに行うことができます。\n\n### リモートホスト登録情報に関して\n本事例は、京のリソースグループmicroを利用してジョブを投入することを前提としております。  \nそのため、前述のホスト情報登録方法に従い、京のリソースグループmicroにジョブを投入するためのホスト情報を登録しておく必要があります。\n本サンプルでは、京コンピュータでリソースグループmicroを使用して計算を行うため「K_micro」としています。  \n\n参考として、本事例で設定したホスト情報の中で注意すべき項目を示します。\n\n- Host Work Dir：/scratch/groupname/.....  \n※リソースグループmicroを用いてジョブを投入する場合、/home,/dataからジョブを投入することはできません。詳細は京のユーザガイドをご確認ください。  \n- Job Scheduler：ParallelNavi  \n※ジョブスケジューラの設定は、WHEELのモジュールディレクトリ内[ app/db/jobSceduler.json ]にて行ってください。  \n- Queue：micro  \n※ホスト情報のQueue欄に[ micro ]登録を登録しておくことで、Taskのプロパティからの選択が可能となります。  \n\n![img](./img/runOpenFOAM_Task.png \"runOpenFOAM_Task\")  \n\nmoveFile_TaskとrunOpenFOAM_Taskを結線で繋ぎます。\n\n以上でワークフローの設定は終了です。\n\n## 4. ジョブの投入\nジョブの投入を行います。前述の「9.ワークフローの作成」にありますように、ジョブの投入は、ワークフロー実行画面上部の実行ボタンより行います。  \n実行状況の確認は、ログエリアやコンポーネント右上の実行状況表示アイコン、及びリストビュー画面から行います。  \n\n![img](./img/job.png \"ジョブの投入\")  \n\n## 5. 解析結果の確認\n\n解析結果の確認を行います。  \nリモート環境から回収した計算結果ファイルをローカル環境に移動し、「Paraview」にて確認します。  \n\n### 解析結果のオープン  \n実行したパメトリックスタディ解析の結果のひとつ、**流入速度5[m]** の結果を確認します。  \nParaviewを起動し、[ File ] -> [ Open ].... より、「result.foam *1」ファイルを選択し、[ OK ]ボタンを押下します。    \n*1 result.foam ファイルは、ジョブスクリプト内の「touch」コマンドにて作成したものです。（詳細は、前述の「ジョブスクリプトに関して」をご参照ください）\n\n![img](./img/result_open.png \"結果のオープン\")  \n\n### 解析結果\n**流入速度5[m]** の解析結果において、分配菅の断面図に **速度 U** を、ベクトルで **圧力 p** を表示した結果は以下になります。\n\n##### 流入速度5[m]\n\n![img](./img/result_5.png \"流入速度5m_結果\")  \n\n同様に、**流入速度6[m]**、**流入速度7[m]** の結果を示します。\n\n##### 流入速度6[m]\n\n![img](./img/result_6.png \"流入速度6m_結果\")  \n\n##### 流入速度7[m]\n\n![img](./img/result_7.png \"流入速度7m_結果\")  \n\n\nOpenFOAMを利用したパラメトリックスタディ解析ワークフロー例は以上になります。",
      "html": "<h1 id=\"openfoam%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%83%91%E3%83%A9%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\">OpenFOAMを利用したパラメトリックスタディ解析ワークフロー <a class=\"heading-anchor-permalink\" href=\"#openfoam%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%83%91%E3%83%A9%E3%83%A1%E3%83%88%E3%83%AA%E3%83%83%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%87%E3%82%A3%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\">#</a></h1>\n<p>本章では、WHEELを用いた計算事例として「OpenFOAMを利用したパラメトリックスタディ解析ワークフロー」を紹介します。<br>\n3次元CADで作成した分配菅モデルに対しオープンソースCAEソフトウエア「SALOME-MACA」でメッシュ化し、WHEELを用いてパラメトリックスタディ解析を京コンピュータのmicroキューを利用して行います。<br>\n以降、下記の順にて事例内容を紹介します。</p>\n<p>また、本章で使用するモデルデータ、OpenFOAMの計算実行ファイル、及びTaskコンポーネントで使用するスクリプト例は、<br>\n下記よりダウンロード可能です。<br>\n<a href=\"./sample/OpenFOAM_tutorial_sample.zip\">OpenFOAMサンプルデータ</a></p>\n<ol>\n<li>解析概要</li>\n<li>オープンソースCAEソフトウエア「SALOME-MACA」によるメッシュ作成</li>\n<li>WHEELによるワークフローの作成<br>\n　1. Parameter Study コンポーネント<br>\n　2. Task コンポーネント</li>\n<li>ジョブの投入</li>\n<li>解析結果の確認</li>\n</ol>\n<h2 id=\"1.-%E8%A7%A3%E6%9E%90%E6%A6%82%E8%A6%81\">1. 解析概要 <a class=\"heading-anchor-permalink\" href=\"#1.-%E8%A7%A3%E6%9E%90%E6%A6%82%E8%A6%81\">#</a></h2>\n<p>本事例で使用する解析対象モデルは、分配菅モデルです。</p>\n<h4 id=\"%E8%A7%A3%E6%9E%90%E3%83%A2%E3%83%87%E3%83%AB-d50-d10\">解析モデル D50-d10 <a class=\"heading-anchor-permalink\" href=\"#%E8%A7%A3%E6%9E%90%E3%83%A2%E3%83%87%E3%83%AB-d50-d10\">#</a></h4>\n<p><img src=\"./img/model.png\" alt=\"img\" title=\"model\"></p>\n<p>inletから流入した流体がoutletから出ていく解析を実施します。<br>\nまた、本解析では、<strong>inletの流量</strong>を対象としたパラメトリックスタディ解析を行います。</p>\n<h2 id=\"2.-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9cae%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A2%E3%80%8Csalome-maca%E3%80%8D%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E4%BD%9C%E6%88%90\">2. オープンソースCAEソフトウエア「SALOME-MACA」によるメッシュ作成 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9cae%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A2%E3%80%8Csalome-maca%E3%80%8D%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>本解析では、オープンソースCAEソフトウエア「SALOME-MACA」にて解析モデルのメッシュを作成しました。<br>\n本節では、SALOME-MACAでのメッシュの作成手順を簡単に示します。<br>\n※本チュートリアルでは、オープンソースCAEソフトウエア「SALOME-MACA」はインストール済みであるものとして説明します。</p>\n<h3 id=\"%E3%80%8Cgeometry%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A\">「Geometry」モジュールのグループ設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%80%8Cgeometry%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>「Geometry」モジュールのグループ設定までの手順は以下です。</p>\n<ol>\n<li>SALOME-MECA起動後、「新しいドキュメント」ボタンをクリックし新規ドキュメントを作成する</li>\n<li>「Geometory」モジュールを選択する</li>\n<li>「ファイル」-「インポート…」-「STEP」インポートをクリックし、3次元CADで作成した分配管モデル「D50-d10.stp」を選択する</li>\n<li>表示される単位変換の選択ウィンドウより、適切な単位系を選択する（本解析では、メートル[M]を選択）</li>\n<li>OpenFOAMでの境界条件設定用に、入口/出口/壁面のそれぞれにFACEグループを設定する<br>\n本事例では、入口にinlet、10箇所の出口にoutet1～outlet10、壁面にwallのグループ名を設定</li>\n</ol>\n<h4 id=\"%E3%80%8Cgeometry%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A-2\">「Geometry」モジュールのグループ設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%80%8Cgeometry%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A-2\">#</a></h4>\n<p><img src=\"./img/mesh_1.png\" alt=\"img\" title=\"Geometryモジュールのグループ設定\"></p>\n<h3 id=\"%E3%80%8Cmesh%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%A8%E4%BD%9C%E6%88%90\">「Mesh」モジュールでのメッシュの設定と作成 <a class=\"heading-anchor-permalink\" href=\"#%E3%80%8Cmesh%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%A8%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>「Geometory」モジュールにて、グループ名設定後、「Mesh」モジュールに切り替えて、メッシュの設定と作成します。<br>\nこのモデルでは、四面体テトラ要素と境界層メッシュ（プリズム）を設定しています。</p>\n<p><img src=\"./img/mesh_2.png\" alt=\"img\" title=\"「Mesh」モジュールでのメッシュの設定と作成\"></p>\n<h3 id=\"%E3%80%8Cmesh%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A\">「Mesh」モジュールのグループ設定 <a class=\"heading-anchor-permalink\" href=\"#%E3%80%8Cmesh%E3%80%8D%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>メッシュ作成後、入口/出口/壁面のそれぞれにFACEグループを設定します。<br>\n「Geometory」モジュールで設定したグループを利用し、入口にinlet、10箇所の出口にoutet1～outlet10、壁面にwallのグループ名を設定します。</p>\n<p>以上の操作後、作成されるメッシュは以下のようになります。</p>\n<p>四面体　　　　　　：273726<br>\nプリズム（三角柱）：109503<br>\n合計　　　　　　　：383229</p>\n<p><img src=\"./img/mesh_3.png\" alt=\"img\" title=\"メッシュ\"></p>\n<h3 id=\"%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88\">メッシュデータのエキスポート <a class=\"heading-anchor-permalink\" href=\"#%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88\">#</a></h3>\n<p>メッシュ作成、グループ作成後、Ideas universal形式でメッシュデータをエキスポートします。</p>\n<h3 id=\"%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AEopenfoam%E5%BD%A2%E5%BC%8F%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B\">メッシュデータのOpenFOAM形式への変換 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AEopenfoam%E5%BD%A2%E5%BC%8F%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B\">#</a></h3>\n<p>作成したメッシュデータをOpenFOAMでの計算に利用する場合、<br>\nエキスポートしたメッシュデータをIdeas universalファイルから、OpenFOAM形式への変換する必要があります。<br>\n手順は以下です。</p>\n<p>ターミナルを起動し、\n解析データの親ディレクトリ「D50-d10」にて、</p>\n<pre><code>$ ideasUnvToFoam *.unv\n</code></pre>\n<p>コマンドを実行します。</p>\n<p>この操作により、「constant/polyMesh」ディレクトリに<br>\n・boundary<br>\n・owner<br>\n・faces<br>\n・neighbor<br>\n・points<br>\nというOpenFOAM用のメッシュデータが生成されます。</p>\n<h2 id=\"3.-wheel%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">3. WHEELによるワークフローの作成 <a class=\"heading-anchor-permalink\" href=\"#3.-wheel%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>本節では、WHEELでのパラメトリックスタディ解析に必要なワークフローコンポーネントについて説明します。<br>\n本事例で必要なコンポーネントとその役割は以下です。</p>\n<ul>\n<li>Parameter Study コンポーネント：パラメータ化するデータの設定用</li>\n<li>Task コンポーネント - 1：PSコンポーネントにてパラメータ化したデータの転送用</li>\n<li>Task コンポーネント - 2：京へのジョブ投入及びOpenFOAM実行用</li>\n</ul>\n<p>以降で、各コンポーネントについて説明します。</p>\n<h3 id=\"parameter-study-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88openfoam_ps%EF%BC%89\">Parameter Study コンポーネント（OpenFOAM_PS） <a class=\"heading-anchor-permalink\" href=\"#parameter-study-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%EF%BC%88openfoam_ps%EF%BC%89\">#</a></h3>\n<p>前述の通り本事例では、分配菅への流入量をパラメータ化します。<br>\nそのため、OpenFOAM_PSコンポーネントのPSプロパティ[ parameter setting file ]には、OpenFOAMの初期状態の入力データである<br>\n0ディレクトリ配下の「U」ファイルにパラメータセッティングしたファイルを設定します。</p>\n<p>OpenFOAM_PSコンポーネントに設定するプロパティは以下です。</p>\n<h5 id=\"openfoam_ps\">OpenFOAM_PS <a class=\"heading-anchor-permalink\" href=\"#openfoam_ps\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>OpenFOAM_PS</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parameter setting file</td>\n<td>U.txt.json</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>U.txt, U.txt.json</td>\n</tr>\n</tbody>\n</table>\n<p>手順は以下です。</p>\n<ol>\n<li>PSディレクトリにUファイル（U.txt）をインポートする\n（後のファイル移動時を考慮し、一時的にファイル名を U -&gt; U.txt と変更しています）</li>\n<li>読み込んだ U.txt を右クリック[ edit for PS ]よりファイル編集画面を開く</li>\n<li>boundaryField -&gt; inlet -&gt; value の uniform (5 0 0)の5に対してターゲット設定を行う（Min Value:5, Max value:7, Step:1）</li>\n<li>設定後作成された「U.txt.json」ファイルをPSプロパティ[ parameter setting file ]に設定する</li>\n</ol>\n<p><img src=\"./img/OpenFOAM_PS.png\" alt=\"img\" title=\"OpenFOAM_PS\"></p>\n<p>以上がPSコンポーネントでの設定になります。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---1\">Task コンポーネント - 1 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---1\">#</a></h3>\n<p>ファイル転送用コンポーネント「moveFile_Task」について説明します。<br>\n本コンポーネントは、OpenFOAM_PSコンポーネントによりパラメータ化した「U.txt」ファイルをOpenFOAMでの計算で用いるために<br>\nOpenFOAM_PSコンポーネントから京コンピュータへ計算を投入するTask（詳細は後述）へ転送するためのコンポーネントです。</p>\n<p>moveFile_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"movefile_task\">moveFile_Task <a class=\"heading-anchor-permalink\" href=\"#movefile_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>moveFile_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td>moveFile.bat</td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>input.txt</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>localhost</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>resultRead.bat, value.txt *2</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>moveFile.bat</p>\n</blockquote>\n<pre><code>@echo off  \nmv ../U.txt ../runOpenFOAM_Task  \n</code></pre>\n<p>設定は以下です。</p>\n<ol>\n<li>moveFile_Taskコンポーネントへファイル転送をするスクリプトmoveFile.batをインポートする</li>\n<li>プロパティ[ script ]にmoveFile.batを設定する</li>\n<li>プロパティ[ remotehost ]に「 localhost 」を設定する　*1<br>\n*1 この処理は、京コンピュータへのジョブ投入前に実施するため、localhostで実施します。</li>\n</ol>\n<p><img src=\"./img/moveFile_Task.png\" alt=\"img\" title=\"moveFile_Task\"></p>\n<p>以上がファイル転送用Taskコンポーネントの設定になります。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---2\">Task コンポーネント - 2 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---2\">#</a></h3>\n<p>続いて、京コンピュータへのジョブ投入用及びOpenFOAM解析実行用コンポーネント「runOpenFOAM_Task」について説明します。<br>\n本コンポーネントは、京コンピュータのmicroキューを用いてOpenFOAMによる分配管の流体解析を実行するためのコンポーネントです。</p>\n<p>runOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"runopenfoam_task\">runOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#runopenfoam_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>runOpenFOAM_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://runOpenFOAM.sh\">runOpenFOAM.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>K_micro</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>micro</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>D50-d10.tar.gz</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://runOpenFOAM.sh\">runOpenFOAM.sh</a>, D50-d10.tar.gz*</td>\n</tr>\n</tbody>\n</table>\n<p>*　解析モデル及びOpenFOAMの計算設定ファイル一式</p>\n<blockquote>\n<p><a href=\"http://runOpenFOAM.sh\">runOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/sh  \n#PJM --rsc-list &quot;node=2&quot;  \n#PJM --mpi &quot;shape=2&quot;  \n#PJM --mpi &quot;proc=12&quot;  \n#PJM -s  \n#   \n. /work/system/Env_base  \n#  \nmodule load OpenFOAM/2.4.0-fujitsu-sparc64  \nsource $WM_PROJECT_DIR/etc/bashrc  \ntar xvzf D50-d10.tar.gz  \nmv ./U.txt U  \nmv ./U ./D50-d10/0  \ncd ./D50-d10  \ndecomposePar  \nmpiexec -n 12 simpleFoam -parallel  \nreconstructPar  \ntouch result.foam  \ncd ..  \ntar cvzf D50-d10.tar.gz D50-d10  \n</code></pre>\n<p>設定は以下です。</p>\n<ol>\n<li>京コンピュータでOpenFOAMを実行するために必要なデータ（OpenFOAMの入力ファイル「D50-b10.tar.gz」）及びジョブスクリプトrunOpenFOAM.shをインポートする</li>\n<li>プロパティ[ script ]にrunOpenFOAM.shを設定する</li>\n<li>プロパティ[ remotehost ]に事前に登録している京のリモートホスト情報「K_micro」設定する *</li>\n<li>プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「micro」を設定する</li>\n<li>moveFile_Taskコンポーネントへファイル転送をするスクリプトmoveFile.shをインポートする</li>\n<li>includeに回収するファイル名「D50-b10.tar.gz」を設定する</li>\n</ol>\n<p>*　京コンピュータでリソースグループmicroを使用して計算を行うため「K_micro」としています<br>\n　 ユーザの環境に合わせて名称の変更が必要です</p>\n<h3 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">ジョブスクリプトに関して <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>WHEELは、リソースグループmicroを用い、効率的に計算資源を利用することを目的としています。<br>\nよって、microキュー内（30分）で解析が完了するようにモデル規模、またノード数、プロセス数を設定しジョブを投入する必要があります。<br>\n本解析は<strong>2ノード12プロセス</strong>にて解析を行っております。</p>\n<p>また、ジョブスクリプトrunOpenFOAM.shには、#PJMで始まるジョブへのオプション設定の他に「OpenFOAMを実行するためのコマンド」を用意しています。<br>\nここでは、京でOpenFOAMを実行するためのコマンドを紹介します。</p>\n<p>通常、京で計算を行うためには計算用の実行モジュールを京のユーザが用意する必要があります。<br>\nしかし、オープンソースであるOpenFOAMは京に用意されているため、実行モジュールを用意する必要が無く<br>\n[ module load ]コマンドを使用することで、OpenFOAMのモジュールを利用することができます。</p>\n<p>本事例では、メッシュは作成済みであるため下記コマンドをスクリプトに組み込んでいます。</p>\n<pre><code>$ module load OpenFOAM/version..  \n$ source $WM_PROJECT_DIR/etc/bashrc  \n$ simpleFoam  \n</code></pre>\n<p>京で利用できるOpenFOAMのバージョンを確認するためには、</p>\n<pre><code>$ module avail\n</code></pre>\n<p>コマンドで確認してください。</p>\n<p>また、解析完了後、Paraviewで解析結果を確認するためには、空の「○○.foam」ファイル（○○は任意の文字列）が<br>\n必要であるため、空ファイルを作成するコマンド</p>\n<pre><code>$ touch ○○.foam\n</code></pre>\n<p>をスクリプト内に組み込んでおくと結果確認をスムーズに行うことができます。</p>\n<h3 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">リモートホスト登録情報に関して <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>本事例は、京のリソースグループmicroを利用してジョブを投入することを前提としております。<br>\nそのため、前述のホスト情報登録方法に従い、京のリソースグループmicroにジョブを投入するためのホスト情報を登録しておく必要があります。\n本サンプルでは、京コンピュータでリソースグループmicroを使用して計算を行うため「K_micro」としています。</p>\n<p>参考として、本事例で設定したホスト情報の中で注意すべき項目を示します。</p>\n<ul>\n<li>Host Work Dir：/scratch/groupname/…<br>\n※リソースグループmicroを用いてジョブを投入する場合、/home,/dataからジョブを投入することはできません。詳細は京のユーザガイドをご確認ください。</li>\n<li>Job Scheduler：ParallelNavi<br>\n※ジョブスケジューラの設定は、WHEELのモジュールディレクトリ内[ app/db/jobSceduler.json ]にて行ってください。</li>\n<li>Queue：micro<br>\n※ホスト情報のQueue欄に[ micro ]登録を登録しておくことで、Taskのプロパティからの選択が可能となります。</li>\n</ul>\n<p><img src=\"./img/runOpenFOAM_Task.png\" alt=\"img\" title=\"runOpenFOAM_Task\"></p>\n<p>moveFile_TaskとrunOpenFOAM_Taskを結線で繋ぎます。</p>\n<p>以上でワークフローの設定は終了です。</p>\n<h2 id=\"4.-%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E6%8A%95%E5%85%A5\">4. ジョブの投入 <a class=\"heading-anchor-permalink\" href=\"#4.-%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E6%8A%95%E5%85%A5\">#</a></h2>\n<p>ジョブの投入を行います。前述の「9.ワークフローの作成」にありますように、ジョブの投入は、ワークフロー実行画面上部の実行ボタンより行います。<br>\n実行状況の確認は、ログエリアやコンポーネント右上の実行状況表示アイコン、及びリストビュー画面から行います。</p>\n<p><img src=\"./img/job.png\" alt=\"img\" title=\"ジョブの投入\"></p>\n<h2 id=\"5.-%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\">5. 解析結果の確認 <a class=\"heading-anchor-permalink\" href=\"#5.-%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>解析結果の確認を行います。<br>\nリモート環境から回収した計算結果ファイルをローカル環境に移動し、「Paraview」にて確認します。</p>\n<h3 id=\"%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3\">解析結果のオープン <a class=\"heading-anchor-permalink\" href=\"#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3\">#</a></h3>\n<p>実行したパメトリックスタディ解析の結果のひとつ、<strong>流入速度5[m]</strong> の結果を確認します。<br>\nParaviewを起動し、[ File ] -&gt; [ Open ]… より、「result.foam *1」ファイルを選択し、[ OK ]ボタンを押下します。<br>\n*1 result.foam ファイルは、ジョブスクリプト内の「touch」コマンドにて作成したものです。（詳細は、前述の「ジョブスクリプトに関して」をご参照ください）</p>\n<p><img src=\"./img/result_open.png\" alt=\"img\" title=\"結果のオープン\"></p>\n<h3 id=\"%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C\">解析結果 <a class=\"heading-anchor-permalink\" href=\"#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C\">#</a></h3>\n<p><strong>流入速度5[m]</strong> の解析結果において、分配菅の断面図に <strong>速度 U</strong> を、ベクトルで <strong>圧力 p</strong> を表示した結果は以下になります。</p>\n<h5 id=\"%E6%B5%81%E5%85%A5%E9%80%9F%E5%BA%A65%5Bm%5D\">流入速度5[m] <a class=\"heading-anchor-permalink\" href=\"#%E6%B5%81%E5%85%A5%E9%80%9F%E5%BA%A65%5Bm%5D\">#</a></h5>\n<p><img src=\"./img/result_5.png\" alt=\"img\" title=\"流入速度5m_結果\"></p>\n<p>同様に、<strong>流入速度6[m]</strong>、<strong>流入速度7[m]</strong> の結果を示します。</p>\n<h5 id=\"%E6%B5%81%E5%85%A5%E9%80%9F%E5%BA%A66%5Bm%5D\">流入速度6[m] <a class=\"heading-anchor-permalink\" href=\"#%E6%B5%81%E5%85%A5%E9%80%9F%E5%BA%A66%5Bm%5D\">#</a></h5>\n<p><img src=\"./img/result_6.png\" alt=\"img\" title=\"流入速度6m_結果\"></p>\n<h5 id=\"%E6%B5%81%E5%85%A5%E9%80%9F%E5%BA%A67%5Bm%5D\">流入速度7[m] <a class=\"heading-anchor-permalink\" href=\"#%E6%B5%81%E5%85%A5%E9%80%9F%E5%BA%A67%5Bm%5D\">#</a></h5>\n<p><img src=\"./img/result_7.png\" alt=\"img\" title=\"流入速度7m_結果\"></p>\n<p>OpenFOAMを利用したパラメトリックスタディ解析ワークフロー例は以上になります。</p>\n",
      "id": 24
    },
    {
      "path": "WHEEL_tutorial/2_OpenFOAM_KPrepostCloud_sample/OpenFOAM_KPrepostCloud_sample.md",
      "url": "WHEEL_tutorial/2_OpenFOAM_KPrepostCloud_sample/OpenFOAM_KPrepostCloud_sample.html",
      "content": "# 京プリポストクラウドを用いたOpenFOAM解析ワークフローの実行\n本章では、前章で紹介した「OpenFOAMを利用したcavityケースの解析ワークフロー」の京プリポストクラウド上での実行方法について説明します。  \n以降、下記の順にて内容を紹介します。  \n\nまた、本章で使用するモデルデータは前章でダウンロード可能です。\nTaskコンポーネントで使用するスクリプトは、下記よりダウンロード可能です。  \n<a href=\"./sample/OpenFOAM_KPrepostCloud_sample.zip\">OpenFOAMサンプルデータ(京プリポストクラウド)</a>\n\n1. 京プリポストクラウドインスタンスへのOpenFOAM環境設定\n1. ワークフローの作成  \n　1. Task コンポーネント - 1  \n　2. Task コンポーネント - 2  \n　3. Task コンポーネント - 3  \n1. 解析の実行\n\n## 1. 京プリポストクラウドインスタンスへのOpenFOAM環境設定\n\n### 京プリポストクラウドインスタンス\n京プリポストクラウドサービスに関しては、理化学研究所のHPをご確認下さい。\n\nhttps://www.r-ccs.riken.jp/ungi/prpstcloud/\n\n本事例では、下記の構成をもつインスタンスを使用しています。  \n```\nイメージ名：Ubuntu16.04_LTS  \nサイズ　　：A4.medium  \n```\n\n### OpenFOAM環境設定\n京プリポストクラウドでOpenFOAMを実行するためには、ユーザ自身でアプリケーションをインストールする必要があります。  \n本節では、OpenFOAM(v6)のインストール方法について説明します。\n\n#### リポジトリの追加\n作成したインスタンスへログイン後、以下のコマンドをターミナルで実行します。\n```\nsudo sh -c \"wget -O - http://dl.openfoam.org/gpg.key | apt-key add -\"\n```\n\nOKが表示されることを確認します。\n```\n--20XX-XX-XX hh:mm:ss--  http://dl.openfoam.org/gpg.key\nResolving dl.openfoam.org (dl.openfoam.org)... 52.208.208.42\nConnecting to dl.openfoam.org (dl.openfoam.org)|52.208.208.42|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1710 (1.7K) [application/pgp-keys]\nSaving to: ‘STDOUT’\n\n-                             100%[=================================================>]   1.67K  --.-KB/s    in 0s\n\n20XX-XX-XX hh:mm:ss (61.8 MB/s) - written to stdout [1710/1710]\n\nOK\n```\n\n続いて以下のコマンドを実行します。  \nメッセージは表示されません。\n```\nsudo add-apt-repository http://dl.openfoam.org/ubuntu\n```\n\n#### アップデート\n以下のコマンドを実行します。\n```\nsudo apt-get update\n```\n\n以下のメッセージを確認します。\n```\n～中略～\nReading package lists... Done\n```\n\n#### インストールの実行\n以下のコマンドを実行します。\n```\nsudo apt-get -y install openfoam6\n```\n\n実行完了後、以下のメッセージが表示されます。  \n従って、次節でbashrcの編集を行います。\n```\n～中略～\n** To use OpenFOAM please add\n**\n**    . /opt/openfoam6/etc/bashrc\n**\n** To your ~/.bashrc\n～中略～\n```\n\n#### bashrcの編集\nOpenFOAM v6を使用するためにはパスを通す必要があります。\nここでは、viを用いてbashrcを編集します。\n\n以下のコマンドを実行します。\n```\nvi ~/.bashrc\n```\nページの最下部に移動し、iキーを押し、入力モードに変更します。  \n以下を記入します。\n```\nsource /opt/openfoam6/etc/bashrc\n```\nESCキーを押し、入力モードから離脱後、下記コマンドにより保存します。\n```\n:wq\n```\n\n#### インストールの確認\nインスタンスを再起動(ソフトリブート)後、下記のコマンドを実行します。\n```\nsimpleFoam -help\n```\n\n以下が表示されることを確認してください。\n```\nUsage: simpleFoam [OPTIONS]\noptions:\n  -case <dir>       specify alternate case directory, default is the cwd\n  -fileHandler <handler>\n                    override the fileHandler\n  -hostRoots <(((host1 dir1) .. (hostN dirN))>\n                    slave root directories (per host) for distributed running\n  -listFunctionObjects\n                    List functionObjects\n  -listFvOptions    List fvOptions\n  -listRegisteredSwitches\n                    List switches registered for run-time modification\n  -listScalarBCs    List scalar field boundary conditions (fvPatchField<scalar>)\n  -listSwitches     List switches declared in libraries but not set in\n                    etc/controlDict\n  -listTurbulenceModels\n                    List turbulenceModels\n  -listUnsetSwitches\n                    List switches declared in libraries but not set in\n                    etc/controlDict\n  -listVectorBCs    List vector field boundary conditions (fvPatchField<vector>)\n  -noFunctionObjects\n                    do not execute functionObjects\n  -parallel         run in parallel\n  -postProcess      Execute functionObjects only\n  -roots <(dir1 .. dirN)>\n                    slave root directories for distributed running\n  -srcDoc           display source code in browser\n  -doc              display application documentation in browser\n  -help             print the usage\n\nUsing: OpenFOAM-6 (see www.OpenFOAM.org)\nBuild: 6-fa1285188035\n```\n\n以上で京プリポストクラウドインスタンスへのOpenFOAM環境設定は完了です。\n\n## 2. ワークフローの作成\nワークフローの構成は前章と同様に以下の構成となっております。\n各コンポーネントの詳細に関しては、前章をご確認ください。\n\n- Task コンポーネント - 1：ITOへのジョブ投入及びOpenFOAM前処理\n- Task コンポーネント - 2：ITOへのジョブ投入及びOpenFOAM実行用\n- Task コンポーネント - 3：ITOへのジョブ投入及びファイル回収用\n\n京プリポストクラウドでは、ジョブスケジューラは利用できないため各Taskコンポーネントに設定する\nスクリプトファイルは以下のようになります。  \n### Taskコンポーネント-1 PreRunOpenFOAM_Task\n\n> PreRunOpenFOAM.sh  \n```\n#!/bin/bash\nsource /opt/openfoam6/etc/bashrc\ntar xvzf cavity.tar.gz\nmkdir ../WORK\nmv cavity ../WORK\ncd ../WORK/cavity\nblockMesh\n```\n\n### Taskコンポーネント-2 SolRunOpenFOAM_Task\n\n> SolRunOpenFOAM.sh  \n```\n#!/bin/bash\nsource /opt/openfoam6/etc/bashrc\ncd ../WORK/cavity\nicoFoam > ./log.icoFoam 2>&1\n```\n\n### Taskコンポーネント-3 ResultRunOpenFOAM_Task\n\n> ResultRunOpenFOAM.sh  \n```\n#!/bin/bash\ncd ../WORK/cavity\ntouch result.foam\ncd ../  \ntar cvzf cavity.tar.gz cavity\nmv cavity.tar.gz ../ResultRunOpenFOAM_Task/\n```\n\n## 3. 解析の実行\n\n### リモートホスト登録情報に関して\n\n解析の実行にあたり、リモートホスト画面にてユーザが作成した京プリポストクラウドのインスタンス情報を登録する必要があります。\n参考として、本事例で設定したホスト情報の中で注意すべき項目を示します。\n\n- Host Name：10.9.X.X\n- User ID：ubuntu\n- Host Work Dir：/home/ubuntu\n\n### ワークフローの実行\n上記スクリプトを各コンポーネントに設定後、プロジェクト実行ボタンを押下することで計算が開始されます。  \nプロジェクト実行時には京プリポストクラウドとVPN接続されている必要があります。  \n京プリポストクラウドとのVPN接続に関しては、理化学研究所のHPをご確認下さい。\n\n![img](./img/execute_project.png \"プロジェクトの実行\")  \n\n結果の確認方法は前章をご確認下さい。\n\n京プリポストクラウドを用いたOpenFOAM解析ワークフローの実行例は以上になります。",
      "html": "<h1 id=\"%E4%BA%AC%E3%83%97%E3%83%AA%E3%83%9D%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%92%E7%94%A8%E3%81%84%E3%81%9Fopenfoam%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C\">京プリポストクラウドを用いたOpenFOAM解析ワークフローの実行 <a class=\"heading-anchor-permalink\" href=\"#%E4%BA%AC%E3%83%97%E3%83%AA%E3%83%9D%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%92%E7%94%A8%E3%81%84%E3%81%9Fopenfoam%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h1>\n<p>本章では、前章で紹介した「OpenFOAMを利用したcavityケースの解析ワークフロー」の京プリポストクラウド上での実行方法について説明します。<br>\n以降、下記の順にて内容を紹介します。</p>\n<p>また、本章で使用するモデルデータは前章でダウンロード可能です。\nTaskコンポーネントで使用するスクリプトは、下記よりダウンロード可能です。<br>\n<a href=\"./sample/OpenFOAM_KPrepostCloud_sample.zip\">OpenFOAMサンプルデータ(京プリポストクラウド)</a></p>\n<ol>\n<li>京プリポストクラウドインスタンスへのOpenFOAM環境設定</li>\n<li>ワークフローの作成<br>\n　1. Task コンポーネント - 1<br>\n　2. Task コンポーネント - 2<br>\n　3. Task コンポーネント - 3</li>\n<li>解析の実行</li>\n</ol>\n<h2 id=\"1.-%E4%BA%AC%E3%83%97%E3%83%AA%E3%83%9D%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%B8%E3%81%AEopenfoam%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A\">1. 京プリポストクラウドインスタンスへのOpenFOAM環境設定 <a class=\"heading-anchor-permalink\" href=\"#1.-%E4%BA%AC%E3%83%97%E3%83%AA%E3%83%9D%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%B8%E3%81%AEopenfoam%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<h3 id=\"%E4%BA%AC%E3%83%97%E3%83%AA%E3%83%9D%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9\">京プリポストクラウドインスタンス <a class=\"heading-anchor-permalink\" href=\"#%E4%BA%AC%E3%83%97%E3%83%AA%E3%83%9D%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9\">#</a></h3>\n<p>京プリポストクラウドサービスに関しては、理化学研究所のHPをご確認下さい。</p>\n<p><a href=\"https://www.r-ccs.riken.jp/ungi/prpstcloud/\">https://www.r-ccs.riken.jp/ungi/prpstcloud/</a></p>\n<p>本事例では、下記の構成をもつインスタンスを使用しています。</p>\n<pre><code>イメージ名：Ubuntu16.04_LTS  \nサイズ　　：A4.medium  \n</code></pre>\n<h3 id=\"openfoam%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A\">OpenFOAM環境設定 <a class=\"heading-anchor-permalink\" href=\"#openfoam%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>京プリポストクラウドでOpenFOAMを実行するためには、ユーザ自身でアプリケーションをインストールする必要があります。<br>\n本節では、OpenFOAM(v6)のインストール方法について説明します。</p>\n<h4 id=\"%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E8%BF%BD%E5%8A%A0\">リポジトリの追加 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E8%BF%BD%E5%8A%A0\">#</a></h4>\n<p>作成したインスタンスへログイン後、以下のコマンドをターミナルで実行します。</p>\n<pre><code>sudo sh -c &quot;wget -O - http://dl.openfoam.org/gpg.key | apt-key add -&quot;\n</code></pre>\n<p>OKが表示されることを確認します。</p>\n<pre><code>--20XX-XX-XX hh:mm:ss--  http://dl.openfoam.org/gpg.key\nResolving dl.openfoam.org (dl.openfoam.org)... 52.208.208.42\nConnecting to dl.openfoam.org (dl.openfoam.org)|52.208.208.42|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1710 (1.7K) [application/pgp-keys]\nSaving to: ‘STDOUT’\n\n-                             100%[=================================================&gt;]   1.67K  --.-KB/s    in 0s\n\n20XX-XX-XX hh:mm:ss (61.8 MB/s) - written to stdout [1710/1710]\n\nOK\n</code></pre>\n<p>続いて以下のコマンドを実行します。<br>\nメッセージは表示されません。</p>\n<pre><code>sudo add-apt-repository http://dl.openfoam.org/ubuntu\n</code></pre>\n<h4 id=\"%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88\">アップデート <a class=\"heading-anchor-permalink\" href=\"#%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88\">#</a></h4>\n<p>以下のコマンドを実行します。</p>\n<pre><code>sudo apt-get update\n</code></pre>\n<p>以下のメッセージを確認します。</p>\n<pre><code>～中略～\nReading package lists... Done\n</code></pre>\n<h4 id=\"%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E5%AE%9F%E8%A1%8C\">インストールの実行 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h4>\n<p>以下のコマンドを実行します。</p>\n<pre><code>sudo apt-get -y install openfoam6\n</code></pre>\n<p>実行完了後、以下のメッセージが表示されます。<br>\n従って、次節でbashrcの編集を行います。</p>\n<pre><code>～中略～\n** To use OpenFOAM please add\n**\n**    . /opt/openfoam6/etc/bashrc\n**\n** To your ~/.bashrc\n～中略～\n</code></pre>\n<h4 id=\"bashrc%E3%81%AE%E7%B7%A8%E9%9B%86\">bashrcの編集 <a class=\"heading-anchor-permalink\" href=\"#bashrc%E3%81%AE%E7%B7%A8%E9%9B%86\">#</a></h4>\n<p>OpenFOAM v6を使用するためにはパスを通す必要があります。\nここでは、viを用いてbashrcを編集します。</p>\n<p>以下のコマンドを実行します。</p>\n<pre><code>vi ~/.bashrc\n</code></pre>\n<p>ページの最下部に移動し、iキーを押し、入力モードに変更します。<br>\n以下を記入します。</p>\n<pre><code>source /opt/openfoam6/etc/bashrc\n</code></pre>\n<p>ESCキーを押し、入力モードから離脱後、下記コマンドにより保存します。</p>\n<pre><code>:wq\n</code></pre>\n<h4 id=\"%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D\">インストールの確認 <a class=\"heading-anchor-permalink\" href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h4>\n<p>インスタンスを再起動(ソフトリブート)後、下記のコマンドを実行します。</p>\n<pre><code>simpleFoam -help\n</code></pre>\n<p>以下が表示されることを確認してください。</p>\n<pre><code>Usage: simpleFoam [OPTIONS]\noptions:\n  -case &lt;dir&gt;       specify alternate case directory, default is the cwd\n  -fileHandler &lt;handler&gt;\n                    override the fileHandler\n  -hostRoots &lt;(((host1 dir1) .. (hostN dirN))&gt;\n                    slave root directories (per host) for distributed running\n  -listFunctionObjects\n                    List functionObjects\n  -listFvOptions    List fvOptions\n  -listRegisteredSwitches\n                    List switches registered for run-time modification\n  -listScalarBCs    List scalar field boundary conditions (fvPatchField&lt;scalar&gt;)\n  -listSwitches     List switches declared in libraries but not set in\n                    etc/controlDict\n  -listTurbulenceModels\n                    List turbulenceModels\n  -listUnsetSwitches\n                    List switches declared in libraries but not set in\n                    etc/controlDict\n  -listVectorBCs    List vector field boundary conditions (fvPatchField&lt;vector&gt;)\n  -noFunctionObjects\n                    do not execute functionObjects\n  -parallel         run in parallel\n  -postProcess      Execute functionObjects only\n  -roots &lt;(dir1 .. dirN)&gt;\n                    slave root directories for distributed running\n  -srcDoc           display source code in browser\n  -doc              display application documentation in browser\n  -help             print the usage\n\nUsing: OpenFOAM-6 (see www.OpenFOAM.org)\nBuild: 6-fa1285188035\n</code></pre>\n<p>以上で京プリポストクラウドインスタンスへのOpenFOAM環境設定は完了です。</p>\n<h2 id=\"2.-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">2. ワークフローの作成 <a class=\"heading-anchor-permalink\" href=\"#2.-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>ワークフローの構成は前章と同様に以下の構成となっております。\n各コンポーネントの詳細に関しては、前章をご確認ください。</p>\n<ul>\n<li>Task コンポーネント - 1：ITOへのジョブ投入及びOpenFOAM前処理</li>\n<li>Task コンポーネント - 2：ITOへのジョブ投入及びOpenFOAM実行用</li>\n<li>Task コンポーネント - 3：ITOへのジョブ投入及びファイル回収用</li>\n</ul>\n<p>京プリポストクラウドでは、ジョブスケジューラは利用できないため各Taskコンポーネントに設定する\nスクリプトファイルは以下のようになります。</p>\n<h3 id=\"task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-1-prerunopenfoam_task\">Taskコンポーネント-1 PreRunOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-1-prerunopenfoam_task\">#</a></h3>\n<blockquote>\n<p><a href=\"http://PreRunOpenFOAM.sh\">PreRunOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\nsource /opt/openfoam6/etc/bashrc\ntar xvzf cavity.tar.gz\nmkdir ../WORK\nmv cavity ../WORK\ncd ../WORK/cavity\nblockMesh\n</code></pre>\n<h3 id=\"task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-2-solrunopenfoam_task\">Taskコンポーネント-2 SolRunOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-2-solrunopenfoam_task\">#</a></h3>\n<blockquote>\n<p><a href=\"http://SolRunOpenFOAM.sh\">SolRunOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\nsource /opt/openfoam6/etc/bashrc\ncd ../WORK/cavity\nicoFoam &gt; ./log.icoFoam 2&gt;&amp;1\n</code></pre>\n<h3 id=\"task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-3-resultrunopenfoam_task\">Taskコンポーネント-3 ResultRunOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#task%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88-3-resultrunopenfoam_task\">#</a></h3>\n<blockquote>\n<p><a href=\"http://ResultRunOpenFOAM.sh\">ResultRunOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\ncd ../WORK/cavity\ntouch result.foam\ncd ../  \ntar cvzf cavity.tar.gz cavity\nmv cavity.tar.gz ../ResultRunOpenFOAM_Task/\n</code></pre>\n<h2 id=\"3.-%E8%A7%A3%E6%9E%90%E3%81%AE%E5%AE%9F%E8%A1%8C\">3. 解析の実行 <a class=\"heading-anchor-permalink\" href=\"#3.-%E8%A7%A3%E6%9E%90%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<h3 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">リモートホスト登録情報に関して <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>解析の実行にあたり、リモートホスト画面にてユーザが作成した京プリポストクラウドのインスタンス情報を登録する必要があります。\n参考として、本事例で設定したホスト情報の中で注意すべき項目を示します。</p>\n<ul>\n<li>Host Name：10.9.X.X</li>\n<li>User ID：ubuntu</li>\n<li>Host Work Dir：/home/ubuntu</li>\n</ul>\n<h3 id=\"%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C\">ワークフローの実行 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h3>\n<p>上記スクリプトを各コンポーネントに設定後、プロジェクト実行ボタンを押下することで計算が開始されます。<br>\nプロジェクト実行時には京プリポストクラウドとVPN接続されている必要があります。<br>\n京プリポストクラウドとのVPN接続に関しては、理化学研究所のHPをご確認下さい。</p>\n<p><img src=\"./img/execute_project.png\" alt=\"img\" title=\"プロジェクトの実行\"></p>\n<p>結果の確認方法は前章をご確認下さい。</p>\n<p>京プリポストクラウドを用いたOpenFOAM解析ワークフローの実行例は以上になります。</p>\n",
      "id": 25
    },
    {
      "path": "WHEEL_tutorial/3_OpenFOAM_TCS_sample/OpenFOAM_TCS_sample.md",
      "url": "WHEEL_tutorial/3_OpenFOAM_TCS_sample/OpenFOAM_TCS_sample.html",
      "content": "# OpenFOAMを利用したcavityケースの解析ワークフロー\n本章では、WHEELを用いた計算事例として「OpenFOAMを利用したcavityケースの解析ワークフロー」を紹介します。  \n九大ITOコンピュータのito-g-16-dbgキューを利用して行います。  \n以降、下記の順にて事例内容を紹介します。  \n\nまた、本章で使用するモデルデータ、OpenFOAMの計算実行ファイル、及びTaskコンポーネントで使用するスクリプト例は、  \n下記よりダウンロード可能です。  \n<a href=\"./sample/OpenFOAM_tutorial_sample.zip\">OpenFOAMサンプルデータ</a>\n\n1. 解析概要\n1. ワークフローの作成  \n　1. Task コンポーネント - 1  \n　2. Task コンポーネント - 2  \n　3. Task コンポーネント - 3  \n1. ジョブの投入\n1. 解析結果の確認\n\n## 1. 解析概要\n\n本事例で使用する解析対象モデルは、CFDソフトウェアの基礎的な検証例として著名な「cavity」で行いました。  \n上端の壁が水平方向に一定速度で動き、引きずられるように内部の流体が動くようなモデルの解析です。\n\n![img](./img/cavity.png \"cavity\")  \n\n## 2. WHEELによるワークフローの作成\n\n本節では、WHEELでのパラメトリックスタディ解析に必要なワークフローコンポーネントについて説明します。  \n本事例で必要なコンポーネントとその役割は以下です。\n\n- Task コンポーネント - 1：ITOへのジョブ投入及びOpenFOAM前処理\n- Task コンポーネント - 2：ITOへのジョブ投入及びOpenFOAM実行用\n- Task コンポーネント - 3：ITOへのジョブ投入及びファイル回収用\n\n以降で、各コンポーネントについて説明します。\n\n### Task コンポーネント - 1\n\n続いて、ITOコンピュータへのジョブ投入用及びOpenFOAM解析実行前処理用コンポーネント「PreRunOpenFOAM_Task」について説明します。  \n本コンポーネントは、ITOコンピュータのito-g-1-dbgキューを用いてOpenFOAMによる分配管の流体解析を実行するための前処理を行うコンポーネントです。\n\nPreRunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### PreRunOpenFOAM_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | PreRunOpenFOAM_Task |\n| Script | PreRunOpenFOAM.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | TCSjobScheduler_1 |\n| UseJobScheduler | true |\n| Queue | ito-g-1-dbg |\n| Clean up flag | keep files |\n| include | - |\n| exclude | - |\n| Files | PreRunOpenFOAM.sh, cavity.tar.gz* |  \n\n*OpenFOAMの計算実行ファイル一式\n\n> PreRunOpenFOAM.sh  \n```\n#!/bin/bash\n#PJM -L \"rscgrp=ito-g-1-dbg\"\n#PJM -L \"rscunit=ito-b\"\n#PJM -L \"elapse=1:00:00\"\n#PJM -j -X -S\n\ntar xvzf cavity.tar.gz\nmkdir ../WORK\nmv cavity ../WORK\ncd ../WORK/cavity\nblockMesh\ndecomposePar\n```\n\n![img](./img/PreRunOpenFOAM_Task.png \"OpenFOAM_PreRunOpenFOAM_Task\")  :q\n\n設定は以下です。　　\n\n1. ITOコンピュータでOpenFOAMを実行するために必要なデータ（OpenFOAMの入力ファイル「cavity.tar.gz」）及びジョブスクリプトPreRunOpenFOAM.shをインポートします\n1. プロパティ[ script ]にPreRunOpenFOAM.shを設定します\n1. プロパティ[ remotehost ]に事前に登録しているITOのリモートホスト情報「TCSjobScheduler_1」設定します*\n1. プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「ito-g-1-dbg」を設定します\n\n*　ITOコンピュータでTCSを使用して計算を行うため「TCSjobScheduler_1」としています。  \n　 ユーザの環境に合わせて設定の変更が必要です。\n\n### Task コンポーネント - 2\n\n続いて、ITOコンピュータへのジョブ投入用及びOpenFOAM解析実行用コンポーネント「SolRunOpenFOAM_Task」について説明します。  \n本コンポーネントは、ITOコンピュータのito-g-4-dbgキューを用いてOpenFOAMによるcavityの解析を実行するためのコンポーネントです。\n\nSolRunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### SolRunOpenFOAM_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | SolRunOpenFOAM_Task |\n| Script | SolRunOpenFOAM.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | TCSjobScheduler_4 |\n| UseJobScheduler | true |\n| Queue | ito-g-4-dbg |\n| Clean up flag | keep files |\n| include | - |\n| exclude | - |\n| Files | SolRunOpenFOAM.sh | \n\n> SolRunOpenFOAM.sh  \n```\n#!/bin/bash\n#PJM -L \"rscgrp=ito-g-4-dbg\"\n#PJM -L \"rscunit=ito-b\"\n#PJM -L \"vnode=4\"\n#PJM -L \"vnode-core=9\"\n#PJM -L \"elapse=1:00:00\"\n#PJM -j -X -S\n\n## OpenFOAM-v1706\n. /home/app/a/OpenFOAM/OpenFOAM-v1706/etc/bashrc\nsource /etc/bashrc\ncd ../WORK/cavity\nmpiexec -np 4 icoFoam -parallel > ./log.icoFoam 2>&1\n```\n\n![img](./img/SolRunOpenFOAM_Task.png \"OpenFOAM_SolRunOpenFOAM_Task\")  \n\n設定は以下です。　　\n\n1. ITOコンピュータでOpenFOAMを実行するために必要なジョブスクリプトSolRunOpenFOAM.shをインポートします\n1. プロパティ[ script ]にSolRunOpenFOAM.shを設定します\n1. プロパティ[ remotehost ]に事前に登録しているITOのリモートホスト情報「TCSjobScheduler_4」設定します*\n1. プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「ito-g-4-dbg」を設定します\n\n### Task コンポーネント - 3\n\n続いて、ITOコンピュータへのジョブ投入用及びOpenFOAM解析実行後処理用コンポーネント「ResultRunOpenFOAM_Task」について説明します。  \n本コンポーネントは、ITOコンピュータのito-g-1-dbgキューを用いてOpenFOAMによるcavityの解析を実行するためのコンポーネントです。\n\nResultRunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### ResultRunOpenFOAM_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | ResultRunOpenFOAM_Task |\n| Script | ResultRunOpenFOAM.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | TCSjobScheduler_1 |\n| UseJobScheduler | true |\n| Queue | ito-g-1-dbg |\n| Clean up flag | keep files |\n| include | cavity.tar.gz |\n| exclude | - |\n| Files | ResultRunOpenFOAM.sh |\n\n> ResultRunOpenFOAM.sh  \n```\n#!/bin/bash\n#PJM -L \"rscgrp=ito-g-1-dbg\"\n#PJM -L \"rscunit=ito-b\"\n#PJM -L \"elapse=1:00:00\"\n#PJM -j -X -S\n\ncd ../WORK/cavity\nreconstructPar  \ntouch result.foam  \ncd ../\ntar cvzf cavity.tar.gz cavity\n```\n\n![img](./img/ResultRunOpenFOAM_Task.png \"OpenFOAM_ResultRunOpenFOAM_Task\")  \n\n設定は以下です。　　\n\n1. ITOコンピュータでOpenFOAMを実行するために必要なジョブスクリプトrunOpenFOAM.shをインポートします\n1. プロパティ[ script ]にResultRunOpenFOAM.shを設定します\n1. プロパティ[ remotehost ]に事前に登録しているITOのリモートホスト情報「TCSjobScheduler_1」設定すします*\n1. プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「ito-g-1-dbg」を設定します\n1. includeに回収するファイル名「cavity.tar.gz」を設定します\n\n### ジョブスクリプトに関して\n\nWHEELは、リソースグループを用い、効率的に計算資源を利用することを目的としています。  \nよって、キュー内で解析が完了するようにモデル規模、またノード数、プロセス数を設定しジョブを投入する必要があります。  \n本解析は**4ノード36プロセス**にて解析を行っております。\n\nまた、ジョブスクリプトrunOpenFOAM.shには、#PJMで始まるジョブへのオプション設定の他に「OpenFOAMを実行するためのコマンド」を用意しています。  \nここでは、ITOでOpenFOAMを実行するためのコマンドを紹介します。\n\nITOで利用できるOpenFOAMのバージョンを確認するためには、  \n\n```\n$ module avail\n```\n\nコマンドで確認してください。  \n\nまた、解析完了後、Paraviewで解析結果を確認するためには、空の「○○.foam」ファイル（○○は任意の文字列）が  \n必要であるため、空ファイルを作成するコマンド\n\n```\n$ touch ○○.foam\n```\n\nをスクリプト内に組み込んでおくと結果確認をスムーズに行うことができます。\n\n### リモートホスト登録情報に関して\n\n本事例は、ITOのリソースグループを利用してジョブを投入することを前提としております。  \nそのため、前述のホスト情報登録方法に従い、ITOのリソースグループにジョブを投入するためのホスト情報を登録しておく必要があります。  \n本サンプルでは、ITOコンピュータでリソースグループito-g-1-dbgを使用して計算を行うため「TCSjobScheduler_1」としています。  \n\n参考として、本事例で設定したホスト情報の中で注意すべき項目を示します。\n\n- Host Work Dir：/scratch/groupname/.....  \n※リソースグループを用いてジョブを投入する場合、/home,/dataからジョブを投入することはできません。詳細はITOのユーザガイドをご確認ください。  \n- Job Scheduler：TCS\n※ジョブスケジューラの設定は、WHEELのモジュールディレクトリ内[ app/db/jobSceduler.json ]にて行ってください。  \n- Queue：ito-g-1-dbg\n※ホスト情報のQueue欄に[ ito-g-1-dbg ]登録を登録しておくことで、Taskのプロパティからの選択が可能となります。  \n\n以上でワークフローの設定は終了です。\n\n## 3. ジョブの投入\n\nジョブの投入を行います。前述の「9.ワークフローの作成」にありますように、ジョブの投入は、ワークフロー実行画面上部の実行ボタンより行います。  \n実行状況の確認は、ログエリアやコンポーネント右上の実行状況表示アイコン、及びリストビュー画面から行います。  \n\n![img](./img/finishState.png \"ジョブの投入\")  \n\n## 4. 解析結果の確認\n\n解析結果の確認を行います。  \nリモート環境から回収した計算結果ファイルをローカル環境に移動し、「Paraview」にて確認します。  \n\n### 解析結果のオープン\n\nParaviewを起動し、[ File ] -> [ Open ].... より、「result.foam *1」ファイルを選択し、[ OK ]ボタンを押下します。　　\n*1 result.foam ファイルは、ジョブスクリプト内の「touch」コマンドにて作成したものです。（詳細は、前述の「ジョブスクリプトに関して」をご参照ください）\n\n### 解析結果\n\n参考として風速ベクトルの可視化結果を記載します。\n\n![img](./img/cavity_result.png \"風速ベクトル\")  \n\nOpenFOAMを利用した九大ITOによる解析ワークフロー例は以上になります。\n",
      "html": "<h1 id=\"openfoam%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9Fcavity%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\">OpenFOAMを利用したcavityケースの解析ワークフロー <a class=\"heading-anchor-permalink\" href=\"#openfoam%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9Fcavity%E3%82%B1%E3%83%BC%E3%82%B9%E3%81%AE%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\">#</a></h1>\n<p>本章では、WHEELを用いた計算事例として「OpenFOAMを利用したcavityケースの解析ワークフロー」を紹介します。<br>\n九大ITOコンピュータのito-g-16-dbgキューを利用して行います。<br>\n以降、下記の順にて事例内容を紹介します。</p>\n<p>また、本章で使用するモデルデータ、OpenFOAMの計算実行ファイル、及びTaskコンポーネントで使用するスクリプト例は、<br>\n下記よりダウンロード可能です。<br>\n<a href=\"./sample/OpenFOAM_tutorial_sample.zip\">OpenFOAMサンプルデータ</a></p>\n<ol>\n<li>解析概要</li>\n<li>ワークフローの作成<br>\n　1. Task コンポーネント - 1<br>\n　2. Task コンポーネント - 2<br>\n　3. Task コンポーネント - 3</li>\n<li>ジョブの投入</li>\n<li>解析結果の確認</li>\n</ol>\n<h2 id=\"1.-%E8%A7%A3%E6%9E%90%E6%A6%82%E8%A6%81\">1. 解析概要 <a class=\"heading-anchor-permalink\" href=\"#1.-%E8%A7%A3%E6%9E%90%E6%A6%82%E8%A6%81\">#</a></h2>\n<p>本事例で使用する解析対象モデルは、CFDソフトウェアの基礎的な検証例として著名な「cavity」で行いました。<br>\n上端の壁が水平方向に一定速度で動き、引きずられるように内部の流体が動くようなモデルの解析です。</p>\n<p><img src=\"./img/cavity.png\" alt=\"img\" title=\"cavity\"></p>\n<h2 id=\"2.-wheel%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">2. WHEELによるワークフローの作成 <a class=\"heading-anchor-permalink\" href=\"#2.-wheel%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>本節では、WHEELでのパラメトリックスタディ解析に必要なワークフローコンポーネントについて説明します。<br>\n本事例で必要なコンポーネントとその役割は以下です。</p>\n<ul>\n<li>Task コンポーネント - 1：ITOへのジョブ投入及びOpenFOAM前処理</li>\n<li>Task コンポーネント - 2：ITOへのジョブ投入及びOpenFOAM実行用</li>\n<li>Task コンポーネント - 3：ITOへのジョブ投入及びファイル回収用</li>\n</ul>\n<p>以降で、各コンポーネントについて説明します。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---1\">Task コンポーネント - 1 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---1\">#</a></h3>\n<p>続いて、ITOコンピュータへのジョブ投入用及びOpenFOAM解析実行前処理用コンポーネント「PreRunOpenFOAM_Task」について説明します。<br>\n本コンポーネントは、ITOコンピュータのito-g-1-dbgキューを用いてOpenFOAMによる分配管の流体解析を実行するための前処理を行うコンポーネントです。</p>\n<p>PreRunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"prerunopenfoam_task\">PreRunOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#prerunopenfoam_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>PreRunOpenFOAM_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://PreRunOpenFOAM.sh\">PreRunOpenFOAM.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>TCSjobScheduler_1</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>ito-g-1-dbg</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>-</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://PreRunOpenFOAM.sh\">PreRunOpenFOAM.sh</a>, cavity.tar.gz*</td>\n</tr>\n</tbody>\n</table>\n<p>*OpenFOAMの計算実行ファイル一式</p>\n<blockquote>\n<p><a href=\"http://PreRunOpenFOAM.sh\">PreRunOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\n#PJM -L &quot;rscgrp=ito-g-1-dbg&quot;\n#PJM -L &quot;rscunit=ito-b&quot;\n#PJM -L &quot;elapse=1:00:00&quot;\n#PJM -j -X -S\n\ntar xvzf cavity.tar.gz\nmkdir ../WORK\nmv cavity ../WORK\ncd ../WORK/cavity\nblockMesh\ndecomposePar\n</code></pre>\n<p><img src=\"./img/PreRunOpenFOAM_Task.png\" alt=\"img\" title=\"OpenFOAM_PreRunOpenFOAM_Task\">  :q</p>\n<p>設定は以下です。</p>\n<ol>\n<li>ITOコンピュータでOpenFOAMを実行するために必要なデータ（OpenFOAMの入力ファイル「cavity.tar.gz」）及びジョブスクリプトPreRunOpenFOAM.shをインポートします</li>\n<li>プロパティ[ script ]にPreRunOpenFOAM.shを設定します</li>\n<li>プロパティ[ remotehost ]に事前に登録しているITOのリモートホスト情報「TCSjobScheduler_1」設定します*</li>\n<li>プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「ito-g-1-dbg」を設定します</li>\n</ol>\n<p>*　ITOコンピュータでTCSを使用して計算を行うため「TCSjobScheduler_1」としています。<br>\n　 ユーザの環境に合わせて設定の変更が必要です。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---2\">Task コンポーネント - 2 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---2\">#</a></h3>\n<p>続いて、ITOコンピュータへのジョブ投入用及びOpenFOAM解析実行用コンポーネント「SolRunOpenFOAM_Task」について説明します。<br>\n本コンポーネントは、ITOコンピュータのito-g-4-dbgキューを用いてOpenFOAMによるcavityの解析を実行するためのコンポーネントです。</p>\n<p>SolRunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"solrunopenfoam_task\">SolRunOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#solrunopenfoam_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>SolRunOpenFOAM_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://SolRunOpenFOAM.sh\">SolRunOpenFOAM.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>TCSjobScheduler_4</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>ito-g-4-dbg</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>-</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://SolRunOpenFOAM.sh\">SolRunOpenFOAM.sh</a></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"http://SolRunOpenFOAM.sh\">SolRunOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\n#PJM -L &quot;rscgrp=ito-g-4-dbg&quot;\n#PJM -L &quot;rscunit=ito-b&quot;\n#PJM -L &quot;vnode=4&quot;\n#PJM -L &quot;vnode-core=9&quot;\n#PJM -L &quot;elapse=1:00:00&quot;\n#PJM -j -X -S\n\n## OpenFOAM-v1706\n. /home/app/a/OpenFOAM/OpenFOAM-v1706/etc/bashrc\nsource /etc/bashrc\ncd ../WORK/cavity\nmpiexec -np 4 icoFoam -parallel &gt; ./log.icoFoam 2&gt;&amp;1\n</code></pre>\n<p><img src=\"./img/SolRunOpenFOAM_Task.png\" alt=\"img\" title=\"OpenFOAM_SolRunOpenFOAM_Task\"></p>\n<p>設定は以下です。</p>\n<ol>\n<li>ITOコンピュータでOpenFOAMを実行するために必要なジョブスクリプトSolRunOpenFOAM.shをインポートします</li>\n<li>プロパティ[ script ]にSolRunOpenFOAM.shを設定します</li>\n<li>プロパティ[ remotehost ]に事前に登録しているITOのリモートホスト情報「TCSjobScheduler_4」設定します*</li>\n<li>プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「ito-g-4-dbg」を設定します</li>\n</ol>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---3\">Task コンポーネント - 3 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---3\">#</a></h3>\n<p>続いて、ITOコンピュータへのジョブ投入用及びOpenFOAM解析実行後処理用コンポーネント「ResultRunOpenFOAM_Task」について説明します。<br>\n本コンポーネントは、ITOコンピュータのito-g-1-dbgキューを用いてOpenFOAMによるcavityの解析を実行するためのコンポーネントです。</p>\n<p>ResultRunOpenFOAM_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"resultrunopenfoam_task\">ResultRunOpenFOAM_Task <a class=\"heading-anchor-permalink\" href=\"#resultrunopenfoam_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>ResultRunOpenFOAM_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://ResultRunOpenFOAM.sh\">ResultRunOpenFOAM.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>TCSjobScheduler_1</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>ito-g-1-dbg</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>cavity.tar.gz</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://ResultRunOpenFOAM.sh\">ResultRunOpenFOAM.sh</a></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"http://ResultRunOpenFOAM.sh\">ResultRunOpenFOAM.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\n#PJM -L &quot;rscgrp=ito-g-1-dbg&quot;\n#PJM -L &quot;rscunit=ito-b&quot;\n#PJM -L &quot;elapse=1:00:00&quot;\n#PJM -j -X -S\n\ncd ../WORK/cavity\nreconstructPar  \ntouch result.foam  \ncd ../\ntar cvzf cavity.tar.gz cavity\n</code></pre>\n<p><img src=\"./img/ResultRunOpenFOAM_Task.png\" alt=\"img\" title=\"OpenFOAM_ResultRunOpenFOAM_Task\"></p>\n<p>設定は以下です。</p>\n<ol>\n<li>ITOコンピュータでOpenFOAMを実行するために必要なジョブスクリプトrunOpenFOAM.shをインポートします</li>\n<li>プロパティ[ script ]にResultRunOpenFOAM.shを設定します</li>\n<li>プロパティ[ remotehost ]に事前に登録しているITOのリモートホスト情報「TCSjobScheduler_1」設定すします*</li>\n<li>プロパティ[ useJobScheduler ]をチェックし、プロパティ[ queue ]に「ito-g-1-dbg」を設定します</li>\n<li>includeに回収するファイル名「cavity.tar.gz」を設定します</li>\n</ol>\n<h3 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">ジョブスクリプトに関して <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>WHEELは、リソースグループを用い、効率的に計算資源を利用することを目的としています。<br>\nよって、キュー内で解析が完了するようにモデル規模、またノード数、プロセス数を設定しジョブを投入する必要があります。<br>\n本解析は<strong>4ノード36プロセス</strong>にて解析を行っております。</p>\n<p>また、ジョブスクリプトrunOpenFOAM.shには、#PJMで始まるジョブへのオプション設定の他に「OpenFOAMを実行するためのコマンド」を用意しています。<br>\nここでは、ITOでOpenFOAMを実行するためのコマンドを紹介します。</p>\n<p>ITOで利用できるOpenFOAMのバージョンを確認するためには、</p>\n<pre><code>$ module avail\n</code></pre>\n<p>コマンドで確認してください。</p>\n<p>また、解析完了後、Paraviewで解析結果を確認するためには、空の「○○.foam」ファイル（○○は任意の文字列）が<br>\n必要であるため、空ファイルを作成するコマンド</p>\n<pre><code>$ touch ○○.foam\n</code></pre>\n<p>をスクリプト内に組み込んでおくと結果確認をスムーズに行うことができます。</p>\n<h3 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">リモートホスト登録情報に関して <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>本事例は、ITOのリソースグループを利用してジョブを投入することを前提としております。<br>\nそのため、前述のホスト情報登録方法に従い、ITOのリソースグループにジョブを投入するためのホスト情報を登録しておく必要があります。<br>\n本サンプルでは、ITOコンピュータでリソースグループito-g-1-dbgを使用して計算を行うため「TCSjobScheduler_1」としています。</p>\n<p>参考として、本事例で設定したホスト情報の中で注意すべき項目を示します。</p>\n<ul>\n<li>Host Work Dir：/scratch/groupname/…<br>\n※リソースグループを用いてジョブを投入する場合、/home,/dataからジョブを投入することはできません。詳細はITOのユーザガイドをご確認ください。</li>\n<li>Job Scheduler：TCS\n※ジョブスケジューラの設定は、WHEELのモジュールディレクトリ内[ app/db/jobSceduler.json ]にて行ってください。</li>\n<li>Queue：ito-g-1-dbg\n※ホスト情報のQueue欄に[ ito-g-1-dbg ]登録を登録しておくことで、Taskのプロパティからの選択が可能となります。</li>\n</ul>\n<p>以上でワークフローの設定は終了です。</p>\n<h2 id=\"3.-%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E6%8A%95%E5%85%A5\">3. ジョブの投入 <a class=\"heading-anchor-permalink\" href=\"#3.-%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E6%8A%95%E5%85%A5\">#</a></h2>\n<p>ジョブの投入を行います。前述の「9.ワークフローの作成」にありますように、ジョブの投入は、ワークフロー実行画面上部の実行ボタンより行います。<br>\n実行状況の確認は、ログエリアやコンポーネント右上の実行状況表示アイコン、及びリストビュー画面から行います。</p>\n<p><img src=\"./img/finishState.png\" alt=\"img\" title=\"ジョブの投入\"></p>\n<h2 id=\"4.-%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\">4. 解析結果の確認 <a class=\"heading-anchor-permalink\" href=\"#4.-%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>解析結果の確認を行います。<br>\nリモート環境から回収した計算結果ファイルをローカル環境に移動し、「Paraview」にて確認します。</p>\n<h3 id=\"%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3\">解析結果のオープン <a class=\"heading-anchor-permalink\" href=\"#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3\">#</a></h3>\n<p>Paraviewを起動し、[ File ] -&gt; [ Open ]… より、「result.foam *1」ファイルを選択し、[ OK ]ボタンを押下します。　　\n*1 result.foam ファイルは、ジョブスクリプト内の「touch」コマンドにて作成したものです。（詳細は、前述の「ジョブスクリプトに関して」をご参照ください）</p>\n<h3 id=\"%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C\">解析結果 <a class=\"heading-anchor-permalink\" href=\"#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C\">#</a></h3>\n<p>参考として風速ベクトルの可視化結果を記載します。</p>\n<p><img src=\"./img/cavity_result.png\" alt=\"img\" title=\"風速ベクトル\"></p>\n<p>OpenFOAMを利用した九大ITOによる解析ワークフロー例は以上になります。</p>\n",
      "id": 26
    },
    {
      "path": "WHEEL_tutorial/4_TensorFlow_UGE_sample/TensorFlow_UGE_sample.md",
      "url": "WHEEL_tutorial/4_TensorFlow_UGE_sample/TensorFlow_UGE_sample.html",
      "content": "# TensorFlowを利用したMNISTデータ解析ワークフロー\n\n本章では、WHEELを用いた計算事例として「TensorFlowを利用したMNISTデータの解析ワークフロー」を紹介します。  \n本事例では、TensorFlowを利用するリモートタスクを用いて、MNISTデータを用いた手書き数字画像学習モデルを作成します。  \n以降、下記の順にて事例内容を紹介します。  \n\n1. MNISTデータについて\n1. NN(Neural Network)について\n1. kerasについて\n1. ワークフローの作成\n1. ジョブの投入\n1. 解析結果の確認\n\nまた、Taskコンポーネントで使用するスクリプト例は、  \n下記よりダウンロード可能です。  \n<a href=\"./sample/runTensorFlow.zip\">TensorFlowサンプルデータ</a>\n\n## 1. MNISTデータについて\n\nここでは、本事例で使用するMNISTデータについて説明をします。  \nMNISTとは手書き数字画像60000枚とテスト画像10000枚を集めた画像データセットのことであり、  \nニューラルネットワークを学習するうえで非常に便利な画像のデータセットとして著名です。  \nデータセットの中身は以下のような構造になっています。  \n```\nMNISTデータ\n　├ 学習用データ (60,000個)\n　│ 　├ 画像データ\n　│ 　└ ラベルデータ(正解データ)\n　│\n　└ 検証用データ (10,000個)\n　　 　├ 画像データ\n　　 　└ ラベルデータ（正解データ）\n```\n各画像データに対して正解データであるラベルデータが一つずつ与えられています。\n\n## 2. NN(Neural Network)について\n\nここでは、MNISTデータを解析する際に使用するNNという手法について説明します。  \nNNとは、ニューラルネットワークの略で、人間の脳内にある神経細胞（ニューロン）とそのつながり、つまり神経回路網を人工ニューロンという数式的なモデルで表現したものです。  \n入力層、出力層、隠れ層から構成されていて、層と層の間には、ニューロン同士のつながりの強さを示す「重み」があります。  \n\n![img](./img/NN.PNG \"ニューラルネットワークについて\")  \n\n画像より特徴を抽出して、ノードの重みを更新していき学習させていきます。  \n本事例では、MNISTのデータセットを用いたので28*28ピクセルの入力から0~9の数字のどれかという出力を出すために入力層を784ノード、出力層を10ノードとしています。\n\n## 3. kerasについて\n\nKerasは、オープンソースのニューラルネットワークライブラリです。  \nディープニューラルネットワークを用いた迅速な実験を行えるように設計されており、「シンプル」「モジュール式」「拡張性」などの特徴があります。  \nKerasは以下のバックエンドをサポートしており、TensorFlowをデフォルトのテンソル計算ライブラリとしています。  \n\n- TensorFlow\n- Microsoft Cognitive Toolkit\n- Theano\n\n```\nmodel = Sequential()\nmodel.add(Dense(8, input_dim=4))\nmodel.add(Activation('relu'))\nmodel.add(Dense(3, input_dim=8))\nmodel.add(Activation('softmax'))\nmodel.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n```\n\n上記にkerasによるモデリング例を載せていますが、直感的にモデリングをすることが出来るのがkerasの特徴です。  \nこれにより、ニューラルネットワークの設計を容易に行うことができます。本モデル例は以下の内容となります。\n\n- 入力層は四つのノードを持っています。\n- 隠れ層の数は一つで、ノード数は8です。\n- 隠れ層のそれぞれのノードは入力層のノードの重みとの線形結合された値を受け取り、活性化関数を適応させています。\n- 出力層は3つのノードを持っています。\n- 出力層のそれぞれのノードは入力層のノードの重みとの線形結合された値を受け取り、活性化関数を適応させています。\n\n## 4. WHEELによるワークフローの作成\n\n本節では、WHEELでのパラメトリックスタディ解析に必要なワークフローコンポーネントについて説明します。  \n本事例で必要なコンポーネントとその役割は以下です。  \n\n- Task コンポーネント - 1：ジョブ投入前の前処理\n- Task コンポーネント - 2：MNISTデータを用いたnnモデルの学習\n- Task コンポーネント - 3：nnモデルの評価\n\n以降で、各コンポーネントについて説明します。\n\n### Task コンポーネント - 1\n\n続いて、ジョブ投入用及びTensorFlow解析実行用コンポーネント「PreRunTensorFlow_Task」について説明します。  \n本コンポーネントは、スーパーコンピュータのキューを用いてTensorFlowによるMNISTデータ学習の前処理を実行するためのコンポーネントです。\n\nrunTensorFlow_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### PreRunTensorFlow_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | PreRunTensorFlow_Task |\n| Script | PreRunTensorFlow.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | UGEjobScheduler |\n| UseJobScheduler | true |\n| Queue | - |\n| Clean up flag | keep files |\n| include | - |\n| exclude | - |\n| Files | kerasMNIST.py , kerasMNISTEval.py |\n\n> PreRunTensorFlow.sh  \n```\n#!/bin/bash\n#$ -l rt_F=1\n#$ -j y\n#$ -cwd\n\nmv kerasMNIST.py kerasMNISTEval.py /${WORK}\ncd /${WORK}\nsource /etc/profile.d/modules.sh\nmodule load singularity/2.6.1\nsingularity pull docker://nvcr.io/nvidia/tensorflow:19.06-py2\n```\n\n設定は以下です。　　\n\n1. スーパーコンピュータでTensorFlowを実行するためのディレクトリに移動します\n1. プロパティ[ script ]にPreRunTensorFlow.shを設定します\n1. プロパティ[ remotehost ]に事前に登録しているリモートホスト情報「UGEjobScheduler」設定します *\n\n*　ジョブスケジューラーにUGEを使用して計算を行うため「UGEjobScheduler」としています。  \n　 ユーザの環境に合わせて名称の変更が必要です。\n\n![img](./img/PreRunTensorFlow_Task.PNG \"TensorFlow_Task\")  \n\n以上がTaskコンポーネント - 1 の設定になります。\n\n### Task コンポーネント - 2\n\n続いて、ジョブ投入用及びTensorFlow解析実行用コンポーネント「TrainRunTensorFlow_Task」について説明します。  \n本コンポーネントは、スーパーコンピュータのキューを用いてTensorFlowによるMNISTデータ学習処理を実行するためのコンポーネントです。\n\nTrainRunTensorFlow_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### TrainRunTensorFlow_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | TrainRunTensorFlow_Task |\n| Script | TrainRunTensorFlow.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | UGEjobScheduler |\n| UseJobScheduler | true |\n| Queue | - |\n| Clean up flag | keep files |\n| include | - |\n| exclude | - |\n| Files | - |\n\n> runTensorFlow.sh  \n```\n#!/bin/bash\n#$ -l rt_F=1\n#$ -j y\n#$ -cwd\n\ncd /${WORK}\nsource /etc/profile.d/modules.sh\nmodule load singularity/2.6.1\nsingularity run --nv tensorflow-19.06-py2.simg python kerasMNIST.py > ./log.MNIST 2>&1\n```\n\n設定は以下です。　　\n\n1. スーパーコンピュータでTensorFlowを実行するためのジョブスクリプトTrainRunTensorFlow.shをインポートします\n1. プロパティ[ script ]にTrainRunTensorFlow.shを設定します\n1. プロパティ[ remotehost ]に事前に登録しているリモートホスト情報「UGEjobScheduler」設定します *\n\n![img](./img/TrainRunTensorFlow_Task.PNG \"TensorFlow_Task\")  \n\n以上がTaskコンポーネント - 2 の設定になります。\n\n### Task コンポーネント - 3\n\n続いて、ジョブ投入用及びTensorFlow解析実行用コンポーネント「EvalRunTensorFlow_Task」について説明します。  \n本コンポーネントは、スーパーコンピュータのキューを用いてTensorFlowによるMNISTデータを学習したモデルを評価するためのコンポーネントです。\n\nEvalRunTensorFlow_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。\n\n##### EvalRunTensorFlow_Task\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Name | EvalRunTensorFlow_Task |\n| Script | EvalRunTensorFlow.sh |\n| InputFiles | - |\n| OutputFiles | - |\n| Remotehost | UGEjobScheduler |\n| UseJobScheduler | true |\n| Queue | - |\n| Clean up flag | keep files |\n| include | - |\n| exclude | - |\n| Files | - |\n\n> EvalRunTensorFlow.sh  \n```\n#!/bin/bash\n#$ -l rt_F=1\n#$ -j y\n#$ -cwd\n\ncd /${WORK}\nsource /etc/profile.d/modules.sh\nmodule load singularity/2.6.1\nsingularity run --nv tensorflow-19.06-py2.simg python kerasMNISTEval.py > ./log.MNISTEval 2>&1\n```\n\n設定は以下です。　　\n\n1. スーパーコンピュータでTensorFlowを実行するためのジョブスクリプトEvalRunTensorFlow.shをインポートします\n1. プロパティ[ script ]にEvalRunTensorFlow.shを設定します\n1. プロパティ[ remotehost ]に事前に登録しているリモートホスト情報「UGEjobScheduler」設定します *\n\n![img](./img/EvalRunTensorFlow_Task.PNG \"TensorFlow_Task\")  \n\n以上がTaskコンポーネント - 3 の設定になります。\n\n### ジョブスクリプトに関して\n\nWHEELは、効率的に計算資源を利用することを目的としています。  \n\nスーパーコンピューターでTensorFlowを実行するためのコマンドを紹介します。  \n\n本解析では、NVIDIA GPU Cloud(NGC)が提供するDockerイメージをsingularityを用いて実行しています。\n```\nsingularity pull docker://nvcr.io/nvidia/tensorflow:19.06-py2\n```\n\nまた、処理終了後、実行結果を確認するためにログを出力するようにしておくと各タスクの動作確認が容易に実施できます。\n```\nsingularity run --nv tensorflow-19.06-py2.simg python kerasMNISTEval.py > ./log.MNISTEval 2>&1\n```\n\n### リモートホスト登録情報に関して\n\n本事例は、jobSchedulerにUGE利用してジョブを投入することを前提としています。  \nそのため、前述のホスト情報登録方法に従い、ホスト情報を登録しておく必要があります。\n本サンプルでは、UGEjobSchedulerを使用するため「UGEjobScheduler」としています。  \n\n## 4. ジョブの投入\n\nジョブの投入を行います。前述の「9.ワークフローの作成」にありますように、ジョブの投入は、ワークフロー実行画面上部の実行ボタンより行います。  \n実行状況の確認は、ログエリアやコンポーネント右上の実行状況表示アイコン、及びリストビュー画面から行います。  \n\n![img](./img/jobUGE.png \"ジョブの投入\")  \n\n## 5. 解析結果の確認\n\n解析結果の確認を行います。  \n実行完了後、リモートタスクに作成された「log.kerasMNIST」,「log.kerasMNISTEval」ファイルより以下の結果を確認することができます。\n```\n・\n・\n・\n('Test loss:', 0.27075190788507464)\n('Test accuracy:', 0.927)\n```\n\n用語の意味は以下の通りとなっています。\n\n| プロパティ名 | 設定値 |\n| ---- | ---- |\n| Test loss | 学習用データを与えた時の損失値。小さくなればなるほど正しい結果を表せています |\n| Test accuracy | 検証用データの正答率。1に近いほど検証用データにおいて精度が高いことを表しています |\n\naccuracyが「0.927」すなわち検証用データにおいて精度92.7%の学習モデルが作成されたことが確認できます。  \nTensorFlowを利用したMNISTデータ解析ワークフロー例は以上になります。\n",
      "html": "<h1 id=\"tensorflow%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9Fmnist%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\">TensorFlowを利用したMNISTデータ解析ワークフロー <a class=\"heading-anchor-permalink\" href=\"#tensorflow%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9Fmnist%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC\">#</a></h1>\n<p>本章では、WHEELを用いた計算事例として「TensorFlowを利用したMNISTデータの解析ワークフロー」を紹介します。<br>\n本事例では、TensorFlowを利用するリモートタスクを用いて、MNISTデータを用いた手書き数字画像学習モデルを作成します。<br>\n以降、下記の順にて事例内容を紹介します。</p>\n<ol>\n<li>MNISTデータについて</li>\n<li>NN(Neural Network)について</li>\n<li>kerasについて</li>\n<li>ワークフローの作成</li>\n<li>ジョブの投入</li>\n<li>解析結果の確認</li>\n</ol>\n<p>また、Taskコンポーネントで使用するスクリプト例は、<br>\n下記よりダウンロード可能です。<br>\n<a href=\"./sample/runTensorFlow.zip\">TensorFlowサンプルデータ</a></p>\n<h2 id=\"1.-mnist%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">1. MNISTデータについて <a class=\"heading-anchor-permalink\" href=\"#1.-mnist%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>ここでは、本事例で使用するMNISTデータについて説明をします。<br>\nMNISTとは手書き数字画像60000枚とテスト画像10000枚を集めた画像データセットのことであり、<br>\nニューラルネットワークを学習するうえで非常に便利な画像のデータセットとして著名です。<br>\nデータセットの中身は以下のような構造になっています。</p>\n<pre><code>MNISTデータ\n　├ 学習用データ (60,000個)\n　│ 　├ 画像データ\n　│ 　└ ラベルデータ(正解データ)\n　│\n　└ 検証用データ (10,000個)\n　　 　├ 画像データ\n　　 　└ ラベルデータ（正解データ）\n</code></pre>\n<p>各画像データに対して正解データであるラベルデータが一つずつ与えられています。</p>\n<h2 id=\"2.-nn(neural-network)%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">2. NN(Neural Network)について <a class=\"heading-anchor-permalink\" href=\"#2.-nn(neural-network)%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>ここでは、MNISTデータを解析する際に使用するNNという手法について説明します。<br>\nNNとは、ニューラルネットワークの略で、人間の脳内にある神経細胞（ニューロン）とそのつながり、つまり神経回路網を人工ニューロンという数式的なモデルで表現したものです。<br>\n入力層、出力層、隠れ層から構成されていて、層と層の間には、ニューロン同士のつながりの強さを示す「重み」があります。</p>\n<p><img src=\"./img/NN.PNG\" alt=\"img\" title=\"ニューラルネットワークについて\"></p>\n<p>画像より特徴を抽出して、ノードの重みを更新していき学習させていきます。<br>\n本事例では、MNISTのデータセットを用いたので28*28ピクセルの入力から0~9の数字のどれかという出力を出すために入力層を784ノード、出力層を10ノードとしています。</p>\n<h2 id=\"3.-keras%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">3. kerasについて <a class=\"heading-anchor-permalink\" href=\"#3.-keras%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>Kerasは、オープンソースのニューラルネットワークライブラリです。<br>\nディープニューラルネットワークを用いた迅速な実験を行えるように設計されており、「シンプル」「モジュール式」「拡張性」などの特徴があります。<br>\nKerasは以下のバックエンドをサポートしており、TensorFlowをデフォルトのテンソル計算ライブラリとしています。</p>\n<ul>\n<li>TensorFlow</li>\n<li>Microsoft Cognitive Toolkit</li>\n<li>Theano</li>\n</ul>\n<pre><code>model = Sequential()\nmodel.add(Dense(8, input_dim=4))\nmodel.add(Activation('relu'))\nmodel.add(Dense(3, input_dim=8))\nmodel.add(Activation('softmax'))\nmodel.compile(optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy'])\n</code></pre>\n<p>上記にkerasによるモデリング例を載せていますが、直感的にモデリングをすることが出来るのがkerasの特徴です。<br>\nこれにより、ニューラルネットワークの設計を容易に行うことができます。本モデル例は以下の内容となります。</p>\n<ul>\n<li>入力層は四つのノードを持っています。</li>\n<li>隠れ層の数は一つで、ノード数は8です。</li>\n<li>隠れ層のそれぞれのノードは入力層のノードの重みとの線形結合された値を受け取り、活性化関数を適応させています。</li>\n<li>出力層は3つのノードを持っています。</li>\n<li>出力層のそれぞれのノードは入力層のノードの重みとの線形結合された値を受け取り、活性化関数を適応させています。</li>\n</ul>\n<h2 id=\"4.-wheel%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">4. WHEELによるワークフローの作成 <a class=\"heading-anchor-permalink\" href=\"#4.-wheel%E3%81%AB%E3%82%88%E3%82%8B%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>本節では、WHEELでのパラメトリックスタディ解析に必要なワークフローコンポーネントについて説明します。<br>\n本事例で必要なコンポーネントとその役割は以下です。</p>\n<ul>\n<li>Task コンポーネント - 1：ジョブ投入前の前処理</li>\n<li>Task コンポーネント - 2：MNISTデータを用いたnnモデルの学習</li>\n<li>Task コンポーネント - 3：nnモデルの評価</li>\n</ul>\n<p>以降で、各コンポーネントについて説明します。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---1\">Task コンポーネント - 1 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---1\">#</a></h3>\n<p>続いて、ジョブ投入用及びTensorFlow解析実行用コンポーネント「PreRunTensorFlow_Task」について説明します。<br>\n本コンポーネントは、スーパーコンピュータのキューを用いてTensorFlowによるMNISTデータ学習の前処理を実行するためのコンポーネントです。</p>\n<p>runTensorFlow_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"preruntensorflow_task\">PreRunTensorFlow_Task <a class=\"heading-anchor-permalink\" href=\"#preruntensorflow_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>PreRunTensorFlow_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://PreRunTensorFlow.sh\">PreRunTensorFlow.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>UGEjobScheduler</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>-</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td><a href=\"http://kerasMNIST.py\">kerasMNIST.py</a> , <a href=\"http://kerasMNISTEval.py\">kerasMNISTEval.py</a></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"http://PreRunTensorFlow.sh\">PreRunTensorFlow.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\n#$ -l rt_F=1\n#$ -j y\n#$ -cwd\n\nmv kerasMNIST.py kerasMNISTEval.py /${WORK}\ncd /${WORK}\nsource /etc/profile.d/modules.sh\nmodule load singularity/2.6.1\nsingularity pull docker://nvcr.io/nvidia/tensorflow:19.06-py2\n</code></pre>\n<p>設定は以下です。</p>\n<ol>\n<li>スーパーコンピュータでTensorFlowを実行するためのディレクトリに移動します</li>\n<li>プロパティ[ script ]にPreRunTensorFlow.shを設定します</li>\n<li>プロパティ[ remotehost ]に事前に登録しているリモートホスト情報「UGEjobScheduler」設定します *</li>\n</ol>\n<p>*　ジョブスケジューラーにUGEを使用して計算を行うため「UGEjobScheduler」としています。<br>\n　 ユーザの環境に合わせて名称の変更が必要です。</p>\n<p><img src=\"./img/PreRunTensorFlow_Task.PNG\" alt=\"img\" title=\"TensorFlow_Task\"></p>\n<p>以上がTaskコンポーネント - 1 の設定になります。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---2\">Task コンポーネント - 2 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---2\">#</a></h3>\n<p>続いて、ジョブ投入用及びTensorFlow解析実行用コンポーネント「TrainRunTensorFlow_Task」について説明します。<br>\n本コンポーネントは、スーパーコンピュータのキューを用いてTensorFlowによるMNISTデータ学習処理を実行するためのコンポーネントです。</p>\n<p>TrainRunTensorFlow_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"trainruntensorflow_task\">TrainRunTensorFlow_Task <a class=\"heading-anchor-permalink\" href=\"#trainruntensorflow_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>TrainRunTensorFlow_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://TrainRunTensorFlow.sh\">TrainRunTensorFlow.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>UGEjobScheduler</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>-</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"http://runTensorFlow.sh\">runTensorFlow.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\n#$ -l rt_F=1\n#$ -j y\n#$ -cwd\n\ncd /${WORK}\nsource /etc/profile.d/modules.sh\nmodule load singularity/2.6.1\nsingularity run --nv tensorflow-19.06-py2.simg python kerasMNIST.py &gt; ./log.MNIST 2&gt;&amp;1\n</code></pre>\n<p>設定は以下です。</p>\n<ol>\n<li>スーパーコンピュータでTensorFlowを実行するためのジョブスクリプトTrainRunTensorFlow.shをインポートします</li>\n<li>プロパティ[ script ]にTrainRunTensorFlow.shを設定します</li>\n<li>プロパティ[ remotehost ]に事前に登録しているリモートホスト情報「UGEjobScheduler」設定します *</li>\n</ol>\n<p><img src=\"./img/TrainRunTensorFlow_Task.PNG\" alt=\"img\" title=\"TensorFlow_Task\"></p>\n<p>以上がTaskコンポーネント - 2 の設定になります。</p>\n<h3 id=\"task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---3\">Task コンポーネント - 3 <a class=\"heading-anchor-permalink\" href=\"#task-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88---3\">#</a></h3>\n<p>続いて、ジョブ投入用及びTensorFlow解析実行用コンポーネント「EvalRunTensorFlow_Task」について説明します。<br>\n本コンポーネントは、スーパーコンピュータのキューを用いてTensorFlowによるMNISTデータを学習したモデルを評価するためのコンポーネントです。</p>\n<p>EvalRunTensorFlow_Taskコンポーネントに設定するプロパティ、及びスクリプトの中身は以下です。</p>\n<h5 id=\"evalruntensorflow_task\">EvalRunTensorFlow_Task <a class=\"heading-anchor-permalink\" href=\"#evalruntensorflow_task\">#</a></h5>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>EvalRunTensorFlow_Task</td>\n</tr>\n<tr>\n<td>Script</td>\n<td><a href=\"http://EvalRunTensorFlow.sh\">EvalRunTensorFlow.sh</a></td>\n</tr>\n<tr>\n<td>InputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OutputFiles</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Remotehost</td>\n<td>UGEjobScheduler</td>\n</tr>\n<tr>\n<td>UseJobScheduler</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Queue</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Clean up flag</td>\n<td>keep files</td>\n</tr>\n<tr>\n<td>include</td>\n<td>-</td>\n</tr>\n<tr>\n<td>exclude</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Files</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"http://EvalRunTensorFlow.sh\">EvalRunTensorFlow.sh</a></p>\n</blockquote>\n<pre><code>#!/bin/bash\n#$ -l rt_F=1\n#$ -j y\n#$ -cwd\n\ncd /${WORK}\nsource /etc/profile.d/modules.sh\nmodule load singularity/2.6.1\nsingularity run --nv tensorflow-19.06-py2.simg python kerasMNISTEval.py &gt; ./log.MNISTEval 2&gt;&amp;1\n</code></pre>\n<p>設定は以下です。</p>\n<ol>\n<li>スーパーコンピュータでTensorFlowを実行するためのジョブスクリプトEvalRunTensorFlow.shをインポートします</li>\n<li>プロパティ[ script ]にEvalRunTensorFlow.shを設定します</li>\n<li>プロパティ[ remotehost ]に事前に登録しているリモートホスト情報「UGEjobScheduler」設定します *</li>\n</ol>\n<p><img src=\"./img/EvalRunTensorFlow_Task.PNG\" alt=\"img\" title=\"TensorFlow_Task\"></p>\n<p>以上がTaskコンポーネント - 3 の設定になります。</p>\n<h3 id=\"%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">ジョブスクリプトに関して <a class=\"heading-anchor-permalink\" href=\"#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>WHEELは、効率的に計算資源を利用することを目的としています。</p>\n<p>スーパーコンピューターでTensorFlowを実行するためのコマンドを紹介します。</p>\n<p>本解析では、NVIDIA GPU Cloud(NGC)が提供するDockerイメージをsingularityを用いて実行しています。</p>\n<pre><code>singularity pull docker://nvcr.io/nvidia/tensorflow:19.06-py2\n</code></pre>\n<p>また、処理終了後、実行結果を確認するためにログを出力するようにしておくと各タスクの動作確認が容易に実施できます。</p>\n<pre><code>singularity run --nv tensorflow-19.06-py2.simg python kerasMNISTEval.py &gt; ./log.MNISTEval 2&gt;&amp;1\n</code></pre>\n<h3 id=\"%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">リモートホスト登録情報に関して <a class=\"heading-anchor-permalink\" href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%9B%E3%82%B9%E3%83%88%E7%99%BB%E9%8C%B2%E6%83%85%E5%A0%B1%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6\">#</a></h3>\n<p>本事例は、jobSchedulerにUGE利用してジョブを投入することを前提としています。<br>\nそのため、前述のホスト情報登録方法に従い、ホスト情報を登録しておく必要があります。\n本サンプルでは、UGEjobSchedulerを使用するため「UGEjobScheduler」としています。</p>\n<h2 id=\"4.-%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E6%8A%95%E5%85%A5\">4. ジョブの投入 <a class=\"heading-anchor-permalink\" href=\"#4.-%E3%82%B8%E3%83%A7%E3%83%96%E3%81%AE%E6%8A%95%E5%85%A5\">#</a></h2>\n<p>ジョブの投入を行います。前述の「9.ワークフローの作成」にありますように、ジョブの投入は、ワークフロー実行画面上部の実行ボタンより行います。<br>\n実行状況の確認は、ログエリアやコンポーネント右上の実行状況表示アイコン、及びリストビュー画面から行います。</p>\n<p><img src=\"./img/jobUGE.png\" alt=\"img\" title=\"ジョブの投入\"></p>\n<h2 id=\"5.-%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\">5. 解析結果の確認 <a class=\"heading-anchor-permalink\" href=\"#5.-%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>解析結果の確認を行います。<br>\n実行完了後、リモートタスクに作成された「log.kerasMNIST」,「log.kerasMNISTEval」ファイルより以下の結果を確認することができます。</p>\n<pre><code>・\n・\n・\n('Test loss:', 0.27075190788507464)\n('Test accuracy:', 0.927)\n</code></pre>\n<p>用語の意味は以下の通りとなっています。</p>\n<table>\n<thead>\n<tr>\n<th>プロパティ名</th>\n<th>設定値</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Test loss</td>\n<td>学習用データを与えた時の損失値。小さくなればなるほど正しい結果を表せています</td>\n</tr>\n<tr>\n<td>Test accuracy</td>\n<td>検証用データの正答率。1に近いほど検証用データにおいて精度が高いことを表しています</td>\n</tr>\n</tbody>\n</table>\n<p>accuracyが「0.927」すなわち検証用データにおいて精度92.7%の学習モデルが作成されたことが確認できます。<br>\nTensorFlowを利用したMNISTデータ解析ワークフロー例は以上になります。</p>\n",
      "id": 27
    },
    {
      "path": "readme.md",
      "url": "readme.html",
      "content": "# WHEEL　ユーザーガイド \n\n## はじめに\n### ・ 本ユーザガイドの目的  \n本ユーザーガイドは、ワークフローシステムWHEELの初学者が自身の課題を解決するためのワークフローを、WHEELを使って実現するための自習用ドキュメントです。  \n本チュートリアルの対象ユーザは、シェルスクリプトに関する知識、および「京」コンピュータのジョブスクリプトの作成方法とジョブの投入方法についての知識は有しているものとしています。  \n### ・ 本ユーザガイドの構成  \n本ユーザガイドは、以下の内容によって構成されています。  \n1. WHEELの手順書\n    1. [WHEELの起動方法(docker使用)](WHEEL_introduction/how_to_boot/boot.md)\n1. WHEELのマニュアル\n    1. ホーム画面\n        1. [新規プロジェクトの作成（ニュー、インポート）](WHEEL_manual/1_home_screen/create_project.md)\n        1. [既存プロジェクトの編集（オープン、リネーム、デリート）](WHEEL_manual/1_home_screen/edit_project.md)\n    1. [リモートホスト登録画面](WHEEL_manual/2_remotehost_screen/remotehost.md)\n    1. ワークフロー画面\n        1. [グラフビュー画面仕様説明](WHEEL_manual/3_workflow_screen/1_graphview.md)\n        1. [リストビュー画面仕様説明](WHEEL_manual/3_workflow_screen/2_listview.md)\n        1. [テキストエディタ画面仕様説明](WHEEL_manual/3_workflow_screen/3_rapid.md)\n    1. コンポーネントの説明\n        1. [Task](WHEEL_manual/4_component/1_Task.md)\n        1. [If](WHEEL_manual/4_component/2_If.md)\n        1. [For](WHEEL_manual/4_component/3_For.md)\n        1. [Foreach](WHEEL_manual/4_component/4_Foreach.md)\n        1. [While](WHEEL_manual/4_component/5_While.md)\n        1. [Source](WHEEL_manual/4_component/6_Source.md)\n        1. [Viewer](WHEEL_manual/4_component/7_Viewer.md)\n        1. [ParameterStudy](WHEEL_manual/4_component/8_ParameterStudy.md)\n        1. [Workflow](WHEEL_manual/4_component/9_Workflow.md)\n        1. [Stepjob](WHEEL_manual/4_component/10_Stepjob.md)\n        1. [コンポーネントのプロパティ仕様詳細](WHEEL_manual/4_component/11_component_design.md)\n    1. [ワークフローの実行](WHEEL_manual/5_execute_workflow/execute_workflow.md)\n    1. [ジョブスクリプトテンプレート作成画面](WHEEL_manual/6_jobScript_screen/jobScript.md)\n1. WHEELのチュートリアル\n    1. [OpenFOAMを利用したパラメトリックスタディ解析ワークフロー](WHEEL_tutorial/1_OpenFOAM_PS_sample/OpenFOAM_PS_sample.md)  \n    1. [京プリポストクラウドを計算資源としたOpenFOAM解析ワークフロー](WHEEL_tutorial/2_2_OpenFOAM_KPrepostCloud_sample/OpenFOAM_KPrepostCloud_sample.md)  \n    1. [OpenFOAMを利用したcavityケースの解析ワークフロー](WHEEL_tutorial/3_OpenFOAM_TCS_sample/OpenFOAM_TCS_sample.md)  \n    1. [TensorFlowを利用したMNISTデータ解析ワークフロー](WHEEL_tutorial/4_TensorFlow_UGE_sample/TensorFlow_UGE_sample.md)  \n1. WHEELの注意事項\n    1. [WHEELの注意事項](ATTENTION.md)",
      "html": "<h1 id=\"wheel-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%AC%E3%82%A4%E3%83%89\">WHEEL　ユーザーガイド <a class=\"heading-anchor-permalink\" href=\"#wheel-%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%AC%E3%82%A4%E3%83%89\">#</a></h1>\n<h2 id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに <a class=\"heading-anchor-permalink\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">#</a></h2>\n<h3 id=\"%E3%83%BB-%E6%9C%AC%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%AC%E3%82%A4%E3%83%89%E3%81%AE%E7%9B%AE%E7%9A%84\">・ 本ユーザガイドの目的 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BB-%E6%9C%AC%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%AC%E3%82%A4%E3%83%89%E3%81%AE%E7%9B%AE%E7%9A%84\">#</a></h3>\n<p>本ユーザーガイドは、ワークフローシステムWHEELの初学者が自身の課題を解決するためのワークフローを、WHEELを使って実現するための自習用ドキュメントです。<br>\n本チュートリアルの対象ユーザは、シェルスクリプトに関する知識、および「京」コンピュータのジョブスクリプトの作成方法とジョブの投入方法についての知識は有しているものとしています。</p>\n<h3 id=\"%E3%83%BB-%E6%9C%AC%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%AC%E3%82%A4%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90\">・ 本ユーザガイドの構成 <a class=\"heading-anchor-permalink\" href=\"#%E3%83%BB-%E6%9C%AC%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%AC%E3%82%A4%E3%83%89%E3%81%AE%E6%A7%8B%E6%88%90\">#</a></h3>\n<p>本ユーザガイドは、以下の内容によって構成されています。</p>\n<ol>\n<li>WHEELの手順書\n<ol>\n<li><a href=\"WHEEL_introduction/how_to_boot/boot.html\">WHEELの起動方法(docker使用)</a></li>\n</ol>\n</li>\n<li>WHEELのマニュアル\n<ol>\n<li>ホーム画面\n<ol>\n<li><a href=\"WHEEL_manual/1_home_screen/create_project.html\">新規プロジェクトの作成（ニュー、インポート）</a></li>\n<li><a href=\"WHEEL_manual/1_home_screen/edit_project.html\">既存プロジェクトの編集（オープン、リネーム、デリート）</a></li>\n</ol>\n</li>\n<li><a href=\"WHEEL_manual/2_remotehost_screen/remotehost.html\">リモートホスト登録画面</a></li>\n<li>ワークフロー画面\n<ol>\n<li><a href=\"WHEEL_manual/3_workflow_screen/1_graphview.html\">グラフビュー画面仕様説明</a></li>\n<li><a href=\"WHEEL_manual/3_workflow_screen/2_listview.html\">リストビュー画面仕様説明</a></li>\n<li><a href=\"WHEEL_manual/3_workflow_screen/3_rapid.html\">テキストエディタ画面仕様説明</a></li>\n</ol>\n</li>\n<li>コンポーネントの説明\n<ol>\n<li><a href=\"WHEEL_manual/4_component/1_Task.html\">Task</a></li>\n<li><a href=\"WHEEL_manual/4_component/2_If.html\">If</a></li>\n<li><a href=\"WHEEL_manual/4_component/3_For.html\">For</a></li>\n<li><a href=\"WHEEL_manual/4_component/4_Foreach.html\">Foreach</a></li>\n<li><a href=\"WHEEL_manual/4_component/5_While.html\">While</a></li>\n<li><a href=\"WHEEL_manual/4_component/6_Source.html\">Source</a></li>\n<li><a href=\"WHEEL_manual/4_component/7_Viewer.html\">Viewer</a></li>\n<li><a href=\"WHEEL_manual/4_component/8_ParameterStudy.html\">ParameterStudy</a></li>\n<li><a href=\"WHEEL_manual/4_component/9_Workflow.html\">Workflow</a></li>\n<li><a href=\"WHEEL_manual/4_component/10_Stepjob.html\">Stepjob</a></li>\n<li><a href=\"WHEEL_manual/4_component/11_component_design.html\">コンポーネントのプロパティ仕様詳細</a></li>\n</ol>\n</li>\n<li><a href=\"WHEEL_manual/5_execute_workflow/execute_workflow.html\">ワークフローの実行</a></li>\n<li><a href=\"WHEEL_manual/6_jobScript_screen/jobScript.html\">ジョブスクリプトテンプレート作成画面</a></li>\n</ol>\n</li>\n<li>WHEELのチュートリアル\n<ol>\n<li><a href=\"WHEEL_tutorial/1_OpenFOAM_PS_sample/OpenFOAM_PS_sample.html\">OpenFOAMを利用したパラメトリックスタディ解析ワークフロー</a></li>\n<li><a href=\"WHEEL_tutorial/2_2_OpenFOAM_KPrepostCloud_sample/OpenFOAM_KPrepostCloud_sample.html\">京プリポストクラウドを計算資源としたOpenFOAM解析ワークフロー</a></li>\n<li><a href=\"WHEEL_tutorial/3_OpenFOAM_TCS_sample/OpenFOAM_TCS_sample.html\">OpenFOAMを利用したcavityケースの解析ワークフロー</a></li>\n<li><a href=\"WHEEL_tutorial/4_TensorFlow_UGE_sample/TensorFlow_UGE_sample.html\">TensorFlowを利用したMNISTデータ解析ワークフロー</a></li>\n</ol>\n</li>\n<li>WHEELの注意事項\n<ol>\n<li><a href=\"ATTENTION.html\">WHEELの注意事項</a></li>\n</ol>\n</li>\n</ol>\n",
      "id": 28
    }
  ]
}